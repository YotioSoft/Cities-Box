/*--------------------------------------------------------------------------------------------------

										Cities Box Ver 0.3
										 Main Source Code
	
										(C)YotioSoft 2017
	
--------------------------------------------------------------------------------------------------*/

*define
/*チップサイズ（64x64）*/
#define chip_size		64

/*タイルを塗りつぶすためのマクロ*/
#define qv(%1,%2)	macro1=%1*chip_size/2-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro1(2)=%1*chip_size/2+chip_size-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro2=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4-camy+%1*chip_size/4:\
					macro2(2)=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4+chip_size/2-camy+%1*chip_size/4:\
					gsquare -1,macro1,macro2
	
/*クウォータービューの位置を取得するためのマクロ（チップ表示用）*/
#define qv2(%1,%2)	macro1@=%1*chip_size/2-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro1@(2)=%1*chip_size/2+chip_size-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro2@=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4-camy+%1*chip_size/4:\
					macro2@(2)=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4+chip_size/2-camy+%1*chip_size/4:\

*module
#module

/*指定された範囲内にマウスがあるか確認する関数（使用例：click_range (100, 0, 300, 300) ）*/
#defcfunc click_range int mouse_x, int mouse_y, int mouse_x2, int mouse_y2
	if mouse_x <= mousex and mouse_x2 >= mousex and mouse_y <= mousey and mouse_y2 >= mousey {
		return 1
	}else{
		return 0
	}
	
/*アドオンの番号を取得する関数*/
#defcfunc addon_num str input_addon_name
	repeat total_addons@
		
		if addon_name@(cnt) = input_addon_name {
			buf_number = cnt
			
			break
		}
		
		if cnt > total_addons@ {
			buf_number = -1
			break
		}
		
	loop
	
	return buf_number
	
/*adatの各項目の読み込み（使用例：get_chapter(元の変数, "検索する項目", "始点区切りコード", "終端コード") ）*/
#defcfunc get_chapter var underlying_var, str search_chapter, str punctuate, str end_word
	value = instr(underlying_var, 0, search_chapter)
	get_chapter_buf = strmid ( underlying_var, value + strlen(""+search_chapter+""+punctuate+""), instr(underlying_var, value + strlen(""+search_chapter+""+punctuate+""), end_word) )
	
	return get_chapter_buf

/*文字を中央に表示（使用例：cmes "hogehoge", 0, 640, 0, 480, 0）*/
#deffunc cmes str ctext, int cx, int cy, int cx2, int cy2, int redraw_exist
	#include "user32.as"
	RECT = cx, cy, cx2, cy2
	DrawText hdc, ctext, -1, varptr(RECT), $01
	
	if redraw_exist = 0 : redraw 1
	return

/*画像をぼかす（hsp/sample/new/gblur.hsp | 使用例：gblur 2）*/
#deffunc gblur int p1, int p2
	gmode 3, ginfo_sx, ginfo_sy, 128
	if (p2&1)=0 {
		repeat p1
		pos 1,0:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),2,0
		loop
	}
	if (p2&2)=0 {
		repeat p1
		pos 0,1:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),0,2
		loop
	}
	return
	
/*半透明色表示命令*/
#deffunc boxfa int ax, int ay, int bx, int by
	pdx = ax, bx, bx, ax
	pdy = ay, ay, by, by
	gsquare -1,pdx, pdy
	return
	
/*アドオンの情報を取得*/
#deffunc get_about_addon int search_addon_number, str search_type, str search_direction, var input_top_left_x, var input_top_left_y, var input_bottom_right_x, var input_bottom_right_y,var input_size_x, var input_size_y
	
	//obj_typeの番号を取得
		repeat addon_total_use_types@(search_addon_number)
			if use_type@( search_addon_number, cnt ) = search_type {
				obj_type_number = cnt
			}
		loop
	
	//オブジェクトの画像上の座標を取得
		repeat addon_total_addon_direction@(search_addon_number, obj_type_number)
			if addon_direction@( search_addon_number, obj_type_number, cnt ) = search_direction {
				input_top_left_x = addon_top_left_x@( search_addon_number, obj_type_number, cnt )
				input_top_left_y = addon_top_left_y@( search_addon_number, obj_type_number, cnt )
				input_bottom_right_x = addon_bottom_right_x@( search_addon_number, obj_type_number, cnt )
				input_bottom_right_y = addon_bottom_right_y@( search_addon_number, obj_type_number, cnt )
				
				input_size_x = addon_size_x@( search_addon_number, obj_type_number, cnt )
				input_size_y = addon_size_y@( search_addon_number, obj_type_number, cnt )
			}
			await 0.1
		loop
	
	return
								
#global
	
*buffering
	//ロゴ、背景画像
		celload "img/logo.png", 1									; ロゴ
		celload "img/AME963_sappro_TP_V.jpg", 2						; タイトル背景画像
	
	//メニューのアイコン
		celload "img/menu_icons/normal_cursor/cursor.png", 3		; 標準カーソル
		celload "img/menu_icons/building/road.png", 4				; メニューアイコン（道路敷設）
		celload "img/menu_icons/building/house.png", 5				; メニューアイコン（一軒家建設）
		celload "img/menu_icons/building/office.png", 6				; メニューアイコン（オフィス建設）
		celload "img/menu_icons/building/post_office.png", 7		; メニューアイコン（郵便局建設）
	
	//バッファ番号1000以降はオブジェクト
		//まずAddonフォルダ内のアドオンの数を取得
			directory = dirinfo(0)
	
			#include "hspext.as"
				chdir "img"
	
				//まずパス名を覗いたファイル一覧を取得
					dirlist2h 2, ','
					dirlist2 buf_addons, "*.adat*", 1, '\\'
		
					sdim addon_file_name, buf_addons
					dirlist2r addon_file_name
					
				//次にパス名を含めたファイル一覧を取得
					dirlist2h 1, ','
					dirlist2 buf_addons, "*.adat*", 1, '\\'
					
					sdim filelist, buf_addons
					dirlist2r filelist
		
					notesel filelist
					total_addons = notemax
	
					addon_number = 0
	
			//sdim＆dim
				sdim addon_name, total_addons
				sdim addon_jp_name, total_addons
				sdim addon_summary, total_addons
				sdim addon_type, total_addons
	
				sdim use_type, total_addons, 100
				dim addon_total_use_types, total_addons
	
				dim addon_total_addon_direction, total_addons, 100
				sdim addon_direction, total_addons, 100, 100
				sdim addon_image, total_addons, 100
			
				sdim addon_size_x_buf, total_addons, 100, 100
				sdim addon_size_y_buf, total_addons, 100, 100
				dim addon_size_x, total_addons, 100, 100
				dim addon_size_y, total_addons, 100, 100
			
				sdim addon_chip_x_buf, total_addons, 100, 100
				sdim addon_chip_y_buf, total_addons, 100, 100
				dim addon_chip_x, total_addons, 100, 100
				dim addon_chip_y, total_addons, 100, 100
			
				sdim addon_top_left_x_buf, total_addons, 100, 100
				sdim addon_top_left_y_buf, total_addons, 100, 100
				dim addon_top_left_x, total_addons, 100, 100
				dim addon_top_left_y, total_addons, 100, 100
			
				sdim addon_bottom_right_x_buf, total_addons, 100, 100
				sdim addon_bottom_right_y_buf, total_addons, 100, 100
				dim addon_bottom_right_x, total_addons, 100, 100
				dim addon_bottom_right_y, total_addons, 100, 100
				
			//オブジェクトのadatファイルを読み込み
				repeat total_addons
					notesel filelist
					noteget buf_filelist, cnt
	
					notesel buf_adat
					noteload buf_filelist
	
					//現在のパス名のみ取得
						addon_path = getpath(buf_filelist, 32)
	
					//ディレクトリ変更
						chdir addon_path
	
					//各項目の読み込み
						//アドオン名
							addon_name(cnt) = get_chapter(buf_adat, "addon_name", " = \\", "\"")
	
						//日本語のアドオン名と説明
							addon_jp_name(cnt) = get_chapter(buf_adat, "addon_jp_name", " = \\", "\"")
							addon_summary(cnt) = get_chapter(buf_adat, "addon_summary", " = \\", "\"")
							
						//アドオンのタイプ
							addon_type(cnt) = get_chapter(buf_adat, "addon_type", " = \"", "\"")
	
						//アドオンのadatファイルの詳細の読み込みへ
							gosub *load_adat
	
						//バッファ
							if addon_total_use_types(addon_number) > 1 {
								repeat addon_total_use_types(addon_number)
									addon_buffer_number = (1000 + addon_number) * 1001 + cnt
									celload addon_image(addon_number, cnt), addon_buffer_number
									await 1
								loop
							} else {
								celload addon_image(addon_number, 0), (1000 + addon_number)
							}
	
						//ディレクトリをimgに戻す
							chdir ""+directory+"\\img"
	
						addon_number++
	
					await 1
				loop
	
			chdir directory
	
*menu
	pos 0, 0 : gzoom 640, 480, 2, 0, 0, 1600, 1066 : gblur 2
	
	pos 265, 50 : gmode 0 : gcopy 1, 0, 0, 110, 110
	
	color 255, 255, 255
	cmes "Ver.0.3", 0, 270, 640, 300
	
	objsize 100, 20
	pos 270, 350 : button "新規マップ作成", *map_preparating
	
	stop

*map_preparating
	clrobj
	
	camx=-300:camy=-150		//カメラの位地
	mapx=100:mapy=100
	
	menu_line_y = 400		//メニューとの境界線
	cursor_mode = "normal"	//カーソルのモード
	
	windowx = 640
	windowy = 480
	
	dim map, mapx, mapy			//マップの座標
	sdim obj_type, mapx, mapy	//座標上にあるオブジェクトのタイプ
	sdim obj_dire, mapx, mapy	//座標上にあるオブジェクトの向き
	
	ix = 0 : iy = 0
	
	repeat mapx * mapy
		map(ix,iy) = addon_num("tile_greenfield")
		obj_type(ix,iy) = "null"
		obj_dire(ix,iy) = "null"
		
		ix++
		if ix = mapx {
			ix = 0
			iy += 1
		}
	loop
	
*map_drawing
	repeat
	
		/*カメラ操作*/
			getkey key_left, 37
			if key_left = 1 {
				camx -= 10
			}
			
			getkey key_up, 38
			if key_up = 1 {
				camy -= 5
			}
			
			getkey key_right, 39
			if key_right = 1 {
				camx += 10
			}
			
			getkey key_down, 40
			if key_down = 1 {
				camy += 5
			}
	
		/*マップ描写*/
			redraw 0
			color 0, 0, 0 : boxf
			
			mousex_=mousex+camx-chip_size/2	//mx,myにマウス座標取得
			mousey_=mousey+camy
			mx=(mousey_+mousex_/2)/(chip_size/2)
			my=(-mousex_+mousey_*2)/chip_size
			
			repeat mapx
				x = cnt
				
				repeat mapy
					y = cnt
	
					if mx=x & my=y and mousey < menu_line_y {		//マウスポインタの位置のチップを光らせる
						color 255, 100, 100
						qv x,y
						title "座標("+x+","+y+") "+atlx+","+atly+" "+abrx+" "+abry+""
						continue
					}
	
					//マウスがクリックされているとき
						getkey mouse_left, 1
						getkey mouse_right, 2
	
						if mouse_left = 1 or mouse_right = 1 {
							gosub *map_drawing_onclick
						}
	
					//周囲のオブジェクトの番号を取得
						left_chip = -1
						top_chip = -1
						bottom_chip = -1
						right_chip = -1
	
						if x > 0 {
							left_chip = map(x-1, y)
						}
						if y > 0 {
							top_chip = map(x, y-1)
						}
						if mapy-1 > y {
							bottom_chip = map(x, y+1)
						}
						if mapx-1 > x {
							right_chip = map(x+1, y)
						}
	
					//道路の向きを調節
						gosub *adjustment_road
					
					//マップ作成
						qv2 x, y
	
						if addon_total_use_types( map(x,y) ) > 1 {
							repeat addon_total_use_types( map(x,y) )
								if obj_type(x, y) = use_type( map(x,y), cnt) {
									buffer_number = (1000 + map(x,y)) * 1001 + cnt
								}
							loop
							
						} else {
							buffer_number = map(x, y) + 1000
						}
	
						get_about_addon map(x,y), obj_type(x,y), obj_dire(x,y), atlx, atly, abrx, abry, sizex, sizey
	
						if sizey > 32 {
							macro2 -= 16
						}
	
						//オブジェクトを表示
						pos macro1, macro2 - sizey/2 + 1
						gmode 2 : gcopy buffer_number, atlx, atly, sizex, sizey
					
				loop
					
			loop
	
*menu_buttons
			//メニュー
				color 0, 0, 0
				gmode 3,,,200 : boxfa 0, 400, 640, 480
	
				//標準カーソルボタン
					if cursor_mode = "normal" {
						gmode 2
						pos 20, 410 : gcopy 3, 0, 32, 32, 32
					} else {
						gmode 2
						pos 20, 410 : gcopy 3, 0, 0, 32, 32
					}
	
				//道路ボタン
					if cursor_mode = "put_Road" {
						gmode 2
						pos 60, 410 : gcopy 4, 0, 32, 32, 32
					} else {
						gmode 2
						pos 60, 410 : gcopy 4, 0, 0, 32, 32
					}
	
				//建物（一軒家）ボタン
					if cursor_mode = "put_House" {
						gmode 2
						pos 92, 410 : gcopy 5, 0, 32, 32, 32
					} else {
						gmode 2
						pos 92, 410 : gcopy 5, 0, 0, 32, 32
					}
	
				//建物（オフィス）ボタン
					if cursor_mode = "put_Office" {
						gmode 2
						pos 124, 410 : gcopy 6, 0, 32, 32, 32
					} else {
						gmode 2
						pos 124, 410 : gcopy 6, 0, 0, 32, 32
					}
	
				//建物（郵便局）ボタン
					if cursor_mode = "put_Postoffice" {
						gmode 2
						pos 156, 410 : gcopy 7, 0, 32, 32, 32
					} else {
						gmode 2
						pos 156, 410 : gcopy 7, 0, 0, 32, 32
					}
					
			redraw 1
			await 40
			c+=16
	loop
	
*map_drawing_onclick
	/*------------------------------------------メニューのボタンの動作------------------------------------------------*/
	
		//標準カーソルボタン
			if click_range( 20, 410, 20+32, 410+32 ) = 1 {
				cursor_mode = "normal"
			}
			
		//道路ボタン
			if click_range( 60, 410, 60+32, 410+32 ) = 1 {
				cursor_mode = "put_Road"
			}
	
		//建物（一軒家）ボタン
			if click_range( 92, 410, 92+32, 410+32 ) = 1 {
				cursor_mode = "put_House"
			}
	
		//建物（オフィス）ボタン
			if click_range( 124, 410, 124+32, 410+32 ) = 1 {
				cursor_mode = "put_Office"
			}
		//建物（郵便局）ボタン
			if click_range( 156, 410, 156+32, 410+32 ) = 1 {
				cursor_mode = "put_Postoffice"
			}
			
	
	/*-----------------道路・建物の建設・敷設（左クリック）、削除（右クリック or 取り壊しモード）---------------------*/
	
		//標準カーソルモードあるいはクリックされたマウスy座標が400以上の場合はreturn
			if cursor_mode = "normal" or mousey >= 400 or mx < 0 or my < 0 {
				return
			}
	
		//周囲のオブジェクトの番号を取得
			left_chip = -1
			top_chip = -1
			bottom_chip = -1
			right_chip = -1
	
			if mx > 0 {
				left_chip = map(mx-1, my)
			}
			if my > 0 {
				top_chip = map(mx, my-1)
			}
			if mapy-1 > my {
				bottom_chip = map(mx, my+1)
			}
			if mapx-1 > mx {
				right_chip = map(mx+1, my)
			}
	
		//建設・敷設
			if mouse_left = 1 {
	
				//道路敷設
					if cursor_mode = "put_Road" and map(mx, my) != addon_num("normal_road") {
						map(mx, my) = addon_num("normal_road")
					}
	
				//道路敷設以外の場合、選択されたマスの周囲（上下左右）に道路があるかどうか（道路に接続できるか）
					if cursor_mode != "put_Road" {
						around_road_exist = -1
						
						if mx > 0 {
							if map(mx-1, my) = addon_num("normal_road") {
								around_road_exist += 1
								obj_dire(mx, my) = "left"
							}
						}
						if my > 0 {
							if map(mx, my-1) = addon_num("normal_road") {
								around_road_exist += 1
								obj_dire(mx, my) = "top"
							}
						}
						if my < mapy {
							if map(mx, my+1) = addon_num("normal_road") {
								around_road_exist += 1
								obj_dire(mx, my) = "bottom"
							}
						}
						if mx < mapx {
							if map(mx+1, my) = addon_num("normal_road") {
								around_road_exist += 1
								obj_dire(mx, my) = "right"
							}
						}
		
						if around_road_exist = -1 {
							dialog "道路に接続されていない場所には建設できません！"
							return
						}
					}
					
	
				//建物（一軒家）建設
					if cursor_mode = "put_House" and map(mx, my) != 2 {
						map(mx, my) = addon_num("red_roof_house")
					}
	
				//建物（オフィス）建設
					if cursor_mode = "put_Office" and map(mx, my) != 1 {
						map(mx, my) = addon_num("white_office")
					}
	
				//建物（郵便局）建設
					if cursor_mode = "put_Postoffice" and map(mx, my) != 1 {
						map(mx, my) = addon_num("post_office")
					}
	
			}
			
		//取り壊し
			if mouse_right = 1 {
	
				//道路削除
					if cursor_mode = "put_Road" and map(mx, my) = addon_num("normal_road") {
						map(mx, my) = addon_num("tile_greenfield")
						obj_type(mx, my) = "null"
						obj_dire(mx, my) = "null"
					}
	
				//家削除
					if cursor_mode = "put_House" and map(mx, my) = addon_num("red_roof_house") {
						map(mx, my) = addon_num("tile_greenfield")
						obj_type(mx, my) = "null"
						obj_dire(mx, my) = "null"
					}
	
				//オフィス削除
					if cursor_mode = "put_Office" and map(mx, my) = addon_num("white_office") {
						map(mx, my) = addon_num("tile_greenfield")
						obj_type(mx, my) = "null"
						obj_dire(mx, my) = "null"
					}
	
				//郵便局削除
					if cursor_mode = "put_Postoffice" and map(mx, my) = addon_num("post_office") {
						map(mx, my) = addon_num("tile_greenfield")
						obj_type(mx, my) = "null"
						obj_dire(mx, my) = "null"
					}
	
			}
		
		return
	
*adjustment_road
	addon_num_buf = addon_num("normal_road")
	
		if map(x, y) = addon_num_buf {
	
			//縦向き
				if left_chip != addon_num_buf and top_chip = addon_num_buf and bottom_chip = addon_num_buf and right_chip != addon_num_buf {
					obj_type(x, y) = "default"
					obj_dire(x, y) = "width"
				}
	
			//横向き
				if left_chip = addon_num_buf and top_chip != addon_num_buf and bottom_chip != addon_num_buf and right_chip = addon_num_buf {
					obj_type(x, y) = "default"
					obj_dire(x, y) = "depth"
				}
	
			//行き止まり
				if left_chip = addon_num_buf and top_chip != addon_num_buf and bottom_chip != addon_num_buf and right_chip != addon_num_buf {
					obj_type(x, y) = "dead_end"
					obj_dire(x, y) = "left"
				}
				if left_chip != addon_num_buf and top_chip = addon_num_buf and bottom_chip != addon_num_buf and right_chip != addon_num_buf {
					obj_type(x, y) = "dead_end"
					obj_dire(x, y) = "top"
				}
				if left_chip != addon_num_buf and top_chip != addon_num_buf and bottom_chip = addon_num_buf and right_chip != addon_num_buf {
					obj_type(x, y) = "dead_end"
					obj_dire(x, y) = "bottom"
				}
				if left_chip != addon_num_buf and top_chip != addon_num_buf and bottom_chip != addon_num_buf and right_chip = addon_num_buf {
					obj_type(x, y) = "dead_end"
					obj_dire(x, y) = "right"
				}
	
			//曲がり角
				if left_chip = addon_num_buf and top_chip = addon_num_buf and bottom_chip != addon_num_buf and right_chip != addon_num_buf {
					obj_type(x, y) = "turn"
					obj_dire(x, y) = "left-top"
				}
				if left_chip != addon_num_buf and top_chip = addon_num_buf and bottom_chip != addon_num_buf and right_chip = addon_num_buf {
					obj_type(x, y) = "turn"
					obj_dire(x, y) = "right-top"
				}
				if left_chip = addon_num_buf and top_chip != addon_num_buf and bottom_chip = addon_num_buf and right_chip != addon_num_buf {
					obj_type(x, y) = "turn"
					obj_dire(x, y) = "left-bottom"
				}
				if left_chip != addon_num_buf and top_chip != addon_num_buf and bottom_chip = addon_num_buf and right_chip = addon_num_buf {
					obj_type(x, y) = "turn"
					obj_dire(x, y) = "right-bottom"
				}
	
			//T字型交差点
				if left_chip = addon_num_buf and top_chip = addon_num_buf and bottom_chip = addon_num_buf and right_chip != addon_num_buf {
					obj_type(x, y) = "intersection_T"
					obj_dire(x, y) = "left-top-bottom"
				}
				if left_chip = addon_num_buf and top_chip = addon_num_buf and bottom_chip != addon_num_buf and right_chip = addon_num_buf {
					obj_type(x, y) = "intersection_T"
					obj_dire(x, y) = "left-right-top"
				}
				if left_chip = addon_num_buf and top_chip != addon_num_buf and bottom_chip = addon_num_buf and right_chip = addon_num_buf {
					obj_type(x, y) = "intersection_T"
					obj_dire(x, y) = "left-right-bottom"
				}
				if left_chip != addon_num_buf and top_chip = addon_num_buf and bottom_chip = addon_num_buf and right_chip = addon_num_buf {
					obj_type(x, y) = "intersection_T"
					obj_dire(x, y) = "right-top-bottom"
				}
	
			//十字型交差点
				if left_chip = addon_num_buf and top_chip = addon_num_buf and bottom_chip = addon_num_buf and right_chip = addon_num_buf {
					obj_type(x, y) = "intersection_cross"
					obj_dire(x, y) = "null"
				}
	
			//1マスだけ孤立した（周りに接続する道路がない）道路の場合はコンクリートタイルを表示
				if left_chip != addon_num_buf and top_chip != addon_num_buf and bottom_chip != addon_num_buf and right_chip != addon_num_buf {
					obj_type(x, y) = "intersection_cross"
					obj_dire(x, y) = "null"
				}
	
			}
	
	return
	
*load_adat
	notesel buf_adat
			
	use_types_buf = get_chapter(buf_adat, "use_types", " = \"", "\"")
	
	//adat_use_typesを更にタイプごとに分ける
		split use_types_buf, ", ", use_type_buf
	
		repeat stat
			use_type(addon_number, cnt) = use_type_buf(cnt)
			await 1
		loop
				
	//タイプの数を取得
		addon_total_use_types(addon_number) = stat
				
	//各タイプごとの概要を取得
	
		//取得開始
		repeat addon_total_use_types(addon_number)
			use_type_summary = get_chapter(buf_adat, ""+use_type(addon_number, cnt)+" {", " {", ";")
	
			//使用する画像の取得（image）
				addon_image(addon_number, cnt) = get_chapter(use_type_summary, "image", " = \"", "\"")
						
			//タイプの向きを取得（direction）
				addon_direction_buf = get_chapter(use_type_summary, "direction", " = \"", "\"")
						
				split addon_direction_buf, ", ", addon_direction_buf_2
	
				load_adat_cnt = cnt
	
				addon_total_addon_direction(addon_number, cnt) = stat
	
				repeat addon_total_addon_direction(addon_number, load_adat_cnt)
					addon_direction(addon_number, load_adat_cnt, cnt) = addon_direction_buf_2(cnt)
	
					addon_direction_summary = get_chapter(use_type_summary, ""+addon_direction(addon_number, load_adat_cnt, cnt)+" {", " {", "}")
	
					//サイズを取得（size_x, size_y）
						addon_size_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "size_x", " = \"", "\"")
						addon_size_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "size_y", " = \"", "\"")
										
						addon_size_x(addon_number, load_adat_cnt, cnt) = int(addon_size_x_buf(addon_number, load_adat_cnt, cnt))
						addon_size_y(addon_number, load_adat_cnt, cnt) = int(addon_size_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップのゲーム上の座標サイズを取得（chip_x, chip_y）
						addon_chip_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "chip_x", " = \"", "\"")
						addon_chip_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "chip_y", " = \"", "\"")
										
						addon_chip_x(addon_number, load_adat_cnt, cnt) = int(addon_chip_x_buf(addon_number, load_adat_cnt, cnt))
						addon_chip_y(addon_number, load_adat_cnt, cnt) = int(addon_chip_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップの左上の座標を取得（top_left_x, top_left_y）
						addon_top_left_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "top_left_x", " = \"", "\"")
						addon_top_left_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "top_left_y", " = \"", "\"")
										
						addon_top_left_x(addon_number, load_adat_cnt, cnt) = int(addon_top_left_x_buf(addon_number, load_adat_cnt, cnt))
						addon_top_left_y(addon_number, load_adat_cnt, cnt) = int(addon_top_left_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップの右下の座標を取得（bottom_right_x, bottom_right_y）
						addon_bottom_right_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "bottom_right_x", " = \"", "\"")
						addon_bottom_right_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "bottom_right_y", " = \"", "\"")
										
						addon_bottom_right_x(addon_number, load_adat_cnt, cnt) = int(addon_bottom_right_x_buf(addon_number, load_adat_cnt, cnt))
						addon_bottom_right_y(addon_number, load_adat_cnt, cnt) = int(addon_bottom_right_y_buf(addon_number, load_adat_cnt, cnt))
									
					await 1
				loop
		
			wait 1
		loop
	
	return