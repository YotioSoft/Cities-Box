/*--------------------------------------------------------------------------------------------------

									    Cities Box Ver 0.4
										 Main Source Code
	
										(C)YotioSoft 2017
	
--------------------------------------------------------------------------------------------------*/

*define
/*チップサイズ（64x64）*/
#define chip_size		64

/*タイルを塗りつぶすためのマクロ*/
#define qv(%1,%2)	macro1=%1*chip_size/2-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro1(2)=%1*chip_size/2+chip_size-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro2=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4-camy+%1*chip_size/4:\
					macro2(2)=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4+chip_size/2-camy+%1*chip_size/4:\
					gmode 3,,,128 : gsquare -1,macro1,macro2
	
/*クウォータービューの位置を取得するためのマクロ（チップ表示用）*/
#define qv2(%1,%2)	macro1@=%1*chip_size/2-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro1@(2)=%1*chip_size/2+chip_size-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro2@=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4-camy+%1*chip_size/4:\
					macro2@(2)=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4+chip_size/2-camy+%1*chip_size/4:\

*uselib
	#uselib "user32.dll"
		#func FindWindow "FindWindowA" str, int
		#func GetWindowRect "GetWindowRect" int, int
		#func DrawText "DrawTextW" int,wstr,int,int,int
	
		#func ClientToScreen "ClientToScreen" int, int
	
		#func GetWindowLong "GetWindowLongA" int,int
		#func SetWindowLong "SetWindowLongA" int,int,int
	
		#define WM_SIZE	0x00005	//ウィンドウサイズ変更
		#define WS_MAXIMIZEBOX	0x10000	//最大化ボタン
		#define WS_THICKFRAME	0x40000	//サイズ変更可能
	
*module
#module

/*指定された範囲内にマウスがあるか確認する関数（使用例：click_range (100, 0, 300, 300) ）*/
#defcfunc click_range int mouse_x, int mouse_y, int mouse_x2, int mouse_y2
	if ginfo_wx1 <= ginfo_mx and ginfo_wx2 >= ginfo_mx and ginfo_wy1 <= ginfo_my and ginfo_wy2 >= ginfo_my and mouse_x <= mousex and mouse_x2 >= mousex and mouse_y <= mousey and mouse_y2 >= mousey {
		return 1
	}
	
	return 0
	
/*アドオンの番号を取得する関数*/
#defcfunc addon_num str input_addon_name
	chdir directory@
	exist "data/temp/"+input_addon_name+".temp"
	
	if strsize = -1 {
		return addon_num@("tile_greenfield")	; 一時ファイルが見つからない場合、とりあえず更地（greenfield）の値を返す
	}	
	
	notesel temp_file
	noteload "data/temp/"+input_addon_name+".temp"
	
	return int(temp_file)
	
/*adatの各項目の読み込み（使用例：get_chapter(元の変数, "検索する項目", "始点区切りコード", "終端コード") ）*/
#defcfunc get_chapter var underlying_var, str search_chapter, str punctuate, str end_word
	value = instr(underlying_var, 0, search_chapter)
	get_chapter_buf = strmid ( underlying_var, value + strlen(""+search_chapter+""+punctuate+""), instr(underlying_var, value + strlen(""+search_chapter+""+punctuate+""), end_word) )
	
	return get_chapter_buf
	
/*指定された文字列が何番目の要素にあるかを取得（2次配列用）（使用例：element2 検索するアドオン名, 検索する文字列が含まれる変数名, その変数の要素数が格納されている変数, "検索する文字列"）*/
#defcfunc element2 str search_addon_name, array search_var, array search_var_elements, str search_word
	chdir directory@
	exist "data/temp/"+search_addon_name+".temp"
	if strsize = -1 {
		return -2
	}
	
	notesel temp_file
	noteload "data/temp/"+search_addon_name+".temp"
	
	finish = -1
	
	repeat search_var_elements( int(temp_file) )
		if search_var(int(temp_file), cnt) = search_word {
			finish = cnt
			break
		}
	loop
	
	return finish
	
/*指定された文字列が何番目の要素にあるかを取得（3次配列用）（使用例：element3 検索するアドオン名, 検索する文字列が含まれる変数名, その変数の要素数が格納されている変数, "検索する文字列", 検索する文字列が含まれる3番目の要素の変数名, その3番目の要素の変数の要素数が格納されている変数, "3番目の要素で検索する文字列"）*/
#defcfunc element3 str search_addon_name, array search_var, array search_var_elements, str search_word, array second_search_var, array second_search_var_elements, str second_search_word
	chdir directory@
	exist "data/temp/"+search_addon_name+".temp"
	if strsize = -1 {
		return -2
	}
	
	notesel temp_file
	noteload "data/temp/"+search_addon_name+".temp"
	
	finish = -1
	
	repeat search_var_elements( int(temp_file) )
		if search_var(int(temp_file), cnt) = search_word {
			icnt = cnt
			repeat second_search_var_elements( int(temp_file), icnt )
				if second_search_var(int(temp_file), icnt, cnt) = second_search_word {
					finish = cnt
					break
				}
			loop
		}
	loop
	
	return finish

/*文字を中央に表示（使用例：cmes "hogehoge", 0, 640, 0, 480, 0）*/
#deffunc cmes str ctext, int cx, int cy, int cx2, int cy2, int redraw_exist
	RECT = cx, cy, cx2, cy2
	DrawText@ hdc, ctext, -1, varptr(RECT), $01
	
	if redraw_exist = 0 : redraw 1
	return

/*画像をぼかす（hsp/sample/new/gblur.hsp | 使用例：gblur 2）*/
#deffunc gblur int p1, int p2
	gmode 3, ginfo_sx, ginfo_sy, 128
	if (p2&1)=0 {
		repeat p1
		pos 1,0:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),2,0
		loop
	}
	if (p2&2)=0 {
		repeat p1
		pos 0,1:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),0,2
		loop
	}
	return
	
/*半透明色表示命令*/
#deffunc boxfa int ax, int ay, int bx, int by
	pdx = ax, bx, bx, ax
	pdy = ay, ay, by, by
	gsquare -1,pdx, pdy
	return
	
/*アドオンの情報を取得*/
#deffunc get_about_addon int search_addon_number@, int search_type_number@, int search_direction_number@, var input_top_left_x, var input_top_left_y, var input_bottom_right_x, var input_bottom_right_y,var input_size_x, var input_size_y
	//オブジェクトの画像上の座標を取得
		input_top_left_x = addon_top_left_x@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_top_left_y = addon_top_left_y@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_bottom_right_x = addon_bottom_right_x@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_bottom_right_y = addon_bottom_right_y@( search_addon_number@, search_type_number@, search_direction_number@ )
		
		input_size_x = addon_size_x@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_size_y = addon_size_y@( search_addon_number@, search_type_number@, search_direction_number@ )
	
	return
	
/*暗号化＆復号*/
#define global PublicKey	1234
#deffunc Xine var p1, int p2
	randomize (PublicKey+strlen(p1)+p2)
	repeat strlen(p1)
	p = peek(p1,cnt)
	p = (p^rnd(255))&255 : if ((cnt\2) == 0) {p = (p^2)&255}
	poke p1,cnt,p
	loop
	return
								
#global
	
*buffering
	//ロゴ、背景画像（buffer 1は設定ウィンドウで使うため使用不可）
		celload "img/logo.png", 2										; ロゴ
		celload "img/AME963_sappro_TP_V.jpg", 15						; タイトル背景画像
	
	//メニューのアイコン
		celload "img/menu_icons/menu/cursor.png", 3							; 標準カーソル
		celload "img/menu_icons/menu/road.png", 4							; メニューアイコン（道路敷設）
		celload "img/menu_icons/menu/low_density_residential.png", 5		; メニューアイコン（住居地区建設）
		celload "img/menu_icons/menu/commercial.png", 12					; メニューアイコン（商業地区建設）
		celload "img/menu_icons/menu/office.png", 6							; メニューアイコン（オフィス建設）
		celload "img/menu_icons/menu/post_office.png", 7					; メニューアイコン（郵便局建設）
	
		celload "img/menu_icons/menu/bulldozer.png", 10						; 取り壊しボタン
		celload "img/menu_icons/save/save.png", 11							; 保存ボタン
		celload "img/menu_icons/setting/setting.png", 13					; 設定ボタン
	
	//小サイズのアイコン
		celload "img/menu_icons/mini/low_density_residential.png", 8		; 高密度住居地区
		celload "img/menu_icons/mini/high_density_residential.png", 9		; 低密度住居地区
	
	//設定で使うアイコン
		celload "img/menu_icons/setting/check.png", 14						; チェックボタン
		celload "img/menu_icons/setting/refer.png", 16						; 参照ボタン
	
	//onexit
		onexit *exit
	
	//ウィンドウのサイズを変更可能化
		windowx=640 : windowy=480
		screen 0, ginfo_dispx, ginfo_dispy : width windowx, windowy
		
		GetWindowLong hwnd, -16
		SetWindowLong hwnd, -16, stat | WS_THICKFRAME | WS_MAXIMIZEBOX
	
		gsel 0
	
	//mci登録
		mci "set Cities-Box time format milliseconds"
	
	//タイトルとバージョンの読み込み
		notesel about
		noteload "data/about.txt"
		
		noteget about_title, 0
		noteget about_version, 1
	
		split about_title, " : ", not_use, about_title
		split about_version, " : ", not_use, about_version
	
		title about_title
	
	//本体設定読み込み
		notesel config
		noteload "data/config.dat"
	
		SystemFont = get_chapter(config, "SystemFont", " = \"", "\"")
	
		Config_WindowSize_X = int( get_chapter(config, "Config_WindowSize_X", " = ", ";") )
		Config_WindowSize_Y = int( get_chapter(config, "Config_WindowSize_Y", " = ", ";") )
	
	//ウィンドウのサイズを変更可能化
		windowx=Config_WindowSize_X : windowy=Config_WindowSize_Y
		screen 0, ginfo_dispx, ginfo_dispy : width windowx, windowy
		
		GetWindowLong hwnd, -16
		SetWindowLong hwnd, -16, stat | WS_THICKFRAME | WS_MAXIMIZEBOX
	
		gsel 0
	
	//バッファ番号1000以降はオブジェクト
		//まずAddonフォルダ内のアドオンの数を取得
			directory = dirinfo(0)
	
			#include "hspext.as"
				chdir "addons"
	
				//まずパス名を覗いたファイル一覧を取得
					dirlist2h 2, ','
					dirlist2 buf_addons, "*.adat*", 1, '\\'
		
					sdim addon_file_name, buf_addons
					dirlist2r addon_file_name
					
				//次にパス名を含めたファイル一覧を取得
					dirlist2h 1, ','
					dirlist2 buf_addons, "*.adat*", 1, '\\'
					
					sdim filelist, buf_addons
					dirlist2r filelist
		
					notesel filelist
					total_addons = notemax
	
					addon_number = 0
	
			//sdim＆dim
				sdim addon_name, total_addons
				sdim addon_jp_name, total_addons
				sdim addon_summary, total_addons
				sdim addon_icon, total_addons
				sdim addon_type, total_addons
				dim addon_maximum_capacity, total_addons
	
				sdim use_type, total_addons, 100
				dim addon_total_use_types, total_addons
	
				dim addon_total_addon_direction, total_addons, 100
				sdim addon_direction, total_addons, 100, 100
				sdim addon_image, total_addons, 100
	
				addon_direction = ""
			
				sdim addon_size_x_buf, total_addons, 100, 100
				sdim addon_size_y_buf, total_addons, 100, 100
				dim addon_size_x, total_addons, 100, 100
				dim addon_size_y, total_addons, 100, 100
			
				sdim addon_chip_x_buf, total_addons, 100, 100
				sdim addon_chip_y_buf, total_addons, 100, 100
				dim addon_chip_x, total_addons, 100, 100
				dim addon_chip_y, total_addons, 100, 100
			
				sdim addon_top_left_x_buf, total_addons, 100, 100
				sdim addon_top_left_y_buf, total_addons, 100, 100
				dim addon_top_left_x, total_addons, 100, 100
				dim addon_top_left_y, total_addons, 100, 100
			
				sdim addon_bottom_right_x_buf, total_addons, 100, 100
				sdim addon_bottom_right_y_buf, total_addons, 100, 100
				dim addon_bottom_right_x, total_addons, 100, 100
				dim addon_bottom_right_y, total_addons, 100, 100
	
				sdim type_Two_lane_road, 128
				sdim type_number_Two_lane_road, 128
				sdim type_low_density_residential, 128
				sdim type_number_low_density_residential, 128
				sdim type_high_density_residential, 128
				sdim type_number_high_density_residential, 128
				sdim type_low_density_office, 128
				sdim type_high_density_office, 128
				sdim type_industrial, 128
				sdim type_public, 128
				
			//オブジェクトのadatファイルを読み込み
				repeat total_addons
					notesel filelist
					noteget buf_filelist, cnt
	
					notesel buf_adat
					noteload buf_filelist
	
					//現在のパス名のみ取得
						addon_path = getpath(buf_filelist, 32)
	
					//ディレクトリ変更
						chdir addon_path
	
					//各項目の読み込み
						//アドオン名
							addon_name(cnt) = get_chapter(buf_adat, "addon_name", " = \\", "\"")
	
						//日本語のアドオン名と説明
							addon_jp_name(cnt) = get_chapter(buf_adat, "addon_jp_name", " = \\", "\"")
							addon_summary(cnt) = get_chapter(buf_adat, "addon_summary", " = \\", "\"")
	
						//アドオンのアイコン
							addon_icon(cnt) = get_chapter(buf_adat, "addon_icon", " = \\", "\"")
							
						//アドオンのタイプ
							addon_type(cnt) = get_chapter(buf_adat, "addon_type", " = \"", "\"")
	
						//建物の収容可能人数（住居地区のみ）
							if addon_type(cnt) = "low_density_residential" or addon_type(cnt) = "high_density_residential" {
								addon_maximum_capacity(cnt) = int( get_chapter(buf_adat, "maximum_capacity", " = \"", "\"") )
							} else {
								addon_maximum_capacity(cnt) = -1
							}
	
						//アドオンのadatファイルの詳細の読み込みへ
							gosub *load_adat
	
						//カテゴリ分け
							if addon_type(cnt) = "Two_lane_road" {
								notesel type_Two_lane_road
								noteadd addon_name(cnt)
	
								notesel type_number_Two_lane_road
								noteadd str(cnt)
							}
							
							if addon_type(cnt) = "low_density_residential" {
								notesel type_low_density_residential
								noteadd addon_name(cnt)
	
								notesel type_number_low_density_residential
								noteadd str(cnt)
							}
							if addon_type(cnt) = "high_density_residential" {
								notesel type_high_density_residential
								noteadd addon_name(cnt)
	
								notesel type_number_high_density_residential
								noteadd str(cnt)
							}
	
							if addon_type(cnt) = "low_density_commercial" {
								notesel type_low_density_commercial
								noteadd addon_name(cnt)
	
								notesel type_number_low_density_commercial
								noteadd str(cnt)
							}
							if addon_type(cnt) = "high_density_commercial" {
								notesel type_high_density_commercial
								noteadd addon_name(cnt)
	
								notesel type_number_high_density_commercial
								noteadd str(cnt)
							}
	
							if addon_type(cnt) = "low_density_office" {
								notesel type_low_density_office
								noteadd addon_name(cnt)
	
								notesel type_number_low_density_office
								noteadd str(cnt)
							}
							if addon_type(cnt) = "high_density_office" {
								notesel type_high_density_office
								noteadd addon_name(cnt)
	
								notesel type_number_high_density_office
								noteadd str(cnt)
							}
	
							if addon_type(cnt) = "industrial" {
								notesel type_industrial
								noteadd addon_name(cnt)
	
								notesel type_industrial
								noteadd str(cnt)
							}
							
							if addon_type(cnt) = "public" {
								notesel type_public
								noteadd addon_name(cnt)
	
								notesel type_number_public
								noteadd str(cnt)
							}
	
						//アドオンのバッファ（1000〜、複数の画像を利用する場合は1001000〜）
							if addon_total_use_types(addon_number) > 1 {
								repeat addon_total_use_types(addon_number)
									addon_buffer_number = (1000 + addon_number) * 1001 + cnt
									celload addon_image(addon_number, cnt), addon_buffer_number
									await 1
								loop
							} else {
								celload addon_image(addon_number, 0), (1000 + addon_number)
							}
	
						//アドオンのアイコンのバッファ（10001000〜）
							celload addon_icon(addon_number), (10001000 + addon_number)
	
						//ディレクトリを戻す
							chdir directory
	
						//一時ファイルを保存
							temp_file = str(addon_number)
							
							notesel temp_file
							notesave "data/temp/"+addon_name(cnt)+".temp"
	
						//ディレクトリを戻す
							chdir ""+directory+"\\addons"
	
						addon_number++
	
					await 1
				loop
	
			chdir directory
	
*menu
	repeat
		//ウィンドウサイズとタイトルバーの高さを取得
			gosub *get_windowsize
			
		redraw 0
		
		pos 0, 0 : gzoom windowx, windowy-titlebar_h, 15, 0, 0, 1600, 1066 : gblur 2
		
		pos windowx/2-55, double(50./483)*(windowy-titlebar_h) : gmode 0 : gcopy 2, 0, 0, 110, 110
	
		color 255, 255, 255 : font SystemFont, 18
		cmes "Ver."+about_version+"", 0, double(270./483)*(windowy-titlebar_h), windowx, double(270./483)*(windowy-titlebar)+30
	
		//前回のループ時とウィンドウサイズが変わっている場合はclrobj
			if before_windowy != windowy {
				clrobj
	
				objsize 100, 20
				pos windowx/2-50, double(350./483)*(windowy-titlebar_h) : button "新規マップ作成", *new_map
				pos windowx/2-50, double(350./483)*(windowy-titlebar_h)+20 : button "マップ読み込み", *load_map
			}
	
		before_windowy = windowy
	
		redraw 1
		wait 1
	loop
	
*new_map
	map_mode = "new_map"
	
	//マップ新規作成
		mapx=100:mapy=100
	
		dim buffer_number, mapx, mapy
		dim atlx, mapx, mapy
		dim atly, mapx, mapy
		dim abrx, mapx, mapy
		dim abry, mapx, mapy
		dim sizex, mapx, mapy
		dim sizey, mapx, mapy
	
		dim map, mapx, mapy			//各座標のアドオン番号
		sdim name, mapx, mapy		//各座標のアドオン名
		sdim category, mapx, mapy	//各マスに置かれているアドオンのカテゴリー（road, residentialなど）
		dim obj_type, mapx, mapy	//座標上にあるオブジェクトのタイプ
		dim obj_dire, mapx, mapy	//座標上にあるオブジェクトの向き
		dim residents, mapx, mapy	//各建築物の住民の数（住宅地のみ）
		
		repeat mapx * mapy
			map(ix,iy) = addon_num_buf
			name(ix,iy) = "tile_greenfield"
			category(ix,iy) = "tile"
			obj_type(ix,iy) = 0
			obj_dire(ix,iy) = 0
			residents(ix,iy) = 0
			
			ix++
			if ix = mapx {
				ix = 0
				iy += 1
			}
		loop
	
	City_Name = ""
	Mayor_Name = ""
	Set_Change_Weather = 1
	
	demand_of_Resindential = 100	; 住宅地区の需要度
	demand_of_Commercial = 0		; 商業地区の需要度
	demand_of_Office = 0			; オフィス地区の需要度
	demand_of_Industrial = 0		; 工業地区の需要度
	
	time_Year = gettime(0)			; ゲーム内の時間の年
	time_Month = gettime(1)			; ゲーム内の時間の月
	time_Date = gettime(3)			; ゲーム内の時間の日
	time_Hour = 0					; ゲーム内の時間の時
	time_Minutes = 0				; ゲーム内の時間の分
	
	Total_Population = 0			; 都市の総人口
	total_maximum_capacity = 0		; 都市の収容可能人数
	
	from_new_map = 1
	goto *setting
	
*load_map
	if from_new_map = 0 {
		dialog "cbd", 16, "Cities Box マップデータ"
	}
	
	if stat = 1 or from_new_map = 1 {
		if from_new_map = 0 {
			load_mapdata_name = refstr
		}
		if from_new_map = 1 {
			load_mapdata_name = save_mapdata_name
		}
		
		chdir directory
		
		map_mode = "load_map"
		goto *map_preparating
		
	} else {
		stop
	}
	
*map_preparating
	clrobj
	
	camx=-300:camy=-150		//カメラの位地
	mapx=100:mapy=100
	
	menu_line_y = 400		//メニューとの境界線
	cursor_mode = "normal"	//カーソルのモード
	
	pointer_icon = -1		//ポインタのアイコン（-1で四角形）
	
	before_mousex = 0
	before_mousey = 0
	
	before_camx = 0
	before_camy = 0
	
	put_addon_name = "tile_greenfield"
	
	if from_new_map = 0 {
		dim buffer_number, mapx, mapy
		dim atlx, mapx, mapy
		dim atly, mapx, mapy
		dim abrx, mapx, mapy
		dim abry, mapx, mapy
		dim sizex, mapx, mapy
		dim sizey, mapx, mapy
	
		dim map, mapx, mapy			//各座標のアドオン番号
		sdim name, mapx, mapy		//各座標のアドオン名
		sdim category, mapx, mapy	//各マスに置かれているアドオンのカテゴリー（road, residentialなど）
		dim obj_type, mapx, mapy	//座標上にあるオブジェクトのタイプ
		dim obj_dire, mapx, mapy	//座標上にあるオブジェクトの向き
		dim residents, mapx, mapy	//各建築物の住民の数（住宅地のみ）
	}
	if from_new_map = 1 {
		from_new_map = 0
	}
	
	ix = 0 : iy = 0
	
	addon_num_buf = addon_num("tile_greenfield")
	
	//マップ読み込み
		if map_mode = "load_map" {
			notesel load_mapdata
			noteload load_mapdata_name
	
			;exist refstr
	
			;Xine load_mapdata, 332
	
			;dialog""+load_mapdata+""
	
			//都市名(City_Name)を読み込み
				City_Name = get_chapter(load_mapdata, "City_Name", " = \"", "\"")
	
			//市長名(Mayor_Name)を読み込み
				Mayor_Name = get_chapter(load_mapdata, "Mayor_Name", " = \"", "\"")
	
			//総人口(Total_Population)
				Total_Population = int( get_chapter(load_mapdata, "Total_Population", " = ", ";") )
	
			//日時
				time_Year = int(get_chapter(load_mapdata, "time_Year", " = ", ";"))			; ゲーム内の時間の年
				time_Month = int(get_chapter(load_mapdata, "time_Month", " = ", ";"))		; ゲーム内の時間の月
				time_Date = int(get_chapter(load_mapdata, "time_Date", " = ", ";"))			; ゲーム内の時間の日
				time_Hour = int(get_chapter(load_mapdata, "time_Hour", " = ", ";"))			; ゲーム内の時間の時
				time_Minutes = int(get_chapter(load_mapdata, "time_Minutes", " = ", ";"))	; ゲーム内の時間の分
	
				if time_Year = 0 {
					time_Year = gettime(0)
				}
				if time_Month = 0 {
					time_Month = gettime(1)
				}
				if time_Date = 0 {
					time_Date = gettime(3)
				}
	
			//設定読み込み
				//天候の変化(Set_Change_Weather)
					Set_Change_Weather = int( get_chapter(load_mapdata, "Set_Change_Weather", " = ", ";") )
		
			//name(x,y)の読み込み＆name(x,y)をもとにmap(x,y)と都市の収容可能人数も取得
				name_buf = get_chapter(load_mapdata, "name(x,y)", " {", "}")
			
				repeat mapy
					y = cnt
		
					notesel name_buf
					noteget name_buf_a_line, (y+1)
		
					sdim name_buf_a_tile, mapx
					split name_buf_a_line, ", ", name_buf_a_tile
			
					repeat mapx
						x = cnt
						name(x,y) = name_buf_a_tile(x)
						map(x,y) = addon_num(name_buf_a_tile(x))
	
						if addon_type(map(x,y)) = "low_density_residential" or addon_type(map(x,y)) = "high_density_residential" {
							total_maximum_capacity += addon_maximum_capacity(map(x,y))
						}
					loop
			
				loop
			
			//category(x,y)の読み込み
				category_buf = get_chapter(load_mapdata, "category(x,y)", " {", "}")
			
				repeat mapy
					y = cnt
		
					notesel category_buf
					noteget category_buf_a_line, (y+1)
		
					sdim category_buf_a_tile, mapx
					split category_buf_a_line, ", ", category_buf_a_tile
			
					repeat mapx
						x = cnt
						category(x,y) = category_buf_a_tile(x)
					loop
			
				loop
		
			//obj_type(x,y)の読み込み
				obj_type_buf = get_chapter(load_mapdata, "obj_type(x,y)", " {", "}")
			
				repeat mapy
					y = cnt
		
					notesel obj_type_buf
					noteget obj_type_buf_a_line, (y+1)
		
					sdim obj_type_buf_a_tile, mapx
					split obj_type_buf_a_line, ", ", obj_type_buf_a_tile
			
					repeat mapx
						x = cnt
						obj_type(x,y) = int(obj_type_buf_a_tile(x))
					loop
			
				loop
		
			//obj_dire(x,y)の読み込み
				obj_dire_buf = get_chapter(load_mapdata, "obj_dire(x,y)", " {", "}")
			
				repeat mapy
					y = cnt
		
					notesel obj_dire_buf
					noteget obj_dire_buf_a_line, (y+1)
		
					sdim obj_dire_buf_a_tile, mapx
					split obj_dire_buf_a_line, ", ", obj_dire_buf_a_tile
			
					repeat mapx
						x = cnt
						obj_dire(x,y) = int(obj_dire_buf_a_tile(x))
					loop
			
				loop
	
			//residents(x,y)の読み込み
				residents_buf = get_chapter(load_mapdata, "residents(x,y)", " {", "}")
			
				repeat mapy
					y = cnt
		
					notesel residents_buf
					noteget residents_buf_a_line, (y+1)
		
					sdim residents_buf_a_tile, mapx
					split residents_buf_a_line, ", ", residents_buf_a_tile
			
					repeat mapx
						x = cnt
						;residents(x,y) = int(residents_buf_a_tile(x))
					loop
			
				loop
		}
	
			//雨粒の初期位置
				randomize
	
				repeat 1000
					rain(cnt) = 0
					rain_x(cnt) = rnd(windowx)
					rain_y(cnt) = -rnd(windowy)
				loop
	
			//気温の初期値（-20℃〜30℃）
				temperature = rnd(50)-20
	
*map_drawing
	repeat
		map_drawing_cnt ++
	
		//1回のループで1分とする
			time_Minutes ++
		
		//time_Minutes=60で1時間とする
			if time_Minutes = 60 {
				time_Minutes = 0
				time_Hour ++
			}
	
		//time_Hour=24で1日とする
			if time_Hour= 24 {
				time_Date ++
				time_Hour = 0
				time_Minutes = 0
	
				if time_Date > 28 and time_Month = 2 and time_Year\4 != 0 {
					time_Date = 1
					time_Month ++
				}
				if time_Date > 29 and time_Month = 2 and time_Year\4 = 0 {
					time_Date = 1
					time_Month ++
				}
				if time_Date > 30 and (time_Month = 4 or time_Month = 6 or time_Month = 9 or time_Month = 11) {
					time_Date = 1
					time_Month ++
				}
				if time_Date > 31 and (time_Month = 1 or time_Month = 3 or time_Month = 5 or time_Month = 7 or time_Month = 8 or time_Month = 10 or time_Month = 12) {
					time_Date = 1
					time_Month ++
				}
	
				if time_Month > 12 {
					time_Year ++
					time_Month = 1
					time_Date = 1
				}
			}
	
		/*カメラ操作*/
			getkey key_left, 37
			if key_left = 1 {
				camx -= 10
			}
			
			getkey key_up, 38
			if key_up = 1 {
				camy -= 5
			}
			
			getkey key_right, 39
			if key_right = 1 {
				camx += 10
			}
			
			getkey key_down, 40
			if key_down = 1 {
				camy += 5
			}
	
		/*マップ描写*/
			redraw 0
			color 0, 0, 0 : boxf
	
			if mousex != before_mousex or mousey != before_mousey or camx != before_camx or camy != before_camy {
				mousex_=mousex+camx-chip_size/2	//mx,myにマウス座標取得
				mousey_=mousey+camy
				mx=(mousey_+mousex_/2)/(chip_size/2)
				my=(-mousex_+mousey_*2)/chip_size
	
				before_mousex = mousex
				before_mousey = mousey
			}
	
		; ------ FPS取得処理 ------
			  if gettime(7) < msecond { ; ミリ秒の桁上がりを確認する
			    ; fpsにカウントしたフレーム数を代入し、カウントを1フレーム目に戻す
			    fps = frame_count
			    frame_count = 1
			
			  } else {
			    ; 上記以外の場合フレームをカウント
			    frame_count = frame_count + 1
			
			  }
			  ; msecondへ現在のミリ秒値を代入
			  msecond = gettime(7)
	
		/*BGM再生*/
			gosub *play_BGM
	
		stick key,0 ; キー取得
	
*map_drawing_2
		onclick 0
		
		repeat mapx
			x = cnt
				
			repeat mapy
				y = cnt
	
				//マウスのどのボタンが押されているか取得
					getkey mouse_left, 1
					getkey mouse_right, 2
	
					if mouse_left = 1 or mouse_right = 1 {
						gosub *map_drawing_onclick
					}
	
				if camx != before_camx or camy != before_camy or windowx != before_windowx or windowy != before_windowy {
	
					//画面中央の座標
						x_=(windowx/2)+camx-chip_size/2	//mx,myにマウス座標取得
						y_=(windowy/2)+camy
						middle_x=(y_+x_/2)/(chip_size/2)
						middle_y=(-x_+y_*2)/chip_size
	
					//左上のx座標
						left_top_x_ = 0+camx-chip_size/2
						left_top_y_ = 0+camy
						left_top_x = (left_top_y_+left_top_x_/2)/(chip_size/2)
		
					//左下のy座標
						left_bottom_x_ = 0+camx-chip_size/2
						left_bottom_y_ = windowy+camy
						left_bottom_y = (-left_bottom_x_+left_bottom_y_*2)/chip_size
		
					//右上のy座標
						right_top_x_ = windowx+camx-chip_size/2
						right_top_y_ = 0+camy
						right_top_y = (-right_top_x_+right_top_y_*2)/chip_size
		
					//右下のx座標
						right_bottom_x_ = windowx+camx-chip_size/2
						right_bottom_y_ = windowy+camy
						right_bottom_x = (right_bottom_y_+right_bottom_x_/2)/(chip_size/2)
	
						before_camx = camx
						before_camy = camy

						before_windowx = windowx
						before_windowy = windowy
	
				}
	
				if x>(left_top_x-1) and x<(right_bottom_x+1) and y>(right_top_y-1) and y<(left_bottom_y+1) {
		
					//周囲のオブジェクトの番号を取得
						left_chip = ""
						top_chip = ""
						bottom_chip = ""
						right_chip = ""
		
						if x > 0 {
							left_chip = category(x-1, y)
						}
						if y > 0 {
							top_chip = category(x, y-1)
						}
						if mapy-1 > y {
							bottom_chip = category(x, y+1)
						}
						if mapx-1 > x {
							right_chip = category(x+1, y)
						}
		
					//道路の向きを調節
						if category(x,y) = "road" and (mx-1 <= x and mx+1 >= x) and (my-1 <= y and my+1 >= y) {
							gosub *adjustment_road
						}
						
					//マップ作成
						qv2 x, y
	
						if addon_total_use_types( map(x,y) ) > 1 {		; ひとつのアドオンで複数の画像を領する場合
							buffer_number(x,y) = (map(x,y) + 1000) * 1001 + obj_type(x,y)
							get_about_addon map(x,y), obj_type(x,y), obj_dire(x,y), atlx, atly, abrx, abry, sizex, sizey
							
						} else {										; ひとつのアドオンでひとつの画像を領する場合
							buffer_number(x,y) = map(x,y) + 1000
							get_about_addon map(x,y), obj_type(x,y), obj_dire(x,y), atlx, atly, abrx, abry, sizex, sizey
								
						}
		
						if sizey > 32 {
							macro2 -= 16
						}
							
					//オブジェクトを表示
						pos macro1, macro2 - sizey/2 + 1
						gmode 2 : gcopy buffer_number(x,y), atlx, atly, sizex, sizey
							
				}
	
				//マウスポインタの位置のチップを光らせる
					if opening_addon_menu = 1 {
						menu_line_y = windowy-70-titlebar_h-32-20
					} else {
						menu_line_y = windowy-70-titlebar_h
					}
					
					if mx=x & my=y and mousey < menu_line_y {
						if pointer_icon = -1 {
							if cursor_mode = "normal" {
								color 0, 162, 232
							}
							if cursor_mode = "bulldozer" {
								color 245, 133, 138
							}
							qv x,y
						} else {
							color 0, 162, 232
							qv x,y
								
							qv2 x,y
							color : gmode 4,,,200
							pos macro1+16,macro2-16 : gcopy (10001000+pointer_icon), 0, 0, 32, 32
						}
						continue
					}
					
			loop
					
		loop
	
		if cnt \ 10 = 0 {
			title "マウス座標("+mx+","+my+") カメラ座標("+camx+","+camy+") add_rain:"+add_rain+" FPS:"+fps+""
		}
	
		//-20℃〜35℃の範囲で気温を変動
			temperature_increase_or_decrease = rnd(100)
		
			if temperature_increase_or_decrease = 0 {
				if temperature > -20 {
					temperature --
				}
			} else : if temperature_increase_or_decrease = 99 {
				if temperature < 35 {
					temperature ++
				}
			}
	
		//雨・雪の表示、気温の変動
			if Set_Change_Weather = 1 {
				randomize
								
				add_rain_increase_or_decrease = rnd(2)
		
				if add_rain_increase_or_decrease = 0 {
					add_rain --
				} else {
					add_rain ++
				}
					
				repeat 100
					if rain_y(cnt) >= windowy or rain(cnt) = 0 {
						rain_increase_or_decrease = rnd(2)
							
						if rain_increase_or_decrease = 0 and add_rain >= 0 {
							rain(cnt) = 1
							rain_x(cnt) = rnd(windowx)
							rain_y(cnt) = -rnd(windowy)
							snow_size(cnt) = rnd(5)+1
						} else {
							rain(cnt) = 0
							rain_x(cnt) = 0
							rain_y(cnt) = 0
							snow_size(cnt) = 0
						}
					}
		
					if rain(cnt) = 1 {
						color 255, 255, 255
		
						if temperature >= 3 {	; 気温が3℃以上なら雨
							rain_y(cnt) += 5
							line rain_x(cnt), rain_y(cnt), rain_x(cnt), rain_y(cnt)+20
								
						} else {				; 気温が2℃以下なら雪
							rain_x(cnt) += (rnd(3)-1)*2
							rain_y(cnt) += 1
							circle rain_x(cnt), rain_y(cnt), rain_x(cnt)+snow_size(cnt), rain_y(cnt)+snow_size(cnt)
								
						}
					}
	
				loop
			}
	
*menu_buttons
			//現在のウィンドウサイズとタイトルバーの高さを取得
				gosub *get_windowsize
	
			//人口・需要度変動
				gosub *fluctuation
			
			//メニュー
				color 0, 0, 0
				gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h, windowx, windowy
	
				//標準カーソルボタン
					if cursor_mode = "normal" {
						gmode 2
						pos 20, windowy-70-titlebar_h : gcopy 3, 0, 32, 32, 32
					} else {
						gmode 2
						pos 20, windowy-70-titlebar_h : gcopy 3, 0, 0, 32, 32
					}
	
				//道路ボタン
					if cursor_mode = "put_Road" {
						gmode 2
						pos 60, windowy-70-titlebar_h : gcopy 4, 0, 32, 32, 32
					} else {
						gmode 2
						pos 60, windowy-70-titlebar_h : gcopy 4, 0, 0, 32, 32
					}
	
				//建物（住居地区）ボタン
					if cursor_mode = "put_Residential" {
						gmode 2
						pos 92, windowy-70-titlebar_h : gcopy 5, 0, 32, 32, 32
					} else {
						gmode 2
						pos 92, windowy-70-titlebar_h : gcopy 5, 0, 0, 32, 32
					}
	
				//建物（商業地区）ボタン
					if cursor_mode = "put_Commercial" {
						gmode 2
						pos 124, windowy-70-titlebar_h : gcopy 12, 0, 32, 32, 32
					} else {
						gmode 2
						pos 124, windowy-70-titlebar_h : gcopy 12, 0, 0, 32, 32
					}
	
				//建物（オフィス）ボタン
					if cursor_mode = "put_High_density_Office" {
						gmode 2
						pos 156, windowy-70-titlebar_h : gcopy 6, 0, 32, 32, 32
					} else {
						gmode 2
						pos 156, windowy-70-titlebar_h : gcopy 6, 0, 0, 32, 32
					}
	
				//建物（公共施設）ボタン
					if cursor_mode = "put_Public" {
						gmode 2
						pos 188, windowy-70-titlebar_h : gcopy 7, 0, 32, 32, 32
					} else {
						gmode 2
						pos 188, windowy-70-titlebar_h : gcopy 7, 0, 0, 32, 32
					}
	
				//取り壊しボタン
					if cursor_mode = "bulldozer" {
						gmode 2
						pos windowx-54, windowy-70-titlebar_h : gcopy 10, 0, 32, 32, 32
					} else {
						gmode 2
						pos windowx-54, windowy-70-titlebar_h : gcopy 10, 0, 0, 32, 32
					}
	
				//設定ボタン
					gmode 2
					pos windowx-54-32, windowy-40-titlebar_h : gcopy 13, 0, 0, 32, 32
	
				//保存ボタン
					gmode 2
					pos windowx-54, windowy-40-titlebar_h : gcopy 11, 0, 0, 32, 32
	
				//人口、日付・気温を表示
					color 255, 255, 255 : font "Yu Gothic UI", 14
					pos 20, windowy-32-titlebar_h : mes "人口 "+Total_Population+"人 "+time_Year+"年"+time_Month+"月"+time_Date+"日 "+strf("%02d",time_Hour)+":"+strf("%02d",time_Minutes)+"  気温 "+temperature+"℃"
				
				//RCI需要メータ（まだ非対応）
					;color 34, 177, 76 : boxf windowx-100, windowy-30-(demand_of_Resindential/4), windowx-100+10, windowy-30
	
				if opening_addon_menu = 1 {
					gosub *open_menu_addon_menu
				}
					
			redraw 1
			await 30
			c+=16
	loop
	
*map_drawing_onclick
	
	if opening_addon_menu = 1 {
		menu_line_y = windowy-70-titlebar_h-32-20
	} else {
		menu_line_y = windowy-70-titlebar_h
	}
	
	/*------------------------------------------メニューのボタンの動作------------------------------------------------*/
	if mousey >= menu_line_y and mousex >= 0 and mousey >= 0 and mousex <= windowx and mousey <= windowy {
		//標準カーソルボタン
			if click_range( 20, windowy-70-titlebar_h, 20+32, windowy-70-titlebar_h+32 ) = 1 {
				cursor_mode = "normal"
	
				opening_addon_menu = 0
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Public = 0
			}
			
		//道路ボタン
			if click_range( 60, windowy-70-titlebar_h, 60+32, windowy-70-titlebar_h+32 ) = 1 {
				
				if opening_menu_put_Road = 0 {
					cursor_mode = "put_Road"
					density = ""
					
					gosub *open_menu_addon_menu
	
					opening_addon_menu = 1
					opening_menu_put_Road = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_Two_lane_road
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_Two_lane_road
							noteget addon_num_normal_road, clicked_addon_number
							addon_num_normal_road = int(addon_num_normal_road)
				} 
				/*
				if opening_menu_put_Road = 1 {
					cursor_mode = "normal"
					opening_menu_put_Road = 0
				}
				*/
	
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Public = 0
			}
	
		//建物（住居地区）ボタン
			if click_range( 92, windowy-70-titlebar_h, 92+32, windowy-70-titlebar_h+32 ) = 1 {
				
				if opening_menu_put_Reaidential = 0 {
					cursor_mode = "put_Residential"
					density = "low"
					
					gosub *open_menu_addon_menu
					opening_addon_menu = 1
					opening_menu_put_Residential = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_low_density_residential
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_low_density_residential
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				} 
				
				opening_menu_put_Road = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Public = 0
			}
	
		//建物（商業地区）ボタン
			if click_range( 124, windowy-70-titlebar_h, 124+32, windowy-70-titlebar_h+32 ) = 1 {
	
				if opening_menu_put_High_density_Office = 0 {
					cursor_mode = "put_Commercial"
					density = "low"
					
					gosub *open_menu_addon_menu
					opening_addon_menu = 1
					opening_menu_put_Commercial = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_low_density_commercial
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_low_density_commercial
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				} 
	
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_Public = 0
			}
	
		//建物（オフィス）ボタン
			if click_range( 156, windowy-70-titlebar_h, 156+32, windowy-70-titlebar_h+32 ) = 1 {
	
				if opening_menu_put_High_density_Office = 0 {
					cursor_mode = "put_High_density_Office"
					gosub *open_menu_addon_menu
	
					opening_addon_menu = 1
					opening_menu_put_High_density_Office = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_high_density_office
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_high_density_office
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				} 
	
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_Public = 0
			}
		//建物（公共施設）ボタン
			if click_range( 188, windowy-70-titlebar_h, 188+32, windowy-70-titlebar_h+32 ) = 1 {
	
				if opening_menu_put_High_density_Residential = 0 {
					cursor_mode = "put_Public"
					gosub *open_menu_addon_menu
	
					opening_addon_menu = 1
					opening_menu_put_Public = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_public
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_public
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				} 
	
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
			}
	
		//取り壊しボタン
			if click_range( windowx-54, windowy-70-titlebar_h, windowx-54+32, windowy-70-titlebar_h+32 ) = 1 {
				cursor_mode = "bulldozer"
	
				opening_addon_menu = 0
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Public = 0
			}
	
		//設定ボタン
			if click_range( windowx-54-32, windowy-40-titlebar_h, windowx-54, windowy-40-titlebar_h+32 ) = 1 {
				cursor_mode = "normal"
				opening_addon_menu = 0
				gosub *setting
			}
	
		//保存ボタン
			if click_range( windowx-54, windowy-40-titlebar_h, windowx-54+32, windowy-40-titlebar_h+32 ) = 1 {
				cursor_mode = "normal"
				opening_addon_menu = 0
				gosub *save
			}
	
	
		//アドオン選択ボタン（水色のメニューバー）
			
			/*-------------------------------------------道路---------------------------------------------------*/
				notesel type_Two_lane_road
				if opening_menu_put_Road = 1 and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Road"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_Two_lane_road
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_Two_lane_road
						noteget addon_num_normal_road, clicked_addon_number
						addon_num_normal_road = int(addon_num_normal_road)
				}
	
			/*-----------------------------------------住居地区-------------------------------------------------*/
	
			//住居地区の低密度・高密度選択ボタン
				//低密度
					if cursor_mode = "put_Residential" and click_range( 0, windowy-70-titlebar_h-32, 16, windowy-70-titlebar_h-16 ) = 1 {
						density = "low"
		
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_low_density_residential
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_low_density_residential
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
								
						gosub *open_menu_addon_menu
					}
				//高密度
				if cursor_mode = "put_Residential" and click_range( 0, windowy-70-titlebar_h-16, 16, windowy-70-titlebar_h ) = 1 {
					density = "high"
	
					//とりあえず一番左にあるアドオンを選択させておく
					clicked_addon_number = 0
		
					//選択されたアドオンのアドオン名を取得
						notesel type_high_density_residential
						noteget put_addon_name, clicked_addon_number
			
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_high_density_residential
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
						
					gosub *open_menu_addon_menu
				}
			
			//低密度住居地区
				notesel type_low_density_residential
				if opening_menu_put_Residential = 1 and density = "low" and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Residential"
					
					clicked_addon_number = mousex/35 - 1
					
					//選択されたアドオンのアドオン名を取得
						notesel type_low_density_residential
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_low_density_residential
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
				
			//高密度住居地区
				notesel type_high_density_residential
				if opening_menu_put_Residential = 1 and density = "high" and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Residential"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_high_density_residential
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_high_density_residential
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
	
			/*--------------------------------------------商業地区---------------------------------------------*/
			
			//低密度商業地区
				notesel type_high_density_commercial
				if opening_menu_put_commercial = 1 and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Commercial"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_low_density_commercial
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_low_density_commercial
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
	
			/*--------------------------------------------オフィス-----------------------------------------------*/
			
			//高密度オフィス
				notesel type_high_density_office
				if opening_menu_put_high_density_office = 1 and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_High_density_Office"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_high_density_office
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_high_density_office
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
	
			/*---------------------------------------------公共施設-----------------------------------------------*/
			
			//公共施設
				notesel type_public
				if opening_menu_put_public = 1 and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Public"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_public
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_public
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
	
		}
			
	
	/*-----------------道路・建物の建設・敷設（左クリック）、削除（右クリック or 取り壊しモード）---------------------*/
	
		//標準カーソルモードあるいはクリックされたマウスy座標がmenu_line_y以上の場合はreturn
			if cursor_mode = "normal" or mousey >= menu_line_y or mx < 0 or my < 0 {
				pointer_icon = -1
				return
			}
	
		//取り壊しモードの場合は選択されたマスを更地にする
			if cursor_mode = "bulldozer" {
				map(mx, my) = addon_num("tile_greenfield")
				category(mx, my) = "tile"
				obj_type(mx, my) = element2( "tile_greenfield", use_type, addon_total_use_types, "null")
				obj_dire(mx, my) = element3( "tile_greenfield", use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "null")
	
				return
			}
	
		//周囲のオブジェクトのカテゴリを取得
			left_chip = ""
			top_chip = ""
			bottom_chip = ""
			right_chip = ""
	
			if mx > 0 {
				left_chip = category(mx-1, my)
			}
			if my > 0 {
				top_chip = category(mx, my-1)
			}
			if mapy-1 > my {
				bottom_chip = category(mx, my+1)
			}
			if mapx-1 > mx {
				right_chip = category(mx+1, my)
			}
	
		//建設・敷設
			if mouse_left = 1 {
				
				//道路敷設
					if cursor_mode = "put_Road" and map(mx, my) != addon_num_normal_road {
						map(mx, my) = addon_num_normal_road
						name(mx, my) = put_addon_name
						category(mx, my) = "road"
	
						//道路の向きを揃える
							gosub *adjustment_road
					}
	
				//道路敷設以外の場合、選択されたマスの周囲（上下左右）に道路があるかどうか（道路に接続できるか）
					if cursor_mode != "put_Road" {
	
						around_road_exist = -1
						
						if mx > 0 {
							if category(mx-1, my) = "road" {
								around_road_exist += 1
								
								obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "null")
								obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "left")
							}
						}
						if my > 0 {
							if category(mx, my-1) = "road" {
								around_road_exist += 1
								
								obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "null")
								obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "top")
							}
						}
						if my < mapy {
							if category(mx, my+1) = "road" {
								around_road_exist += 1
	
								obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "null")
								obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "bottom")
							}
						}
						if mx < mapx {
							if category(mx+1, my) = "road" {
								around_road_exist += 1
	
								obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "null")
								obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "right")
							}
						}
	
						if around_road_exist = -1 and (ginfo_mx>=ginfo_wx1 & ginfo_mx<=ginfo_wx2) and (ginfo_my>=ginfo_wy1+titlebar_h&ginfo_my<=ginfo_wy2) {
							dialog "道路に接続されていない場所には建設できません！"
							return
						}
	
						if around_road_exist >= 0 {
							//建物（住居地区）建設
								if cursor_mode = "put_Residential" {
									map(mx, my) = addon_num_buf
									name(mx, my) = put_addon_name
									category(mx, my) = "residential"
									
									residents(mx, my) = 0											; 住人数
									total_maximum_capacity += addon_maximum_capacity(addon_num_buf)	; 都市全体の収容可能人数
								}
	
							//建物（商業地区）建設
								if cursor_mode = "put_Commercial" {
									map(mx, my) = addon_num_buf
									name(mx, my) = put_addon_name
									category(mx, my) = "commercial"
								}
				
							//建物（高密度オフィス）建設
								if cursor_mode = "put_High_density_Office" {
									map(mx, my) = addon_num_buf
									name(mx, my) = put_addon_name
									category(mx, my) = "office"
								}
				
							//建物（公共施設）建設
								if cursor_mode = "put_Public" {
									map(mx, my) = addon_num_buf
									name(mx, my) = put_addon_name
									category(mx, my) = "public"
								}
						/*
							//周辺にある道路の向きを揃える
								cursor_mode_buf = cursor_mode
								x_buf = x : y_buf = y
								
								repeat 4
									if cnt = 0 {
										x = mx-1
									}
									if cnt = 1 {
										y = my-1
									}
									if cnt = 2 {
										y = my+1
									}
									if cnt = 3 {
										x = mx+1
									}
									
									if category(x,y) = "road" {
										dialog"A"
										cursor_mode = "put_Road"
										put_addon_name = "normal_road(orange_line)
										gosub *adjustment_road
									}
								loop
	
								cursor_mode = cursor_mode_buf
								x = x_buf : y = y_buf
						*/
								
						}
					}	
					
			}
			
		//取り壊し
			if mouse_right = 1 {
	
				//道路削除
					if cursor_mode = "put_Road" and category(mx, my) = "road" {
						map(mx, my) = addon_num("tile_greenfield")
						name(mx, my) = "tile_greenfield"
						category(mx, my) = "tile"
						obj_type(mx, my) = element2( "tile_greenfield", use_type, addon_total_use_types, "null")
						obj_dire(mx, my) = element3( "tile_greenfield", use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "null")
					}
	
				//住居地区削除
					if cursor_mode = "put_Residential" and category(mx, my) = "residential" {
						map(mx, my) = addon_num("tile_greenfield")
						name(mx, my) = "tile_greenfield"
						category(mx, my) = "tile"
						obj_type(mx, my) = element2( "tile_greenfield", use_type, addon_total_use_types, "null")
						obj_dire(mx, my) = element3( "tile_greenfield", use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "null")
	
						residents(mx, my) = 0											; 住人数
						total_maximum_capacity -= addon_maximum_capacity(addon_num_buf)	; 都市全体の収容可能人数
					}
	
				//商業地区削除
					if cursor_mode = "put_Commercial" and category(mx, my) = "commercial" {
						map(mx, my) = addon_num("tile_greenfield")
						name(mx, my) = "tile_greenfield"
						category(mx, my) = "tile"
						obj_type(mx, my) = element2( "tile_greenfield", use_type, addon_total_use_types, "null")
						obj_dire(mx, my) = element3( "tile_greenfield", use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "null")
					}
	
				//オフィス削除
					if (cursor_mode = "put_High_density_Office" or cursor_mode = "put_Low_density_Office") and category(mx, my) = "office" {
						map(mx, my) = addon_num("tile_greenfield")
						name(mx, my) = "tile_greenfield"
						category(mx, my) = "tile"
						obj_type(mx, my) = element2( "tile_greenfield", use_type, addon_total_use_types, "null")
						obj_dire(mx, my) = element3( "tile_greenfield", use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "null")
					}
	
				//公共事業削除
					if cursor_mode = "put_Public" and category(mx, my) = "public" {
						map(mx, my) = addon_num("tile_greenfield")
						name(mx, my) = "tile_greenfield"
						category(mx, my) = "tile"
						obj_type(mx, my) = element2( "tile_greenfield", use_type, addon_total_use_types, "null")
						obj_dire(mx, my) = element3( "tile_greenfield", use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "null")
					}
	
			}
		
		return
	
*open_menu_addon_menu
	color 0,162,232 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, windowx, windowy-70-titlebar_h
	
	if cursor_mode = "put_Road" {
		notesel type_number_Two_lane_road
	}
	if cursor_mode = "put_Residential" and density = "low" {
		notesel type_number_low_density_residential
	
		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, 16, windowy-70-titlebar_h
		pos 0, windowy-70-titlebar_h-2-32 : gmode 2 : gcopy 8, 0, 16, 16, 16
		pos 0, windowy-70-titlebar_h-2-16 : gmode 2 : gcopy 9, 0, 0, 16, 16 
	}
	if cursor_mode = "put_Residential" and density = "high" {
		notesel type_number_high_density_residential
	
		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, 16, windowy-70-titlebar_h
		pos 0, windowy-70-titlebar_h-2-32 : gmode 2 : gcopy 8, 0, 0, 16, 16
		pos 0, windowy-70-titlebar_h-2-16 : gmode 2 : gcopy 9, 0, 16, 16, 16
	}
	if cursor_mode = "put_Commercial" and density = "low" {
		notesel type_number_low_density_commercial
	}
	if cursor_mode = "put_Low_density_Office" {
		notesel type_number_low_density_office
	}
	if cursor_mode = "put_High_density_Office" {
		notesel type_number_high_density_office
	}
	if cursor_mode = "put_Public" {
		notesel type_number_public
	}
	
	repeat notemax
		noteget get_addon_number, cnt
	
		gmode 2
		if clicked_addon_number != cnt {
			pos 30 + (cnt*35)+10, windowy-70-titlebar_h-32 : gcopy (10001000 + int(get_addon_number)), 0, 0, 32, 32
		}
		if clicked_addon_number = cnt {
			color 255,255,255 : font "", 14
			pos 20, (windowy-70-titlebar_h-32-40+5) : mes addon_jp_name(int(get_addon_number))
			
			color 255,255,255 : font "", 10
			pos 23, (windowy-70-titlebar_h-32-20) : mes addon_summary(int(get_addon_number))
			
			pos 30 + (cnt*35)+10, windowy-70-titlebar_h-32 : gcopy (10001000 + int(get_addon_number)), 0, 32, 32, 64
	
			pointer_icon = int(get_addon_number)
		}
	
		await 1
	loop
	
	return
		
*adjustment_road
	if instr(put_addon_name, 0, "road") = -1 {
		return
	}
	if category(x, y) = "road" and (cursor_mode = "put_Road" or cursor_mode = "bulldozer") {
		
		//縦向き
			if left_chip != "road" and top_chip = "road" and bottom_chip = "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "width")
			}
	
		//横向き
			if left_chip = "road" and top_chip != "road" and bottom_chip != "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "depth")
			}
	
		//行き止まり
			if left_chip = "road" and top_chip != "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "left")
			}
			if left_chip != "road" and top_chip = "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "top")
			}
			if left_chip != "road" and top_chip != "road" and bottom_chip = "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "bottom")
			}
			if left_chip != "road" and top_chip != "road" and bottom_chip != "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "right")
			}
	
		//曲がり角
			if left_chip = "road" and top_chip = "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "left-top")
			}
			if left_chip != "road" and top_chip = "road" and bottom_chip != "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "right-top")
			}
			if left_chip = "road" and top_chip != "road" and bottom_chip = "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "left-bottom")
			}
			if left_chip != "road" and top_chip != "road" and bottom_chip = "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "right-bottom")
			}
	
		//T字型交差点
			if left_chip = "road" and top_chip = "road" and bottom_chip = "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-top-bottom")
			}
			if left_chip = "road" and top_chip = "road" and bottom_chip != "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-right-top")
			}
			if left_chip = "road" and top_chip != "road" and bottom_chip = "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-right-bottom")
			}
			if left_chip != "road" and top_chip = "road" and bottom_chip = "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "right-top-bottom")
			}
	
		//十字型交差点
			if left_chip = "road" and top_chip = "road" and bottom_chip = "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_cross")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_cross", addon_direction, addon_total_addon_direction, "null")
			}
	
		//1マスだけ孤立した（周りに接続する道路がない）道路の場合はコンクリートタイルを表示
			if left_chip != "road" and top_chip != "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_cross")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_cross", addon_direction, addon_total_addon_direction, "null")
			}
	
		}
	
	return
	
*load_adat
	notesel buf_adat
			
	use_types_buf = get_chapter(buf_adat, "use_types", " = \"", "\"")
	
	//adat_use_typesを更にタイプごとに分ける
		split use_types_buf, ", ", use_type_buf
	
		repeat stat
			use_type(addon_number, cnt) = use_type_buf(cnt)
			await 1
		loop
				
	//タイプの数を取得
		addon_total_use_types(addon_number) = stat
				
	//各タイプごとの概要を取得
	
		//取得開始
		repeat addon_total_use_types(addon_number)
			use_type_summary = get_chapter(buf_adat, ""+use_type(addon_number, cnt)+" {", " {", ";")
	
			//使用する画像の取得（image）
				addon_image(addon_number, cnt) = get_chapter(use_type_summary, "image", " = \"", "\"")
						
			//タイプの向きを取得（direction）
				addon_direction_buf = get_chapter(use_type_summary, "direction", " = \"", "\"")
						
				split addon_direction_buf, ", ", addon_direction_buf_2
	
				load_adat_cnt = cnt
	
				addon_total_addon_direction(addon_number, cnt) = stat
	
				repeat addon_total_addon_direction(addon_number, load_adat_cnt)
					addon_direction(addon_number, load_adat_cnt, cnt) = addon_direction_buf_2(cnt)
	
					addon_direction_summary = get_chapter(use_type_summary, ""+addon_direction(addon_number, load_adat_cnt, cnt)+" {", " {", "}")
	
					//サイズを取得（size_x, size_y）
						addon_size_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "size_x", " = \"", "\"")
						addon_size_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "size_y", " = \"", "\"")
										
						addon_size_x(addon_number, load_adat_cnt, cnt) = int(addon_size_x_buf(addon_number, load_adat_cnt, cnt))
						addon_size_y(addon_number, load_adat_cnt, cnt) = int(addon_size_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップのゲーム上の座標サイズを取得（chip_x, chip_y）
						addon_chip_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "chip_x", " = \"", "\"")
						addon_chip_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "chip_y", " = \"", "\"")
										
						addon_chip_x(addon_number, load_adat_cnt, cnt) = int(addon_chip_x_buf(addon_number, load_adat_cnt, cnt))
						addon_chip_y(addon_number, load_adat_cnt, cnt) = int(addon_chip_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップの左上の座標を取得（top_left_x, top_left_y）
						addon_top_left_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "top_left_x", " = \"", "\"")
						addon_top_left_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "top_left_y", " = \"", "\"")
										
						addon_top_left_x(addon_number, load_adat_cnt, cnt) = int(addon_top_left_x_buf(addon_number, load_adat_cnt, cnt))
						addon_top_left_y(addon_number, load_adat_cnt, cnt) = int(addon_top_left_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップの右下の座標を取得（bottom_right_x, bottom_right_y）
						addon_bottom_right_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "bottom_right_x", " = \"", "\"")
						addon_bottom_right_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "bottom_right_y", " = \"", "\"")
										
						addon_bottom_right_x(addon_number, load_adat_cnt, cnt) = int(addon_bottom_right_x_buf(addon_number, load_adat_cnt, cnt))
						addon_bottom_right_y(addon_number, load_adat_cnt, cnt) = int(addon_bottom_right_y_buf(addon_number, load_adat_cnt, cnt))
									
					await 1
				loop
		
			wait 1
		loop
	
	return
	
*play_BGM
	//現在再生しているBGMの現在の再生位置と曲の長さを取得
		mci"status Cities-Box position"
		BGM_Position = stat		; 現在の再生位置
			
		mci "status Cities-Box length"
		BGM_Length = stat		; 曲の長さ
	
	//再生位置が曲の長さと同じなら次のBGMをランダムに選出
		if BGM_Position = BGM_Length {
			chdir "bgm"
	
			mci "close Cities-Box"
					
			//パス名を含めたファイル一覧を取得
				dirlist2h 1, ','
				dirlist2 buf_BGMs, "*.mp3*", 1, '\\'
					
				sdim BGM_filelist, buf_BGMs
				dirlist2r BGM_filelist
		
				notesel BGM_filelist
				total_BGMs = notemax
			
			chdir directory
			
			//ランダムに選出
				randomize
	
				repeat
					BGM_rnd = rnd(total_BGMs)
					
					//現在再生しているBGMと同じ曲でないことを確認
						notesel BGM_filelist
						noteget next_BGM_file, BGM_rnd
						
						if next_BGM_file != playing_BGM_file {
							playing_BGM_file = next_BGM_file
							break
						}
	
					await 1
				loop
				
				mci"open \""+directory+"\\bgm\\"+playing_BGM_file+"\" alias Cities-Box"
				mci"play Cities-Box"
	
				changed_BGM = 1
		}
	
		return
	
*get_windowsize
	//現在のウィンドウサイズを取得
		windowx = ginfo_sizex
		windowy = ginfo_sizey
	
	//ウィンドウ左枠の横幅とタイトルバーの高さを取得
		dim rc, 2
		rc(0) = 0
		rc(1) = 0
		ClientToScreen hwnd, varptr(rc)
		
		window_left_breadth = rc(0) - ginfo_wx1
		titlebar_h = rc(1) - ginfo_wy1
	
	return
	
*fluctuation
	//人口・需要度などを増減
	
		//毎日午前0時に増減
			if time_Hour != 0 or time_Minutes != 0 {
				return
			}
	
		//とりあえず住宅地の需要度をMAXとして、何人増やすかを決める
			if (total_maximum_capacity-Total_Population) > 0 {
				add_residents = rnd(total_maximum_capacity-Total_Population)
			}
	
		//何人減らすか
			if Total_Population > 0 {
				cut_residents = rnd(Total_Population)
			}
	
		//人口の増減
			Total_Population += add_residents
			Total_Population -= cut_residents
	
	return
	
*setting
	if from_setting_onclick = 0 {
		screen 1, 300, 400
	}
	
	gsel 1
	
	title "Cities Box 設定"
	
	onclick *setting_onclick
	
	color 95, 95, 95 : boxf
	
	if from_setting_onclick = 0 {
		setting_SystemFont = SystemFont
	}
	
	color 255, 255, 255
	font setting_SystemFont, 16
	
	//都市名(City_Name)
		pos 10, 10 : mes "都市名"
	
		if from_setting_onclick = 0 {
			setting_City_Name = City_Name
		}
		
		objsize 210, 20
		pos 80, 10 : input setting_City_Name
	
	//市長名(Mayor_Name)
		pos 10, 40 : mes "市長名"
	
		if from_setting_onclick = 0 {
			setting_Mayor_Name = Mayor_Name
		}
		
		objsize 210, 20
		pos 80, 40 : input setting_Mayor_Name
	
	//天候の変化(Set_Change_Weather)
		if from_setting_onclick = 0 {
			setting_Set_Change_Weather = Set_Change_Weather
		}
		
		if setting_Set_Change_Weather = 0 {
			pos 10, 73 : gcopy 14, 0, 0, 16, 16
		} else {
			pos 10, 73 : gcopy 14, 0, 16, 16, 16
		}
		
		pos 35, 70 : mes "天候の変化"
	
	//フォント(SystemFont)
		pos 10, 100 : mes "フォント"
	
		objsize 194, 20
		pos 80, 100 : input setting_SystemFont
	
		gmode 2
		pos 274, 100 : gcopy 16, 0, 0, 16, 16
	
	//OKボタン
		color 255, 255, 255 : boxf 100, 360, 200, 390
		color 95, 95, 95 : boxf 101, 361, 199, 389
	
		color 255, 255, 255 : font setting_SystemFont, 20
		cmes "OK", 100, 360, 200, 390
	
	from_setting_onclick = 0
		
	stop
	
*setting_onclick
	gsel 1
	
	from_setting_onclick = 1
	
	//天候の変化(Set_Change_Weather)
		//チェックボックス
			if click_range(10, 73, 10+16, 73+16) = 1 {
				if setting_Set_Change_Weather = 0 {
					setting_Set_Change_Weather = 1
				} else {
					setting_Set_Change_Weather = 0
				}
			}
	
	//フォント(SystemFont)
		//参照ボタン
			if click_range(274, 100, 274+16, 100+16) = 1 {
				gosub *refer_fonts
			}
	
	//OKボタン
		if click_range(100, 360, 200, 390) = 1 {
	
			// マップ作成時の設定の場合
				if from_new_map = 1 {
					City_Name = setting_City_Name
					Mayor_Name = setting_Mayor_Name
					Set_Change_Name = setting_Set_Change_Name
					SystemFont = setting_SystemFont
					
					gosub *save
	
					gsel 1, -1
					gsel 0
	
					load_mapdata_name = save_mapdata_name
	
					from_setting_onclick = 0
	
					onclick 0
					
					goto *load_map
				}
			
			gosub *save_setting
			
			gsel 1, -1
			onclick 0
			from_setting_onclick = 0
	
			gsel 0
			goto *map_drawing
		}
	
	clrobj
	
	goto *setting
	
*save_setting
	chdir directory
	
	//まずは本体設定(data/config.dat)を保存
		notesel config
	
		repeat notemax
			noteget config_buf, cnt
	
			if instr(config_buf, 0, "SystemFont") != -1 {
				SystemFont = setting_SystemFont
				noteadd "SystemFont = \""+SystemFont+"\"", cnt, 1
			}
		loop
	
		notesave "data/config.dat"
	
	//次に各マップデータ(*.cbd)の設定を保存
		notesel load_mapdata
	
		repeat notemax
			noteget load_mapdata_buf, cnt
	
			if instr(load_mapdata_buf, 0, "City_Name") != -1 {
				City_Name = setting_City_Name
				noteadd "City_Name = \""+City_Name+"\";", cnt, 1
			}
	
			if instr(load_mapdata_buf, 0, "Mayor_Name") != -1 {
				Mayor_Name = setting_Mayor_Name
				noteadd "Mayor_Name = \""+Mayor_Name+"\";", cnt, 1
			}
	
			if instr(load_mapdata_buf, 0, "Set_Change_Weather") != -1 {
				Set_Change_Weather = setting_Set_Change_Weather
				noteadd "Set_Change_Weather = "+Set_Change_Weather+";", cnt, 1
			}
		loop
	
		if load_mapdata_name = "" {
			gosub *save
			load_mapdata_name = save_mapdata_name
	
			if from_new_map = 0 {
				return
			}
		}
	
		notesave load_mapdata_name
	
	return
	
*refer_fonts
	#uselib "comdlg32.dll"
	#func ChooseFont "ChooseFontA" int
	
	mref bmscr, 67
	dim chfont,16
	dim logfont,16
	sdim setting_SystemFont,32
	
	chfont.0 = 60 
	chfont.1 = bmscr.13
	chfont.3=varptr(logfont)
	chfont.5 = 0x01000141
	
	pm=varptr(chfont)
	ChooseFont pm
	
	if stat = 0 {
		return
	}
	
	style=0
	if (chfont.12 & 0x0100):style=style+1
	if (chfont.12 & 0x0200):style=style+2 
	if (logfont.5 & 0x0000FF00):style=style+4 
	if (logfont.5 & 0x00FF0000):style=style+8
	size=chfont.4/10
	memcpy setting_SystemFont,logfont,32,0,28
	
	return
	
*save
	save_mapdata = ""
	
	//マップ保存
		notesel save_mapdata
		
		//次に各マップデータ(*.cbd)の設定を保存
			noteadd "City_Name = \""+City_Name+"\";", -1
			noteadd "Mayor_Name = \""+Mayor_Name+"\";", -1
	
			noteadd "Total_Population = "+Total_Population+";", -1
	
			noteadd "Set_Change_Weather = "+Set_Change_Weather+";", -10
	
		//空白
			noteadd " ", -1
	
		//マップサイズ
			noteadd "mapx = "+mapx+";", -1
			noteadd "mapy = "+mapy+";", -1
	
		//空白
			noteadd " ", -1
	
		//日時
			noteadd "time_Year = "+time_Year+";", -1
			noteadd "time_Month = "+time_Month+";", -1
			noteadd "time_Date = "+time_Date+";", -1
			noteadd "time_Hour = "+time_Hour+";", -1
			noteadd "time_Minutes = "+time_Minutes+";", -1
	
		//空白
			noteadd " ", -1
	
		//name(x,y)
			noteadd "name(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
					
					if cnt = 0 {
						map_data_buf = name(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+name(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
			
		//category(x,y)
			noteadd "category(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = map_data_buf = category(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+category(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//obj_type(x,y)
			noteadd "obj_type(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_type(x,y))		; 3桁に揃えているのは見やすくするためなので特に意味は無いです。4桁（1000以上）も読み込み可
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_type(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//obj_dire(x,y)
			noteadd "obj_dire(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_dire(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_dire(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//residents(x,y)
			noteadd "residents(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", residents(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", residents(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//保存
			dialog "cbd", 17, "Cities Box マップデータ"
	
			save_mapdata_name = refstr
			if instr(save_mapdata_name, 0, ".cbd") = -1 {
				save_mapdata_name = ""+save_mapdata_name+".cbd"
			}
	
			;Xine save_mapdata, strlen(save_mapdata)
			
			if stat = 1 {
				notesel save_mapdata
				notesave save_mapdata_name
			}
	
		return
			
*exit
	if ginfo_act != 0 {
		gsel ginfo_act, -1
		
		onclick 0
	
		from_setting_onclick = 0
	
		gsel 0
	
		if from_new_map = 1 {
			from_new_map = 0
			stop
		}
	
		cursor_mode = "normal"
		
		goto *map_drawing
	}
	
	if ginfo_act = 0 {
		//一時ファイルを削除
			repeat total_addons
				exist "data/temp/"+addon_name(cnt)+".temp"
				
				if strsize != -1 {
					delete "data/temp/"+addon_name(cnt)+".temp"
				}
			
				wait 1
			loop
	
		gsel 0
		end
	}