/*--------------------------------------------------------------------------------------------------

									   Cities Box Ver 0.5.3
										 Main Source Code
	
										(C)YotioSoft 2017
	
--------------------------------------------------------------------------------------------------*/

*define
/*チップサイズ（64x64）*/
#define chip_size		64

/*タイルを塗りつぶすためのマクロ*/
#define qv(%1,%2)	macro1=%1*chip_size/2-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro1(2)=%1*chip_size/2+chip_size-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro2=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4-camy+%1*chip_size/4:\
					macro2(2)=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4+chip_size/2-camy+%1*chip_size/4:\
					gmode 3,,,128 : gsquare -1,macro1,macro2
	
/*クウォータービューの位置を取得するためのマクロ（チップ表示用）*/
#define qv2(%1,%2)	macro1@=%1*chip_size/2-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro1@(2)=%1*chip_size/2+chip_size-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro2@=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4-camy+%1*chip_size/4:\
					macro2@(2)=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4+chip_size/2-camy+%1*chip_size/4:\

*uselib
	#uselib "user32.dll"
		#func FindWindow "FindWindowA" str, int
		#func GetWindowRect "GetWindowRect" int, int
		#func DrawText "DrawTextW" int,wstr,int,int,int
	
		#func ClientToScreen "ClientToScreen" int, int
	
		#func GetWindowLong "GetWindowLongA" int,int
		#func SetWindowLong "SetWindowLongA" int,int,int
	
		#define WM_SIZE	0x00005	//ウィンドウサイズ変更
		#define WS_MAXIMIZEBOX	0x10000	//最大化ボタン
		#define WS_THICKFRAME	0x40000	//サイズ変更可能
	
*module
#module

/*指定された範囲内にマウスがあるか確認する関数（使用例：click_range (100, 0, 300, 300) ）*/
#defcfunc click_range int mouse_x, int mouse_y, int mouse_x2, int mouse_y2
	if ginfo_wx1 <= ginfo_mx and ginfo_wx2 >= ginfo_mx and ginfo_wy1 <= ginfo_my and ginfo_wy2 >= ginfo_my and mouse_x <= mousex and mouse_x2 >= mousex and mouse_y <= mousey and mouse_y2 >= mousey {
		return 1
	}
	
	return 0
	
/*アドオンの番号を取得する関数*/
#defcfunc addon_num str input_addon_name
	chdir directory@
	exist "data/temp/"+input_addon_name+".temp"
	
	if strsize = -1 {
		return addon_num@("tile_greenfield")	; 一時ファイルが見つからない場合、とりあえず更地（greenfield）の値を返す
	}	
	
	notesel temp_file
	noteload "data/temp/"+input_addon_name+".temp"
	
	return int(temp_file)
	
/*各項目の読み込み（使用例：get_chapter(元の変数, "検索する項目", "始点区切りコード", "終端コード") ）*/
#defcfunc get_chapter var underlying_var, str search_chapter, str punctuate, str end_word
	value = instr(underlying_var, 0, search_chapter)
	get_chapter_buf = strmid ( underlying_var, value + strlen(""+search_chapter+""+punctuate+""), instr(underlying_var, value + strlen(""+search_chapter+""+punctuate+""), end_word) )
	
	return get_chapter_buf
	
/*指定された文字列が何番目の要素にあるかを取得（2次配列用）（使用例：element2 検索するアドオン名, 検索する文字列が含まれる変数名, その変数の要素数が格納されている変数, "検索する文字列"）*/
#defcfunc element2 str search_addon_name, array search_var, array search_var_elements, str search_word
	chdir directory@
	exist "data/temp/"+search_addon_name+".temp"
	if strsize = -1 {
		return -2
	}
	
	notesel temp_file
	noteload "data/temp/"+search_addon_name+".temp"
	
	finish = -1
	
	repeat search_var_elements( int(temp_file) )
		if search_var(int(temp_file), cnt) = search_word {
			finish = cnt
			break
		}
	loop
	
	return finish
	
/*指定された文字列が何番目の要素にあるかを取得（3次配列用）（使用例：element3 検索するアドオン名, 検索する文字列が含まれる変数名, その変数の要素数が格納されている変数, "検索する文字列", 検索する文字列が含まれる3番目の要素の変数名, その3番目の要素の変数の要素数が格納されている変数, "3番目の要素で検索する文字列"）*/
#defcfunc element3 str search_addon_name, array search_var, array search_var_elements, str search_word, array second_search_var, array second_search_var_elements, str second_search_word
	chdir directory@
	exist "data/temp/"+search_addon_name+".temp"
	
	if strsize = -1 {
		return -2
	}
	
	notesel temp_file
	noteload "data/temp/"+search_addon_name+".temp"
	
	finish = -1
	
	repeat search_var_elements( int(temp_file) )
		if search_var(int(temp_file), cnt) = search_word {
			icnt = cnt
			repeat second_search_var_elements( int(temp_file), icnt )
				if second_search_var(int(temp_file), icnt, cnt) = second_search_word {
					finish = cnt
					break
				}
			loop
		}
	loop
	
	return finish

/*文字を中央に表示（使用例：cmes "hogehoge", 0, 640, 0, 480, 0）*/
#deffunc cmes str ctext, int cx, int cy, int cx2, int cy2, int redraw_exist
	RECT = cx, cy, cx2, cy2
	DrawText@ hdc, ctext, -1, varptr(RECT), $01
	
	if redraw_exist = 0 : redraw 1
	return

/*画像をぼかす（hsp/sample/new/gblur.hsp | 使用例：gblur 2）*/
#deffunc gblur int p1, int p2
	gmode 3, ginfo_sx, ginfo_sy, 128
	if (p2&1)=0 {
		repeat p1
		pos 1,0:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),2,0
		loop
	}
	if (p2&2)=0 {
		repeat p1
		pos 0,1:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),0,2
		loop
	}
	return
	
/*半透明色表示命令*/
#deffunc boxfa int ax, int ay, int bx, int by
	pdx = ax, bx, bx, ax
	pdy = ay, ay, by, by
	gsquare -1,pdx, pdy
	return
	
/*半透明色表示命令（機能はboxfaと同じ）*/
#deffunc sboxf int depth, int ax, int ay, int bx, int by
	pdx = ax, bx, bx, ax
	pdy = ay, ay, by, by
	gmode 3,,,depth
	gsquare -1,pdx, pdy
	return
	
/*アドオンの情報を取得*/
#deffunc get_about_addon int search_addon_number@, int search_type_number@, int search_direction_number@, var input_top_left_x, var input_top_left_y, var input_bottom_right_x, var input_bottom_right_y,var input_size_x, var input_size_y
	//オブジェクトの画像上の座標を取得
		input_top_left_x = addon_top_left_x@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_top_left_y = addon_top_left_y@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_bottom_right_x = addon_bottom_right_x@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_bottom_right_y = addon_bottom_right_y@( search_addon_number@, search_type_number@, search_direction_number@ )
		
		input_size_x = addon_size_x@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_size_y = addon_size_y@( search_addon_number@, search_type_number@, search_direction_number@ )
	
	return
	
/*暗号化＆復号（言うほど難しいものでもないけど…）*/
//暗号化
#deffunc enc var p1, int key, int size
	repeat size
	    poke p1, cnt, peek(p1, cnt) + key
	loop
	
	return

//復号
#deffunc dec var p1, int key, int size
	repeat size
	    poke p1, cnt, peek(p1, cnt) - key
	loop
	
	return
								
#global

*load_about
	//タイトルとバージョンの読み込み
		notesel about
		noteload "data/about.txt"
		
		noteget about_title, 0
		noteget about_version, 1
	
		split about_title, " : ", not_use, about_title
		split about_version, " : ", not_use, about_version
	
		title about_title
		
*load_config
	//本体設定読み込み
		notesel config
		noteload "data/config.dat"
	
		SystemFont = get_chapter(config, "SystemFont", " = \"", "\"")
		Set_Play_BGM = int( get_chapter(config, "Set_Play_BGM", " = ", ";") )
	
		Config_WindowSize_X = int( get_chapter(config, "Config_WindowSize_X", " = ", ";") )
		Config_WindowSize_Y = int( get_chapter(config, "Config_WindowSize_Y", " = ", ";") )
	
*changeable
	//ウィンドウのサイズを変更可能化
		windowx=Config_WindowSize_X : windowy=Config_WindowSize_Y
		screen 0, ginfo_dispx, ginfo_dispy : width windowx, windowy
		
		GetWindowLong hwnd, -16
		SetWindowLong hwnd, -16, stat | WS_THICKFRAME | WS_MAXIMIZEBOX
	
		gsel 0
	
*buffering
	//読み込み中画面
		color 0, 0, 0 : boxf
	
		color 255, 255, 255 : font SystemFont, 14
		pos 10, 10 : mes "しばらくお待ちください\nLoading images..."
		
	//ロゴ、背景画像（buffer 1は設定ウィンドウで使うため使用不可）
		celload "img/logo.png", 2										; ロゴ
		celload "img/title_background.png", 15							; タイトル背景画像
	
	//メニューのアイコン
		celload "img/menu_icons/menu/cursor.png", 3							; 標準カーソル
		celload "img/menu_icons/menu/road.png", 4							; メニューアイコン（道路敷設）
		celload "img/menu_icons/menu/low_density_residential.png", 5		; メニューアイコン（住居地区建設）
		celload "img/menu_icons/menu/commercial.png", 12					; メニューアイコン（商業地区建設）
		celload "img/menu_icons/menu/office.png", 6							; メニューアイコン（オフィス建設）
		celload "img/menu_icons/menu/industrial.png", 19					; メニューアイコン（工業地区建設）
		celload "img/menu_icons/menu/public.png", 7							; メニューアイコン（郵便局建設）
		celload "img/menu_icons/menu/park.png", 29							; メニューアイコン（公園建設）
	
		celload "img/menu_icons/menu/bulldozer.png", 10						; 撤去ボタン
		celload "img/menu_icons/save/save.png", 11							; 保存ボタン
		celload "img/menu_icons/setting/setting.png", 13					; 設定ボタン
	
	//小サイズのアイコン
		celload "img/menu_icons/mini/low_density_residential.png", 8		; 低密度住居地区
		celload "img/menu_icons/mini/high_density_residential.png", 9		; 高密度住居地区
		celload "img/menu_icons/mini/low_density_commercial.png", 20		; 低密度商業地区
		celload "img/menu_icons/mini/high_density_commercial.png", 21		; 高密度商業地区
	
	//設定で使うアイコン
		celload "img/menu_icons/setting/check.png", 14						; チェックボタン
		celload "img/menu_icons/setting/refer.png", 16						; 参照ボタン
	
	//ポインター
		celload "img/pointer/blue.png", 17									; 青いポインター
		celload "img/pointer/red.png", 18									; 赤いポインター
	
	//地区を示すタイル
		celload "img/quarter/residential.png", 22							; 住居地区
		celload "img/quarter/commercial.png", 23							; 商業地区
		celload "img/quarter/office.png", 24								; オフィス地区
		celload "img/quarter/industrial.png", 25							; 工業地区
		celload "img/quarter/public.png", 26								; 公共施設
	
	//最初のメニュー画面のボタン
		celload "img/start_menu/hoe.png", 27								; 鍬
		celload "img/start_menu/city.png", 28								; 都市
	
*preparation
	//読み込み中画面
		color 0, 0, 0 : boxf
	
		color 255, 255, 255 : font SystemFont, 14
		pos 10, 10 : mes "しばらくお待ちください\nIn preparation..."
		
	//onexit
		onexit *exit
	
	//mci登録
		mci "set Cities-Box time format milliseconds"
	
	//暗号化キー
		iCipherKey = 2147483647
	
	//バッファ番号1000以降はオブジェクト
		//まずAddonフォルダ内のアドオンの数を取得
			directory = dirinfo(0)
	
			#include "hspext.as"
				chdir "addons"
	
				//まずパス名を覗いたファイル一覧を取得
					dirlist2h 2, ','
					dirlist2 buf_addons, "*.adat*", 1, '\\'
		
					sdim addon_file_name, buf_addons
					dirlist2r addon_file_name
					
				//次にパス名を含めたファイル一覧を取得
					dirlist2h 1, ','
					dirlist2 buf_addons, "*.adat*", 1, '\\'
					
					sdim filelist, buf_addons
					dirlist2r filelist
					
					notesel filelist
					total_addons = notemax
	
					addon_number = 0
	
			//sdim＆dim
				sdim addon_name, total_addons
				sdim addon_jp_name, total_addons
				sdim addon_summary, total_addons
				sdim addon_icon, total_addons
				sdim addon_type, total_addons
				dim addon_maximum_capacity, total_addons
	
				sdim use_type, total_addons, 100
				dim addon_total_use_types, total_addons
	
				dim addon_total_addon_direction, total_addons, 100
				sdim addon_direction, total_addons, 100, 100
				sdim addon_image, total_addons, 100
	
				addon_direction = ""
			
				sdim addon_size_x_buf, total_addons, 100, 100
				sdim addon_size_y_buf, total_addons, 100, 100
				dim addon_size_x, total_addons, 100, 100
				dim addon_size_y, total_addons, 100, 100
			
				sdim addon_chip_x_buf, total_addons, 100, 100
				sdim addon_chip_y_buf, total_addons, 100, 100
				dim addon_chip_x, total_addons, 100, 100
				dim addon_chip_y, total_addons, 100, 100
			
				sdim addon_top_left_x_buf, total_addons, 100, 100
				sdim addon_top_left_y_buf, total_addons, 100, 100
				dim addon_top_left_x, total_addons, 100, 100
				dim addon_top_left_y, total_addons, 100, 100
			
				sdim addon_bottom_right_x_buf, total_addons, 100, 100
				sdim addon_bottom_right_y_buf, total_addons, 100, 100
				dim addon_bottom_right_x, total_addons, 100, 100
				dim addon_bottom_right_y, total_addons, 100, 100
	
				sdim type_Two_lane_road, 128
				sdim type_number_Two_lane_road, 128
				sdim type_low_density_residential, 128
				sdim type_number_low_density_residential, 128
				sdim type_high_density_residential, 128
				sdim type_number_high_density_residential, 128
				sdim type_low_density_office, 128
				sdim type_high_density_office, 128
				sdim type_industrial, 128
				sdim type_public, 128
	
*load_addons
	//オブジェクトのadatファイルを読み込み
		repeat total_addons
			notesel filelist
			noteget buf_filelist, cnt
	
			notesel buf_adat
			noteload buf_filelist
	
			//現在のパス名のみ取得
				addon_path = getpath(buf_filelist, 32)
	
			//ディレクトリ変更
				chdir addon_path
	
			//アドオン名取得
					addon_name(cnt) = get_chapter(buf_adat, "addon_name", " = \\", "\"")
	
			//読み込み中画面
				color 0, 0, 0 : boxf
				
				color 255, 255, 255 : font SystemFont, 14
				pos 10, 10 : mes "しばらくお待ちください\nLoading addons : "+addon_name(cnt)+""
	
			//各項目の読み込み
	
				//日本語のアドオン名と説明
					addon_jp_name(cnt) = get_chapter(buf_adat, "addon_jp_name", " = \\", "\"")
					addon_summary(cnt) = get_chapter(buf_adat, "addon_summary", " = \\", "\"")
	
				//アドオンのアイコン
					addon_icon(cnt) = get_chapter(buf_adat, "addon_icon", " = \\", "\"")
							
				//アドオンのタイプ
					addon_type(cnt) = get_chapter(buf_adat, "addon_type", " = \"", "\"")
	
				//建物の収容可能人数（住居地区の場合は住民数、商業・オフィス・工業・公共施設は労働者数）
					addon_maximum_capacity(cnt) = int( get_chapter(buf_adat, "maximum_capacity", " = \"", "\"") )
	
				//アドオンのadatファイルの詳細の読み込みへ
					gosub *load_adat
	
				//カテゴリ分け
					if addon_type(cnt) = "Two_lane_road" {
						notesel type_Two_lane_road
						noteadd addon_name(cnt), -1
	
						notesel type_number_Two_lane_road
						noteadd str(cnt), -1
					}
							
					if addon_type(cnt) = "low_density_residential" {
						notesel type_low_density_residential
						noteadd addon_name(cnt), -1
	
						notesel type_number_low_density_residential
						noteadd str(cnt), -1
					}
					if addon_type(cnt) = "high_density_residential" {
						notesel type_high_density_residential
						noteadd addon_name(cnt), -1
	
						notesel type_number_high_density_residential
						noteadd str(cnt), -1
					}
	
					if addon_type(cnt) = "low_density_commercial" {
						notesel type_low_density_commercial
						noteadd addon_name(cnt), -1
	
						notesel type_number_low_density_commercial
						noteadd str(cnt), -1
					}
					if addon_type(cnt) = "high_density_commercial" {
						notesel type_high_density_commercial
						noteadd addon_name(cnt), -1
	
						notesel type_number_high_density_commercial
						noteadd str(cnt), -1
					}
	
					if addon_type(cnt) = "low_density_office" {
						notesel type_low_density_office
						noteadd addon_name(cnt), -1
	
						notesel type_number_low_density_office
						noteadd str(cnt), -1
					}
					if addon_type(cnt) = "high_density_office" {
						notesel type_high_density_office
						noteadd addon_name(cnt), -1
	
						notesel type_number_high_density_office
						noteadd str(cnt), -1
					}
	
					if addon_type(cnt) = "industrial" {
						notesel type_industrial
						noteadd addon_name(cnt), -1
						
						notesel type_number_industrial
						noteadd str(cnt), -1
					}
					
					if addon_type(cnt) = "public" {
						notesel type_public
						noteadd addon_name(cnt), -1

						notesel type_number_public
						noteadd str(cnt), -1
					}
	
					if addon_type(cnt) = "park" {
						notesel type_park
						noteadd addon_name(cnt), -1

						notesel type_number_park
						noteadd str(cnt), -1
					}
	
				//アドオンのバッファ（1000〜、複数の画像を利用する場合は1001000〜）
					if addon_total_use_types(addon_number) > 1 {
						repeat addon_total_use_types(addon_number)
							addon_buffer_number = (1000 + addon_number) * 1001 + cnt
							celload addon_image(addon_number, cnt), addon_buffer_number
							await 1
						loop
					} else {
						celload addon_image(addon_number, 0), (1000 + addon_number)
					}
	
				//アドオンのアイコンのバッファ（10001000〜）
					celload addon_icon(addon_number), (10001000 + addon_number)

				//ディレクトリを戻す
					chdir directory
	
				//一時ファイルを保存
					temp_file = str(addon_number)
					
					notesel temp_file
					notesave "data/temp/"+addon_name(cnt)+".temp"
	
				//ディレクトリを戻す
					chdir ""+directory+"\\addons"
	
				addon_number++
	
			await 1
		loop
	
	chdir directory
	
*menu
	onclick gosub *menu_onclick
	
	repeat
		//ウィンドウサイズとタイトルバーの高さを取得
			gosub *get_windowsize
	
		redraw 0
				
		pos 0, 0 : gzoom windowx, windowy-titlebar_h, 15, 0, 0, 1077, 625 : gblur 2
				
		pos windowx/2-55, double(50./483)*(windowy-titlebar_h) : gmode 0 : gcopy 2, 0, 0, 110, 110
			
		color 255, 255, 255 : font SystemFont, 18
		cmes "Ver."+about_version+"", 0, double(200./483)*(windowy-titlebar_h), windowx, double(270./483)*(windowy-titlebar)+30
			
		font SystemFont, 14
			
		color 0, 162, 232
			
		if click_range(windowx/2-50-20-10, double(300./483)*(windowy-titlebar_h), windowx/2-50-20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20) = 1 {
			gmode 3,,,200 : boxfa windowx/2-50-20-10, double(300./483)*(windowy-titlebar_h), windowx/2-50-20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20
		}
		if click_range(windowx/2+20-10, double(300./483)*(windowy-titlebar_h), windowx/2+20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20) = 1 {
			gmode 3,,,200 : boxfa windowx/2+20-10, double(300./483)*(windowy-titlebar_h), windowx/2+20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20
		}
			
		color 255, 255, 255
			
		gmode 2
		pos windowx/2-50-20, double(300./483)*(windowy-titlebar_h) : gcopy 27, 0, 0, 50, 50
			cmes "新しいマップ", windowx/2-50-20-10, double(300./483)*(windowy-titlebar_h)+50+2, windowx/2-50-20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20
					
		pos windowx/2+20, double(300./483)*(windowy-titlebar_h) : gcopy 28, 0, 0, 50, 50
			cmes "読み込み", windowx/2+20, double(300./483)*(windowy-titlebar_h)+50+2, windowx/2+20+50, double(300./483)*(windowy-titlebar_h)+50+2+20
		
		wait 1
		redraw 1
	loop
	
*menu_onclick
	//メニュー画面でクリックされたときに動作
	if click_range(windowx/2-50-20-10, double(300./483)*(windowy-titlebar_h), windowx/2-50-20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20) = 1 {
		goto *new_map
	}
	if click_range(windowx/2+20-10, double(300./483)*(windowy-titlebar_h), windowx/2+20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20) = 1 {
		goto *load_map
	}
	
	return
	
*new_map
	map_mode = "new_map"
	
	//マップ新規作成
		mapx=100:mapy=100
	
		dim buffer_number, mapx, mapy
		dim atlx, mapx, mapy
		dim atly, mapx, mapy
		dim abrx, mapx, mapy
		dim abry, mapx, mapy
		dim sizex, mapx, mapy
		dim sizey, mapx, mapy
	
		dim map, mapx, mapy					//各座標のアドオン番号
		sdim name, mapx, mapy				//各座標のアドオン名
		sdim category, mapx, mapy			//各マスに置かれているアドオンのカテゴリー（road, residentialなど）
		dim obj_type, mapx, mapy			//座標上にあるオブジェクトのタイプ
		dim obj_dire, mapx, mapy			//座標上にあるオブジェクトの向き
		dim obj_serial_num, mapx, mapy		//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトの通し番号（1マスの場合は0）
		dim obj_use_tiles_x, mapx, mapy		//ひとつのオブジェクトで複数のタイルを要するときの、必要なx方向のタイル数
		dim obj_use_tiles_y, mapx, mapy		//ひとつのオブジェクトで複数のタイルを要するときの、必要なy方向のタイル数
		dim obj_tiles_x, mapx, mapy			//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトを設置した場所からのx方向のタイルの数（1マスの場合は0）
		dim obj_tiles_y, mapx, mapy			//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトを設置した場所からのy方向のタイルの数（1マスの場合は0）
		
		dim residents, mapx, mapy			//各建築物の住民の数（住宅地のみ）
		dim workers_Commercial, mapx, mapy	//商業地区の従業員数（商業地区のみ）
		dim workers_Office, mapx, mapy		//オフィス地区の従業員数（オフィス地区のみ）
		dim workers_Industrial, mapx, mapy	//工業地区の従業員数（工業地区のみ）
		dim workers_Public, mapx, mapy		//公共施設の従業員数（公共施設のみ）
		
		repeat mapx * mapy
			map(ix,iy) = addon_num_buf
			name(ix,iy) = "tile_greenfield"
			category(ix,iy) = "tile"
	
			obj_type(ix,iy) = 0
			obj_dire(ix,iy) = 0
	
			obj_serial_num(ix,iy) = 0
			obj_use_tiles_x(ix,iy) = 0
			obj_use_tiles_y(ix,iy) = 0
			obj_tiles_x(ix,iy) = 0
			obj_tiles_y(ix,iy) = 0
	
			residents(ix,iy) = 0
			workers_Commercial(ix,iy) = 0
			workers_Office(ix,iy) = 0
			workers_Industrial(ix,iy) = 0
			workers_Public(ix,iy) = 0
			
			ix++
			if ix = mapx {
				ix = 0
				iy += 1
			}
		loop
	
	City_Name = ""
	Mayor_Name = ""
	Set_Change_Weather = 1
	
	demand_of_Resindential = 100	; 住宅地区の需要度
	demand_of_Commercial = 100		; 商業地区の需要度
	demand_of_Office = 100			; オフィス地区の需要度
	demand_of_Industrial = 100		; 工業地区の需要度
	
	time_Year = gettime(0)			; ゲーム内の時間の年
	time_Month = gettime(1)			; ゲーム内の時間の月
	time_Date = gettime(3)			; ゲーム内の時間の日
	time_Hour = 0					; ゲーム内の時間の時
	time_Minutes = 0				; ゲーム内の時間の分
	
	Total_Population = 0			; 都市の総人口
	total_maximum_capacity = 0		; 都市の収容可能人数
	
	next_obj_serial_num = 0			; 複数のタイルを要するオブジェクトの通し番号
	
	//気温の初期値
		//12月〜2月：-10℃〜15℃の範囲で気温を変動
		if time_Month = 12 or (1 <= time_Month and 2 >= time_Month) {
			temperature = rnd(25)-10
		}
	
		//3月〜5月：10℃〜25℃の範囲で気温を変動
		if 3 <= time_Month and 5 >= time_Month {
			temperature = rnd(15) + 10
		}
	
		//6月〜8月：20℃〜35℃の範囲で気温を変動
		if 6 <= time_Month and 8 >= time_Month {
			temperature= rnd(15) + 20
		}
	
		//9月〜11月：10℃〜25℃の範囲で気温を変動
		if 9 <= time_Month and 11 >= time_Month {
			temperature = rnd(15) + 10
		}
	
	from_new_map = 1
	goto *setting
	
*load_map
	if from_new_map = 0 {
		dialog "cbx;*.cbd", 16, "Cities Box 簡易暗号化マップデータ（Ver.0.4.4以降）, Cities Box 非暗号化マップデータ（Ver.0.4.3.1以前）"
	}
	
	if stat = 1 or from_new_map = 1 {
		if from_new_map = 0 {
			load_mapdata_name = refstr
		}
		if from_new_map = 1 {
			load_mapdata_name = save_mapdata_name
		}
		
		chdir directory
	
		if from_new_map = 0 {
			map_mode = "load_map"
		}
		goto *map_preparating
		
	} else {
		goto *menu
	}
	
*map_preparating
	clrobj
	
	camx=-300:camy=-150		//カメラの位地
	mapx=100:mapy=100
	
	menu_line_y = 400		//メニューとの境界線
	cursor_mode = "normal"	//カーソルのモード
	
	pointer_icon = -1		//ポインタのアイコン（-1で四角形）
	
	before_mousex = 0
	before_mousey = 0
	
	before_camx = 0
	before_camy = 0
	
	put_addon_name = "tile_greenfield"
	
	if from_new_map = 0 {
		dim buffer_number, mapx, mapy
		dim atlx, mapx, mapy
		dim atly, mapx, mapy
		dim abrx, mapx, mapy
		dim abry, mapx, mapy
		dim sizex, mapx, mapy
		dim sizey, mapx, mapy
	
		dim map, mapx, mapy					//各座標のアドオン番号
		sdim name, mapx, mapy				//各座標のアドオン名
		sdim category, mapx, mapy			//各マスに置かれているアドオンのカテゴリー（road, residentialなど）
		dim obj_type, mapx, mapy			//座標上にあるオブジェクトのタイプ
		dim obj_dire, mapx, mapy			//座標上にあるオブジェクトの向き
		dim obj_serial_num, mapx, mapy		//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトの通し番号（1マスの場合は0）
		dim obj_use_tiles_x, mapx, mapy		//ひとつのオブジェクトで複数のタイルを要するときの、必要なx方向のタイル数
		dim obj_use_tiles_y, mapx, mapy		//ひとつのオブジェクトで複数のタイルを要するときの、必要なy方向のタイル数
		dim obj_tiles_x, mapx, mapy			//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトを設置した場所からのx方向のタイルの数
		dim obj_tiles_y, mapx, mapy			//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトを設置した場所からのy方向のタイルの数
		
		dim residents, mapx, mapy			//各建築物の住民の数（住宅地のみ）
		dim workers_Commercial, mapx, mapy	//商業地区の従業員数（商業地区のみ）
		dim workers_Office, mapx, mapy		//オフィス地区の従業員数（オフィス地区のみ）
		dim workers_Industrial, mapx, mapy	//工業地区の従業員数（工業地区のみ）
		dim workers_Public, mapx, mapy		//公共施設の従業員数（公共施設のみ）
	}
	if from_new_map = 1 {
		from_new_map = 0
	}
	
	ix = 0 : iy = 0
	
	addon_num_buf = addon_num("tile_greenfield")
	
	//マップ読み込み
		;if map_mode = "load_map" {
	
			//暗号化済みのマップデータの場合
			if instr(load_mapdata_name, 0, "cbx") != -1 {
				
				notesel load_mapdata_Cipher
				noteload load_mapdata_name
		
				l = notemax
		
				//復号
					repeat l
						notesel load_mapdata_Cipher
						noteget load_mapdata_Cipher_buf, cnt
		
						load_mapdata_Cipher_buf_strlen = strlen(load_mapdata_Cipher_buf)
						dec load_mapdata_Cipher_buf, (strlen(load_mapdata_name)/2), load_mapdata_Cipher_buf_strlen
		
						notesel load_mapdata
						noteadd load_mapdata_Cipher_buf, cnt
					loop
	
			} else {
	
				notesel load_mapdata
				noteload load_mapdata_name
	
			}
	
			//都市名(City_Name)を読み込み
				City_Name = get_chapter(load_mapdata, "City_Name", " = \"", "\"")
	
			//市長名(Mayor_Name)を読み込み
				Mayor_Name = get_chapter(load_mapdata, "Mayor_Name", " = \"", "\"")
	
			//日時
				time_Year = int(get_chapter(load_mapdata, "time_Year", " = ", ";"))			; ゲーム内の時間の年
				time_Month = int(get_chapter(load_mapdata, "time_Month", " = ", ";"))		; ゲーム内の時間の月
				time_Date = int(get_chapter(load_mapdata, "time_Date", " = ", ";"))			; ゲーム内の時間の日
				time_Hour = int(get_chapter(load_mapdata, "time_Hour", " = ", ";"))			; ゲーム内の時間の時
				time_Minutes = int(get_chapter(load_mapdata, "time_Minutes", " = ", ";"))	; ゲーム内の時間の分
	
				if time_Year = 0 {
					time_Year = gettime(0)
				}
				if time_Month = 0 {
					time_Month = gettime(1)
				}
				if time_Date = 0 {
					time_Date = gettime(3)
				}
	
			//需要度(demand_○○)を読み込み
				demand_Residential = int( get_chapter(load_mapdata, "demand_Residential", " = ", ";") )
				demand_Commercial = int( get_chapter(load_mapdata, "demand_Commercial", " = ", ";") )
				demand_Office = int( get_chapter(load_mapdata, "demand_Office", " = \"", ";") )
				demand_Industrial = int( get_chapter(load_mapdata, "demand_Industrial", " = ", ";") )
	
				if instr(load_mapdata, 0, "demand_Residential") = -1 {
					demand_Residential = 0
				}
				if instr(load_mapdata, 0, "demand_Commercial") = -1 {
					demand_Commercial = 0
				}
				if instr(load_mapdata, 0, "demand_Office") = -1 {
					demand_Office = 0
				}
				if instr(load_mapdata, 0, "demand_Industrial") = -1 {
					demand_Industrial = 0
				}
	
			//設定読み込み
				//天候の変化(Set_Change_Weather)
					Set_Change_Weather = int( get_chapter(load_mapdata, "Set_Change_Weather", " = ", ";") )
					
				//気温(temperature)
					temperature = int( get_chapter(load_mapdata, "Temperature", " = ", ";") )
		
			//name(x,y)の読み込み＆name(x,y)をもとにmap(x,y)と都市の収容可能人数も取得
				name_buf = get_chapter(load_mapdata, "name(x,y)", " {", "}")
			
				repeat mapy
					y = cnt
		
					notesel name_buf
					noteget name_buf_a_line, (y+1)
		
					sdim name_buf_a_tile, mapx
					split name_buf_a_line, ", ", name_buf_a_tile
			
					repeat mapx
						x = cnt
						name(x,y) = name_buf_a_tile(x)
						map(x,y) = addon_num(name_buf_a_tile(x))
	
						//各種の地区の収容可能人数に加算
							if addon_type(map(x,y)) = "low_density_residential" or addon_type(map(x,y)) = "high_density_residential" {
								total_Residential_maximum_capacity += addon_maximum_capacity(map(x,y))
							}
							if addon_type(map(x,y)) = "low_density_commercial" or addon_type(map(x,y)) = "high_density_commercial" {
								total_Commercial_maximum_capacity += addon_maximum_capacity(map(x,y))
							}
							if addon_type(map(x,y)) = "low_density_office" or addon_type(map(x,y)) = "high_density_office" {
								total_Office_maximum_capacity += addon_maximum_capacity(map(x,y))
							}
							if addon_type(map(x,y)) = "low_density_industrial" or addon_type(map(x,y)) = "high_density_industrial" {
								total_Industrial_maximum_capacity += addon_maximum_capacity(map(x,y))
							}
							if addon_type(map(x,y)) = "public" {
								total_Public_maximum_capacity += addon_maximum_capacity(map(x,y))
							}
					loop
			
				loop
			
			//category(x,y)の読み込み
				category_buf = get_chapter(load_mapdata, "category(x,y)", " {", "}")
			
				repeat mapy
					y = cnt
		
					notesel category_buf
					noteget category_buf_a_line, (y+1)
		
					sdim category_buf_a_tile, mapx
					split category_buf_a_line, ", ", category_buf_a_tile
			
					repeat mapx
						x = cnt
						category(x,y) = category_buf_a_tile(x)
					loop
			
				loop
		
			//obj_type(x,y)の読み込み
				obj_type_buf = get_chapter(load_mapdata, "obj_type(x,y)", " {", "}")
			
				repeat mapy
					y = cnt
		
					notesel obj_type_buf
					noteget obj_type_buf_a_line, (y+1)
		
					sdim obj_type_buf_a_tile, mapx
					split obj_type_buf_a_line, ", ", obj_type_buf_a_tile
			
					repeat mapx
						x = cnt
						obj_type(x,y) = int(obj_type_buf_a_tile(x))
					loop
			
				loop
		
			//obj_dire(x,y)の読み込み
				obj_dire_buf = get_chapter(load_mapdata, "obj_dire(x,y)", " {", "}")
			
				repeat mapy
					y = cnt
		
					notesel obj_dire_buf
					noteget obj_dire_buf_a_line, (y+1)
		
					sdim obj_dire_buf_a_tile, mapx
					split obj_dire_buf_a_line, ", ", obj_dire_buf_a_tile
			
					repeat mapx
						x = cnt
						obj_dire(x,y) = int(obj_dire_buf_a_tile(x))
					loop
			
				loop
	
			//obj_serial_num(x,y)の読み込み
				if instr(load_mapdata, 0, "obj_serial_num(x,y)") != -1 {
					obj_serial_num_buf = get_chapter(load_mapdata, "obj_serial_num(x,y)", " {", "}")
					
					repeat mapy
						y = cnt
			
						notesel obj_serial_num_buf
						noteget obj_serial_num_buf_a_line, (y+1)
			
						sdim obj_serial_num_buf_a_tile, mapx
						split obj_serial_num_buf_a_line, ", ", obj_serial_num_buf_a_tile
				
						repeat mapx
							x = cnt
							obj_serial_num(x,y) = int(obj_serial_num_buf_a_tile(x))
	
							if obj_serial_num(x,y) > next_obj_serial_num {
								next_obj_serial_num = obj_serial_num(x,y)
							}
						loop
					loop
				}
	
			//obj_use_tiles_x(x,y)の読み込み
				if instr(load_mapdata, 0, "obj_use_tiles_x(x,y)") != -1 {
					obj_use_tiles_x_buf = get_chapter(load_mapdata, "obj_use_tiles_x(x,y)", " {", "}")
					
					repeat mapy
						y = cnt
			
						notesel obj_use_tiles_x_buf
						noteget obj_use_tiles_x_buf_a_line, (y+1)
			
						sdim obj_use_tiles_x_buf_a_tile, mapx
						split obj_use_tiles_x_buf_a_line, ", ", obj_use_tiles_x_buf_a_tile
				
						repeat mapx
							x = cnt
							obj_use_tiles_x(x,y) = int(obj_use_tiles_x_buf_a_tile(x))
						loop
				
					loop
				}
	
			//obj_use_tiles_y(x,y)の読み込み
				if instr(load_mapdata, 0, "obj_use_tiles_y(x,y)") != -1 {
					obj_use_tiles_y_buf = get_chapter(load_mapdata, "obj_use_tiles_y(x,y)", " {", "}")
				
					repeat mapy
						y = cnt
			
						notesel obj_use_tiles_y_buf
						noteget obj_use_tiles_y_buf_a_line, (y+1)
			
						sdim obj_use_tiles_y_buf_a_tile, mapx
						split obj_use_tiles_y_buf_a_line, ", ", obj_use_tiles_y_buf_a_tile
				
						repeat mapx
							x = cnt
							obj_use_tiles_y(x,y) = int(obj_use_tiles_y_buf_a_tile(x))
						loop
				
					loop
				}
	
			//obj_tiles_x(x,y)の読み込み
				if instr(load_mapdata, 0, "obj_tiles_x(x,y)") != -1 {
					obj_tiles_x_buf = get_chapter(load_mapdata, "obj_tiles_x(x,y)", " {", "}")
					
					repeat mapy
						y = cnt
			
						notesel obj_tiles_x_buf
						noteget obj_tiles_x_buf_a_line, (y+1)
			
						sdim obj_tiles_x_buf_a_tile, mapx
						split obj_tiles_x_buf_a_line, ", ", obj_tiles_x_buf_a_tile
				
						repeat mapx
							x = cnt
							obj_tiles_x(x,y) = int(obj_tiles_x_buf_a_tile(x))
						loop
				
					loop
				}
	
			//obj_tiles_y(x,y)の読み込み
				if instr(load_mapdata, 0, "obj_tiles_y(x,y)") != -1 {
					obj_tiles_y_buf = get_chapter(load_mapdata, "obj_tiles_y(x,y)", " {", "}")
	
					repeat mapy
						y = cnt
			
						notesel obj_tiles_y_buf
						noteget obj_tiles_y_buf_a_line, (y+1)
			
						sdim obj_tiles_y_buf_a_tile, mapx
						split obj_tiles_y_buf_a_line, ", ", obj_tiles_y_buf_a_tile
				
						repeat mapx
							x = cnt
							obj_tiles_y(x,y) = int(obj_tiles_y_buf_a_tile(x))
						loop
				
					loop
				}
	
			//residents(x,y)の読み込み
				residents_buf = get_chapter(load_mapdata, "residents(x,y)", " {", "}")
			
				repeat mapy
					y = cnt
		
					notesel residents_buf
					noteget residents_buf_a_line, (y+1)
		
					sdim residents_buf_a_tile, mapx
					split residents_buf_a_line, ", ", residents_buf_a_tile
			
					repeat mapx
						x = cnt
						residents(x,y) = int(residents_buf_a_tile(x))
						Total_Population += residents(x,y)
					loop
			
				loop
	
			//workers_Commercial(x,y)の読み込み
				if instr(load_mapdata, 0, "workers_Commercial(x,y)") != -1 {
					workers_Commercial_buf = get_chapter(load_mapdata, "workers_Commercial(x,y)", " {", "}")
				
					repeat mapy
						y = cnt
			
						notesel workers_Commercial_buf
						noteget workers_Commercial_buf_a_line, (y+1)
			
						sdim workers_Commercial_buf_a_tile, mapx
						split workers_Commercial_buf_a_line, ", ", workers_Commercial_buf_a_tile
				
						repeat mapx
							x = cnt
							workers_Commercial(x,y) = int(workers_Commercial_buf_a_tile(x))
							Total_workers_Commercial += workers_Commercial(x,y)
						loop
				
					loop
				}
	
			//workers_Office(x,y)の読み込み
				if instr(load_mapdata, 0, "workers_Office(x,y)") != -1 {
					workers_Office_buf = get_chapter(load_mapdata, "workers_Office(x,y)", " {", "}")
				
					repeat mapy
						y = cnt
			
						notesel workers_Office_buf
						noteget workers_Office_buf_a_line, (y+1)
			
						sdim workers_Office_buf_a_tile, mapx
						split workers_Office_buf_a_line, ", ", workers_Office_buf_a_tile
				
						repeat mapx
							x = cnt
							workers_Office(x,y) = int(workers_Office_buf_a_tile(x))
							Total_workers_Office += workers_Office(x,y)
						loop
				
					loop
				}
	
			//workers_Industrial(x,y)の読み込み
				if instr(load_mapdata, 0, "workers_Industrial(x,y)") != -1 {
					workers_Industrial_buf = get_chapter(load_mapdata, "workers_Industrial(x,y)", " {", "}")
				
					repeat mapy
						y = cnt
			
						notesel workers_Industrial_buf
						noteget workers_Industrial_buf_a_line, (y+1)
			
						sdim workers_Industrial_buf_a_tile, mapx
						split workers_Industrial_buf_a_line, ", ", workers_Industrial_buf_a_tile
				
						repeat mapx
							x = cnt
							workers_Industrial(x,y) = int(workers_Industrial_buf_a_tile(x))
							Total_workers_Industrial += workers_Industrial(x,y)
						loop
				
					loop
				}
	
			//workers_Public(x,y)の読み込み
				if instr(load_mapdata, 0, "workers_Public(x,y)") != -1 {
					workers_Public_buf = get_chapter(load_mapdata, "workers_Public(x,y)", " {", "}")
				
					repeat mapy
						y = cnt
			
						notesel workers_Public_buf
						noteget workers_Public_buf_a_line, (y+1)
			
						sdim workers_Public_buf_a_tile, mapx
						split workers_Public_buf_a_line, ", ", workers_Public_buf_a_tile
				
						repeat mapx
							x = cnt
							workers_Public(x,y) = int(workers_Public_buf_a_tile(x))
							Total_workers_Public += workers_Public(x,y)
						loop
				
					loop
				}
		;}
	
	//雨粒の初期位置
		randomize
	
		repeat 1000
			rain(cnt) = 0
			rain_x(cnt) = rnd(windowx)
			rain_y(cnt) = -rnd(windowy)
		loop
	
	//element2、element3関数は何度も使うと動作が重くなるため、よく使うtile_greenfieldの"null"のelement2およびelement3関数の内容を別の変数に保存
		//更地（tile_greenfield）の"null"のobj_type番号
			tile_greenfield_null_type_buf = element2( "tile_greenfield", use_type, addon_total_use_types, "null")
		
		//更地（tile_greenfield）の"null"のobj_dire番号
			tile_greenfield_null_dire_buf = element3( "tile_greenfield", use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "null")
	
	//需要度を増減
		//総求人数を取得
			Vacancies = (total_Commercial_maximum_capacity-Total_workers_Commercial) + (total_Office_maximum_capacity-Total_workers_Office) + (total_Industrial_maximum_capacity-Total_workers_Industrial) + (total_Public_maximum_capacity-Total_workers_Public)
		
		//総浮浪者数を取得
			Total_Vagrants = Total_Population - Total_workers_Commercial - Total_workers_Office - Total_workers_Industrial - Total_workers_Public
	
*map_drawing
	randomize
	
	repeat
	
		dim done_build, mapx, mapy
		dim done_build_2, mapx, mapy
		dim done_build_3, mapx, mapy
	
		map_drawing_cnt ++
	
		//1回のループで1分とする
			time_Minutes ++
		
		//time_Minutes=60で1時間とする
			if time_Minutes = 60 {
				time_Minutes = 0
				time_Hour ++
			}
	
		//time_Hour=24で1日とする
			if time_Hour= 24 {
				time_Date ++
				time_Hour = 0
				time_Minutes = 0
	
				if time_Date > 28 and time_Month = 2 and time_Year\4 != 0 {
					time_Date = 1
					time_Month ++
				}
				if time_Date > 29 and time_Month = 2 and time_Year\4 = 0 {
					time_Date = 1
					time_Month ++
				}
				if time_Date > 30 and (time_Month = 4 or time_Month = 6 or time_Month = 9 or time_Month = 11) {
					time_Date = 1
					time_Month ++
				}
				if time_Date > 31 and (time_Month = 1 or time_Month = 3 or time_Month = 5 or time_Month = 7 or time_Month = 8 or time_Month = 10 or time_Month = 12) {
					time_Date = 1
					time_Month ++
				}
	
				if time_Month > 12 {
					time_Year ++
					time_Month = 1
					time_Date = 1
				}
			}
	
		/*カメラ操作*/
			getkey key_left, 37
			if key_left = 1 {
				camx -= 10
			}
			
			getkey key_up, 38
			if key_up = 1 {
				camy -= 5
			}
			
			getkey key_right, 39
			if key_right = 1 {
				camx += 10
			}
			
			getkey key_down, 40
			if key_down = 1 {
				camy += 5
			}
	
		/*マップ描写*/
			redraw 0
			color 0, 0, 0 : boxf
	
			if mousex != before_mousex or mousey != before_mousey or camx != before_camx or camy != before_camy {
				mousex_=mousex+camx-(chip_size/2)	//mx,myにマウス座標取得
				mousey_=mousey+camy+16
				mx=(mousey_+mousex_/2)/(chip_size/2)
				my=(-mousex_+mousey_*2)/chip_size
	
				before_mousex = mousex
				before_mousey = mousey
			}
	
		; ------ FPS取得処理 ------
			  if gettime(7) < msecond { ; ミリ秒の桁上がりを確認する
			    ; fpsにカウントしたフレーム数を代入し、カウントを1フレーム目に戻す
			    fps = frame_count
			    frame_count = 1
			
			  } else {
			    ; 上記以外の場合フレームをカウント
			    frame_count = frame_count + 1
			
			  }
			  ; msecondへ現在のミリ秒値を代入
			  msecond = gettime(7)
	
		/*BGM再生*/
			gosub *play_BGM
	
		stick key,0 ; キー取得
	
*map_drawing_2
		onclick 0
		
		repeat mapx
			x = cnt
				
			repeat mapy
				y = cnt
	
				//マウスのどのボタンが押されているか取得
					mouse_left = 0
					mouse_right = 0
					
					getkey mouse_left, 1
					getkey mouse_right, 2
	
					if mouse_left = 1 or mouse_right = 1 {
						gosub *map_drawing_onclick
					}
	
				if camx != before_camx or camy != before_camy or windowx != before_windowx or windowy != before_windowy {
	
					//画面中央の座標
						x_=(windowx/2)+camx-chip_size/2	//mx,myにマウス座標取得
						y_=(windowy/2)+camy
						middle_x=(y_+x_/2)/(chip_size/2)
						middle_y=(-x_+y_*2)/chip_size
	
					//左上のx座標
						left_top_x_ = 0+camx-chip_size/2
						left_top_y_ = 0+camy
						left_top_x = (left_top_y_+left_top_x_/2)/(chip_size/2)
		
					//左下のy座標
						left_bottom_x_ = 0+camx-chip_size/2
						left_bottom_y_ = windowy+camy
						left_bottom_y = (-left_bottom_x_+left_bottom_y_*2)/chip_size
		
					//右上のy座標
						right_top_x_ = windowx+camx-chip_size/2
						right_top_y_ = 0+camy
						right_top_y = (-right_top_x_+right_top_y_*2)/chip_size
		
					//右下のx座標
						right_bottom_x_ = windowx+camx-chip_size/2
						right_bottom_y_ = windowy+camy
						right_bottom_x = (right_bottom_y_+right_bottom_x_/2)/(chip_size/2)
	
						before_camx = camx
						before_camy = camy

						before_windowx = windowx
						before_windowy = windowy
	
				}
	
				if x>(left_top_x-1) and x<(right_bottom_x+1) and y>(right_top_y-1) and y<(left_bottom_y+1) {
		
					//周囲のオブジェクトの番号を取得
						left_chip = ""
						top_chip = ""
						bottom_chip = ""
						right_chip = ""
		
						if x > 0 {
							left_chip = category(x-1, y)
						}
						if y > 0 {
							top_chip = category(x, y-1)
						}
						if mapy-1 > y {
							bottom_chip = category(x, y+1)
						}
						if mapx-1 > x {
							right_chip = category(x+1, y)
						}
		
					//道路の向きを調節
						category_buf = category(x,y)
						
						if category_buf = "road" {
							gosub *adjustment_road
						}
						
					//オブジェクト（道路や建物など）の表示をするための準備
						x_buf = x
						y_buf = y
	
						if x > 0 and x < mapx {
							if obj_use_tiles_x(x,y) > 0 {
								if obj_tiles_x(x,y) > 0 {
									x -= obj_tiles_x(x,y)
								} else {
									x -= (obj_use_tiles_x(x,y)-1) + obj_tiles_x(x,y)
								}
							}
						}
	
						if y > 0 and y < mapy {
							if obj_use_tiles_y(x,y) > 0 {
								if obj_tiles_y(x,y) < 0 {
									y -= obj_tiles_y(x,y)
								} else {
									y += (obj_use_tiles_y(x,y)-1) + obj_tiles_y(x,y)
								}
							}
						}
	
					//name(x,y)が"tile_greenfield"にも関わらずobj_type(x,y)が0以外の場合（黒いマス防止）
						if name(x,y) = "tile_greenfield" and obj_type(x,y) != tile_greenfield_null_type_buf {
							obj_type(x,y) = tile_greenfield_null_type_buf
						}
	
					//クォータービューの座標を画面上の座標に変換
						qv2 x, y
	
					//オブジェクトのバッファ番号、オブジェクトの左上の座標（atlx）、左下の座標（atly）、右上の座標（abrx）、右下の座標（abry）、サイズ（sizex, sizey）を取得
						if addon_total_use_types( map(x,y) ) > 1 {		; ひとつのアドオンで複数の画像を領する場合
							buffer_number(x,y) = (map(x,y) + 1000) * 1001 + obj_type(x,y)
							get_about_addon map(x,y), obj_type(x,y), obj_dire(x,y), atlx, atly, abrx, abry, sizex, sizey
							
						} else {										; ひとつのアドオンでひとつの画像を領する場合
							buffer_number(x,y) = map(x,y) + 1000
							get_about_addon map(x,y), obj_type(x,y), obj_dire(x,y), atlx, atly, abrx, abry, sizex, sizey
								
						}
							
					//オブジェクトを表示
						pos macro1, macro2 - sizey + 1 + (8*(obj_use_tiles_x(x,y)))
						gmode 2 : gcopy buffer_number(x,y), atlx, atly, sizex, sizey
	
						x = x_buf
						y = y_buf
	
				}
	
				//人口・需要度変動
					gosub *fluctuation
					
			loop
					
		loop
	
		//時間帯に応じて明るさを調節
			//夜間
			if (time_Hour >= 18 and time_Hour <= 23) or (time_Hour >= 0 and time_Hour <= 5) {
				color 0, 0, 0 : sboxf 200, 0, 0, windowx, windowy
			}
	
			//夕方（だんだん暗く）
			if time_Hour = 17 {
				color 0, 0, 0 : sboxf double(time_Minutes+1.0)/60*200, 0, 0, windowx, windowy
			}
	
			//明け方（だんだん明るく）
			if time_Hour = 6 {
				color 0, 0, 0 : sboxf 200-double(time_Minutes+1.0)/60*200, 0, 0, windowx, windowy
			}
	
		//マウスポインタの位置のチップを光らせる
			if opening_addon_menu = 1 {
				menu_line_y = windowy-70-titlebar_h-32-20
			} else {
				menu_line_y = windowy-70-titlebar_h
			}
					
			if mousey < menu_line_y {
				if pointer_icon = -1 {
					color 0, 0, 0
					
					qv2 mx,my
					pos macro1, macro2-32
	
					if cursor_mode = "normal" {
						gmode 4,,,128 : gcopy 17, 0, 0, 64, 32
					}
					if cursor_mode = "bulldozer" {
						gmode 4,,,128 : gcopy 18, 0, 0, 64, 32
					}
							
				} else {
					color 0, 0, 0
					
					qv2 mx,my
					pos macro1, macro2-32
					gmode 4,,,128 : gcopy 17, 0, 0, 64, 32
								
					qv2 mx,my
					color : gmode 4,,,200
					pos macro1+16,macro2-32 : gcopy (10001000+pointer_icon), 0, 0, 32, 32
				}
			}
	
		if cnt \ 10 = 0 {
			title "demand_R "+demand_Residential+" Vacancies "+Vacancies+" Total_Vagrants "+Total_Vagrants+" マウス座標("+mx+","+my+") カメラ座標("+camx+","+camy+") add_rain:"+add_rain+" FPS:"+fps+""
		}
	
		repeat mapx
			x = cnt
			repeat mapy
				y = cnt
	
				//メニューを開いているときは地区を示す色を表示する
					if cursor_mode != "normal" and cursor_mode != "put_Road" {
						qv2 x,y
						category_buf = category(x,y)
						
						if category_buf = "residential" {
							color : gmode 4,,,128
							pos macro1, macro2-32 : gcopy 22, 0, 0, 64, 32
						}
						if category_buf = "commercial" {
							color : gmode 4,,,128
							pos macro1, macro2-32 : gcopy 23, 0, 0, 64, 32
						}
						if category_buf = "office" {
							color : gmode 4,,,128
							pos macro1, macro2-32 : gcopy 24, 0, 0, 64, 32
						}
						if category_buf = "industrial" {
							color : gmode 4,,,128
							pos macro1, macro2-32 : gcopy 25, 0, 0, 64, 32
						}
						if category_buf = "public" {
							color : gmode 4,,,128
							pos macro1, macro2-32 : gcopy 26, 0, 0, 64, 32
						}
					}
			loop
		loop
	
		//天候の変動
			gosub *climate
	
*menu_buttons
			//現在のウィンドウサイズとタイトルバーの高さを取得
				gosub *get_windowsize
			
			//メニュー
				color 0, 0, 0
				gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h, windowx, windowy
	
				//標準カーソルボタン
					if cursor_mode = "normal" {
						gmode 2
						pos 20, windowy-70-titlebar_h : gcopy 3, 0, 32, 32, 32
					} else {
						gmode 2
						pos 20, windowy-70-titlebar_h : gcopy 3, 0, 0, 32, 32
					}
	
				//道路ボタン
					if cursor_mode = "put_Road" {
						gmode 2
						pos 60, windowy-70-titlebar_h : gcopy 4, 0, 32, 32, 32
					} else {
						gmode 2
						pos 60, windowy-70-titlebar_h : gcopy 4, 0, 0, 32, 32
					}
	
				//建物（住居地区）ボタン
					if cursor_mode = "put_Residential" {
						gmode 2
						pos 92, windowy-70-titlebar_h : gcopy 5, 0, 32, 32, 32
					} else {
						gmode 2
						pos 92, windowy-70-titlebar_h : gcopy 5, 0, 0, 32, 32
					}
	
				//建物（商業地区）ボタン
					if cursor_mode = "put_Commercial" {
						gmode 2
						pos 124, windowy-70-titlebar_h : gcopy 12, 0, 32, 32, 32
					} else {
						gmode 2
						pos 124, windowy-70-titlebar_h : gcopy 12, 0, 0, 32, 32
					}
	
				//建物（オフィス）ボタン
					if cursor_mode = "put_High_density_Office" {
						gmode 2
						pos 156, windowy-70-titlebar_h : gcopy 6, 0, 32, 32, 32
					} else {
						gmode 2
						pos 156, windowy-70-titlebar_h : gcopy 6, 0, 0, 32, 32
					}
	
				//建物（工業地区）ボタン
					if cursor_mode = "put_Industrial" {
						gmode 2
						pos 188, windowy-70-titlebar_h : gcopy 19, 0, 32, 32, 32
					} else {
						gmode 2
						pos 188, windowy-70-titlebar_h : gcopy 19, 0, 0, 32, 32
					}
	
				//建物（公共施設）ボタン
					if cursor_mode = "put_Public" {
						gmode 2
						pos 220, windowy-70-titlebar_h : gcopy 7, 0, 32, 32, 32
					} else {
						gmode 2
						pos 220, windowy-70-titlebar_h : gcopy 7, 0, 0, 32, 32
					}
	
				//公園ボタン
					if cursor_mode = "put_Park" {
						gmode 2
						pos 252, windowy-70-titlebar_h : gcopy 29, 0, 32, 32, 32
					} else {
						gmode 2
						pos 252, windowy-70-titlebar_h : gcopy 29, 0, 0, 32, 32
					}
	
				//撤去ボタン
					if cursor_mode = "bulldozer" {
						gmode 2
						pos windowx-54, windowy-70-titlebar_h : gcopy 10, 0, 32, 32, 32
					} else {
						gmode 2
						pos windowx-54, windowy-70-titlebar_h : gcopy 10, 0, 0, 32, 32
					}
	
				//設定ボタン
					gmode 2
					pos windowx-54-32, windowy-40-titlebar_h : gcopy 13, 0, 0, 32, 32
	
				//保存ボタン
					gmode 2
					pos windowx-54, windowy-40-titlebar_h : gcopy 11, 0, 0, 32, 32
	
				//人口、日付・気温を表示
					color 255, 255, 255 : font "Yu Gothic UI", 14
					pos 20, windowy-32-titlebar_h : mes "人口 "+Total_Population+"人 "+time_Year+"年"+time_Month+"月"+time_Date+"日 "+strf("%02d",time_Hour)+":"+strf("%02d",time_Minutes)+"  気温 "+temperature+"℃"
				
				//RCOI需要メータ
					font SystemFont, 10
					
					//R - 住居区画
						color 34, 177, 76 : boxf windowx-200, windowy-titlebar_h-20-(demand_Residential/3), windowx-200+10, windowy-titlebar_h-20
						cmes "R", windowx-200, windowy-titlebar_h-20, windowx-200+10, windowy-titlebar_h-10
					//C - 商業区画
						color 63, 72, 204 : boxf windowx-190, windowy-titlebar_h-20-(demand_Commercial/3), windowx-190+10, windowy-titlebar_h-20
						cmes "C", windowx-190, windowy-titlebar_h-20, windowx-190+10, windowy-titlebar_h-10
					//O - オフィス区画
						color 0, 162, 232 : boxf windowx-180, windowy-titlebar_h-20-(demand_Office/3), windowx-180+10, windowy-titlebar_h-20
						cmes "O", windowx-180, windowy-titlebar_h-20, windowx-180+10, windowy-titlebar_h-10
					//I - 工業区画
						color 255, 242, 0 : boxf windowx-170, windowy-titlebar_h-20-(demand_Residential/3), windowx-170+10, windowy-titlebar_h-20
						cmes "I", windowx-170, windowy-titlebar_h-20, windowx-170+10, windowy-titlebar_h-10
	
				if opening_addon_menu = 1 {
					gosub *open_menu_addon_menu
				}
					
			redraw 1
			await 30
			c+=16
	loop
	
*map_drawing_onclick
	if opening_addon_menu = 1 {
		menu_line_y = windowy-70-titlebar_h-32-20
	} else {
		menu_line_y = windowy-70-titlebar_h
	}
	
	/*------------------------------------------メニューのボタンの動作------------------------------------------------*/
	if mousey >= menu_line_y and mousex >= 0 and mousey >= 0 and mousex <= windowx and mousey <= windowy {
		//標準カーソルボタン
			if click_range( 20, windowy-70-titlebar_h, 20+32, windowy-70-titlebar_h+32 ) = 1 {
				cursor_mode = "normal"
	
				opening_addon_menu = 0
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
			}
			
		//道路ボタン
			if click_range( 60, windowy-70-titlebar_h, 60+32, windowy-70-titlebar_h+32 ) = 1 {
				
				if opening_menu_put_Road = 0 {
					cursor_mode = "put_Road"
					density = ""
					
					gosub *open_menu_addon_menu
	
					opening_addon_menu = 1
					opening_menu_put_Road = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_Two_lane_road
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_Two_lane_road
							noteget addon_num_normal_road, clicked_addon_number
							addon_num_normal_road = int(addon_num_normal_road)
				} 
	
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
			}
	
		//建物（住居地区）ボタン
			if click_range( 92, windowy-70-titlebar_h, 92+32, windowy-70-titlebar_h+32 ) = 1 {
				
				if opening_menu_put_Reaidential = 0 {
					cursor_mode = "put_Residential"
					density = "low"
					
					gosub *open_menu_addon_menu
					opening_addon_menu = 1
					opening_menu_put_Residential = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_low_density_residential
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_low_density_residential
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				} 
				
				opening_menu_put_Road = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
			}
	
		//建物（商業地区）ボタン
			if click_range( 124, windowy-70-titlebar_h, 124+32, windowy-70-titlebar_h+32 ) = 1 {
	
				if opening_menu_put_Commercial = 0 {
					cursor_mode = "put_Commercial"
					density = "low"
					
					gosub *open_menu_addon_menu
					opening_addon_menu = 1
					opening_menu_put_Commercial = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_low_density_commercial
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_low_density_commercial
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				} 
	
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
			}
	
		//建物（オフィス）ボタン
			if click_range( 156, windowy-70-titlebar_h, 156+32, windowy-70-titlebar_h+32 ) = 1 {
	
				if opening_menu_put_High_density_Office = 0 {
					cursor_mode = "put_High_density_Office"
					gosub *open_menu_addon_menu
	
					opening_addon_menu = 1
					opening_menu_put_High_density_Office = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_high_density_office
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_high_density_office
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				} 
	
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
			}
	
		//建物（工業地区）ボタン
			if click_range( 188, windowy-70-titlebar_h, 188+32, windowy-70-titlebar_h+32 ) = 1 {
	
				if opening_menu_put_High_density_Office = 0 {
					cursor_mode = "put_Industrial"
					gosub *open_menu_addon_menu
	
					opening_addon_menu = 1
					opening_menu_put_Industrial = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_industrial
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_industrial
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				} 
	
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
			}
			
		//建物（公共施設）ボタン
			if click_range( 220, windowy-70-titlebar_h, 220+32, windowy-70-titlebar_h+32 ) = 1 {
	
				if opening_menu_put_Public = 0 {
					cursor_mode = "put_Public"
					gosub *open_menu_addon_menu
	
					opening_addon_menu = 1
					opening_menu_put_Public = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_public
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_public
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				} 
	
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Park = 0
			}
	
		//建物（公園）ボタン
			if click_range( 252, windowy-70-titlebar_h, 252+32, windowy-70-titlebar_h+32 ) = 1 {
	
				if opening_menu_put_Park = 0 {
					cursor_mode = "put_Park"
					gosub *open_menu_addon_menu
	
					opening_addon_menu = 1
					opening_menu_put_Park = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_park
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_park
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				} 
	
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Public = 0
			}
	
		//撤去ボタン
			if click_range( windowx-54, windowy-70-titlebar_h, windowx-54+32, windowy-70-titlebar_h+32 ) = 1 {
				cursor_mode = "bulldozer"
	
				opening_addon_menu = 0
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Public = 0
			}
	
		//設定ボタン
			if click_range( windowx-54-32, windowy-40-titlebar_h, windowx-54, windowy-40-titlebar_h+32 ) = 1 {
				cursor_mode = "normal"
				opening_addon_menu = 0
				gosub *setting
			}
	
		//保存ボタン
			if click_range( windowx-54, windowy-40-titlebar_h, windowx-54+32, windowy-40-titlebar_h+32 ) = 1 {
				cursor_mode = "normal"
				opening_addon_menu = 0
				gosub *save
			}
	
	
		//アドオン選択ボタン（水色のメニューバー）
			
			/*-------------------------------------------道路---------------------------------------------------*/
				notesel type_Two_lane_road
				if opening_menu_put_Road = 1 and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Road"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_Two_lane_road
						noteget put_addon_name, clicked_addon_number
						
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_Two_lane_road
						noteget addon_num_normal_road, clicked_addon_number
						addon_num_normal_road = int(addon_num_normal_road)
				}
	
			/*-----------------------------------------住居地区-------------------------------------------------*/
	
			//住居地区の低密度・高密度選択ボタン
				//低密度
					if cursor_mode = "put_Residential" and click_range( 0, windowy-70-titlebar_h-32, 16, windowy-70-titlebar_h-16 ) = 1 {
						density = "low"
		
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_low_density_residential
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_low_density_residential
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
								
						gosub *open_menu_addon_menu
					}
				//高密度
				if cursor_mode = "put_Residential" and click_range( 0, windowy-70-titlebar_h-16, 16, windowy-70-titlebar_h ) = 1 {
					density = "high"
	
					//とりあえず一番左にあるアドオンを選択させておく
					clicked_addon_number = 0
		
					//選択されたアドオンのアドオン名を取得
						notesel type_high_density_residential
						noteget put_addon_name, clicked_addon_number
			
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_high_density_residential
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
						
					gosub *open_menu_addon_menu
				}
			
			//低密度住居地区
				notesel type_low_density_residential
				if opening_menu_put_Residential = 1 and density = "low" and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Residential"
					
					clicked_addon_number = mousex/35 - 1
					
					//選択されたアドオンのアドオン名を取得
						notesel type_low_density_residential
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_low_density_residential
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
				
			//高密度住居地区
				notesel type_high_density_residential
				if opening_menu_put_Residential = 1 and density = "high" and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Residential"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_high_density_residential
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_high_density_residential
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
	
			/*--------------------------------------------商業地区---------------------------------------------*/
	
			//商業地区の低密度・高密度選択ボタン
				//低密度
					if cursor_mode = "put_Commercial" and click_range( 0, windowy-70-titlebar_h-32, 16, windowy-70-titlebar_h-16 ) = 1 {
						density = "low"
		
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_low_density_commercial
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_low_density_commercial
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
								
						gosub *open_menu_addon_menu
					}
				//高密度
				if cursor_mode = "put_Commercial" and click_range( 0, windowy-70-titlebar_h-16, 16, windowy-70-titlebar_h ) = 1 {
					density = "high"
	
					//とりあえず一番左にあるアドオンを選択させておく
					clicked_addon_number = 0
		
					//選択されたアドオンのアドオン名を取得
						notesel type_high_density_commercial
						noteget put_addon_name, clicked_addon_number
			
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_high_density_commercial
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
						
					gosub *open_menu_addon_menu
				}
			
			//低密度商業地区
				notesel type_low_density_commercial
				if opening_menu_put_commercial = 1 and density = "low" and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Commercial"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_low_density_commercial
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_low_density_commercial
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
	
			//高密度商業地区
				notesel type_high_density_commercial
				if opening_menu_put_commercial = 1 and density = "high" and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Commercial"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_high_density_commercial
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_high_density_commercial
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
	
			/*--------------------------------------------オフィス-----------------------------------------------*/
			
			//高密度オフィス
				notesel type_high_density_office
				if opening_menu_put_high_density_office = 1 and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_High_density_Office"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_high_density_office
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_high_density_office
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
	
			/*--------------------------------------------工業地区-----------------------------------------------*/
			
			//工業地区
				notesel type_industrial
				if opening_menu_put_industrial = 1 and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Industrial"
		
					clicked_addon_number = mousex/35 - 1
						
					//選択されたアドオンのアドオン名を取得
						notesel type_industrial
						noteget put_addon_name, clicked_addon_number
						
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_industrial
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
				
			/*---------------------------------------------公共施設-----------------------------------------------*/
			
			//公共施設
				notesel type_public
				if opening_menu_put_public = 1 and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Public"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_public
						noteget put_addon_name, clicked_addon_number
						
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_public
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
	
			/*---------------------------------------------公共施設-----------------------------------------------*/
			
			//公共施設
				notesel type_public
				if opening_menu_put_Park = 1 and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Park"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_park
						noteget put_addon_name, clicked_addon_number
						
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_park
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
	
			/*----------------------------------------------------------------------------------------------------*/
	
		}
	
	gosub *build_obj
	
	return
	
*build_obj
	dim cannot_build, 4
	dim direction_check, 4
	
*build_obj_2
	/*-----------------道路・建物の建設・敷設（左クリック）、撤去（右クリック or 撤去モード）---------------------*/
	
		//標準カーソルモードあるいはクリックされたマウスy座標がmenu_line_y以上の場合はreturn
			if cursor_mode = "normal" or mousey >= menu_line_y or mx < 0 or my < 0 {
				pointer_icon = -1
				return
			}
	
		//撤去モードの場合は選択されたマスを更地にする
			if cursor_mode = "bulldozer" {
				gosub *delete_obj
				return
			}
	
		//カーソルがマップ外にある場合はreturn
			if mx < 0 or my < 0 or mx > mapx-1 or my > mapy-1 {
				return
			}
	
		//周囲のオブジェクトのカテゴリを取得
			left_chip = ""
			top_chip = ""
			bottom_chip = ""
			right_chip = ""
			
			if mx > 0 {
				left_chip = category(mx-1, my)
			}
			if my > 0 {
				top_chip = category(mx, my-1)
			}
			if mapy-1 > my {
				bottom_chip = category(mx, my+1)
			}
			if mapx-1 > mx {
				right_chip = category(mx+1, my)
			}
	
		//建設・敷設
			if mouse_left = 1 {
				
				//道路敷設
					if cursor_mode = "put_Road" and map(mx, my) != addon_num_normal_road {
						//道路の向きを揃える
							x_buf = x : y_buf = y
							x = mx : y = my
	
							category_buf = category(mx,my)
							
							from_build_obj = 1
							gosub *adjustment_road
							
							x = x_buf : y = y_buf
	
						//敷設した地点の情報を書き換え
							cetegory_buf = category(mx,my)
							
							map(mx, my) = addon_num_normal_road
							name(mx, my) = put_addon_name
							category(mx, my) = "road"
							
							obj_serial_num(mx, my) = 0
							obj_use_tiles_x(mx,my) = 0
							obj_use_tiles_y(mx,my) = 0
							obj_tiles_x(mx, my) = 0
							obj_tiles_y(mx, my) = 0
							
							if addon_chip_x(addon_num_buf, obj_type(mx,my), obj_dire(mx,my)) = 1 and addon_chip_y(addon_num_buf, obj_type(mx,my), obj_dire(mx,my)) = 1 {
								if category_buf = "residential" {
									Total_Population -= residents(mx,my)
									total_Residential_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
									residents(mx,my) = 0
								}
			
								if category_buf = "commercial" {
									Total_workers_Commercial -= workers_Commercial(mx, my)
									total_Commercial_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
									workers_Commercial(mx, my) = 0
								}
			
								if category_buf = "office" {
									Total_workers_Office -= workers_Office(mx, my)
									total_Office_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
									workers_Office(mx, my) = 0
								}
			
								if category_buf = "industrial" {
									Total_workers_Industrial -= workers_Industrial(mx, my)
									total_Industrial_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
									workers_Industrial(mx, my) = 0
								}
			
								if category_buf = "public" {
									Total_workers_Public -= workers_Public(mx, my)
									total_Public_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
									workers_Public(mx, my) = 0
								}
							}
	
						return
					}
	
				//道路敷設以外の場合、選択されたマスの周囲（上下左右）に道路があるかどうか（道路に接続できるか）
					if cursor_mode != "put_Road" {
	
						//そもそも建設地に道路がある場合
							if category(mx,my) = "road" and cursor_mode != "put_Road" and (ginfo_mx>=ginfo_wx1 & ginfo_mx<=ginfo_wx2) and (ginfo_my>=ginfo_wy1+titlebar_h&ginfo_my<=ginfo_wy2) {
								dialog "この区画は既に占有されています"
								return
							}
	
						around_road_exist = -1
						
						if mx > 0 {
							if category(mx-1, my) = "road" and cannot_build(0) = 0 {
								around_road_exist += 1
	
								direction = "left"
								direction_check(0) = 1
	
								now_direction_num = 0
							}
						}
						if my > 0 {
							if category(mx, my-1) = "road" and cannot_build(1) = 0 {
								around_road_exist += 1
	
								direction = "top"
								direction_check(1) = 1
	
								now_direction_num = 1
							}
						}
						if my < mapy {
							if category(mx, my+1) = "road" and cannot_build(2) = 0 {
								around_road_exist += 1
	
								direction = "bottom"
								direction_check(2) = 1
	
								now_direction_num = 2
							}
						}
						if mx < mapx {
							if category(mx+1, my) = "road" and cannot_build(3) = 0 {
								around_road_exist += 1
	
								direction = "right"
								direction_check(3) = 1
	
								now_direction_num = 3
							}
						}
	
						//道路に接続されていない場所に建設しようとしている場合
							if around_road_exist = -1 and (ginfo_mx>=ginfo_wx1 & ginfo_mx<=ginfo_wx2) and (ginfo_my>=ginfo_wy1+titlebar_h&ginfo_my<=ginfo_wy2) {
								dialog "道路に接続されていない場所には建設できません！"
								return
							}
	
						if around_road_exist >= 0 {
							//建物（住居地区）建設
								if cursor_mode = "put_Residential" {
									category_buf = "residential"
								}
	
							//建物（商業地区）建設
								if cursor_mode = "put_Commercial" {
									category_buf = "commercial"
								}
				
							//建物（高密度オフィス）建設
								if cursor_mode = "put_High_density_Office" {
									category_buf = "office"
								}
	
							//建物（工業地区）建設
								if cursor_mode = "put_Industrial" {
									category_buf = "industrial"
								}
				
							//建物（公共施設）建設
								if cursor_mode = "put_Public" {
									category_buf = "public"
								}
	
							//建物（公園）建設
								if cursor_mode = "put_Park" {
									category_buf = "park"
								}
	
							//向きに応じてobj_type_bufとobj_dire_bufを代入
								if direction = "left" {
									obj_type_buf = element2( put_addon_name, use_type, addon_total_use_types, "null")
									obj_dire_buf = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "left")
								}
								if direction = "top" {
									obj_type_buf = element2( put_addon_name, use_type, addon_total_use_types, "null")
									obj_dire_buf = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "top")
								}
								if direction = "bottom" {
									obj_type_buf = element2( put_addon_name, use_type, addon_total_use_types, "null")
									obj_dire_buf = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "bottom")
								}
								if direction = "right" {
									obj_type_buf = element2( put_addon_name, use_type, addon_total_use_types, "null")
									obj_dire_buf = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "right")
								}
							
							//2マス以上の建築物の場合、建設する方向にほかの建築物がないか確認
								if addon_chip_x(addon_num_buf, obj_type_buf, obj_dire_buf) >= 2 or addon_chip_y(addon_num_buf, obj_type_buf, obj_dire_buf) >= 2 {
									found_other_obj = 0
									
									repeat addon_chip_x(addon_num_buf, obj_type_buf, obj_dire_buf)
										rx = mx + cnt
	
										if direction = "right" and addon_chip_x(addon_num_buf, obj_type_buf, obj_dire_buf) > 1 {
											rx -= 1
										}
										
										repeat addon_chip_y(addon_num_buf, obj_type_buf, obj_dire_buf)
											ry = my + cnt
	
											if direction = "bottom" and addon_chip_y(addon_num_buf, obj_type_buf, obj_dire_buf) > 1 {
												ry -= 1
											}
	
											if done_build(rx,ry) = 0 and category(rx,ry) != "tile" and (category(rx,ry) = "road" or obj_use_tiles_x(rx,ry) != 0 or obj_use_tiles_y(rx,ry) != 0) {
												found_other_obj = 1
												
												if direction = "left" {
													cannot_build(0) = 1
												}
												if direction = "top" {
													cannot_build(1) = 1
												}
												if direction = "bottom" {
													cannot_build(2) = 1
												}
												if direction = "right" {
													cannot_build(3) = 1
												}
		
												//ほかに建設可能な向きを探す
													found_other_direction = 0
														
													repeat 4
															
														if direction_check(cnt) = 1 and cnt != now_direction_num and cannot_build(cnt) = 0 {
															found_other_direction = 1
															direction_check(now_direction_num) = 0
															
															if cnt = 0 {
																direction = "left"
																now_direction_num = 0
																break
															}
															if cnt = 1 {
																direction = "top"
																now_direction_num = 1
																break
															}
															if cnt = 2 {
																direction = "bottom"
																now_direction_num = 2
																break
															}
															if cnt = 3 {
																direction = "right"
																now_direction_num = 3
																break
															}
														}
													loop
		
												//ほかに建設可能な向きが見つかった場合
													if found_other_direction = 1 {
														able_build_here = 1
														break
														
												//ほかに建設可能な向きが見つからなかった場合
													} else {
														cannot_build_here = 1
														break
													}
											}
	
											done_build(rx,ry) = 1
										loop
									loop
	
									if able_build_here = 1 and found_other_obj = 1 {
										able_build_here = 0
										found_other_obj = 0
										
										goto *build_obj_2
									}
									
									if cannot_build_here = 1 and found_other_obj = 1 {
										dialog "この区画は既に占有されています"
										
										cannot_build_here = 0
										found_other_obj = 0
										
										return
									}
										
								}
	
							//obj_type_bufをobj_type(mx,my)に、obj_dire_bufをobj_dire(mx,my)に代入
								obj_type(mx,my) = obj_type_buf
								obj_dire(mx,my) = obj_dire_buf
	
							//x方向に1マスしか使わない建築物の場合、obj_use_tiles_xは0に
								if addon_chip_x(addon_num_buf, obj_type(mx,my), obj_dire(mx,my)) = 1 {
									acx = 0
								} else {
									acx = 1
								}
	
							//y方向に1マスしか使わない建築物の場合、obj_use_tiles_yは0に
								if addon_chip_y(addon_num_buf, obj_type(mx,my), obj_dire(mx,my)) = 1 {
									acy = 0
								} else {
									acy = 1
								}
	
							//オブジェクトの通し番号
								if obj_serial_num(mx, my) = 0 {
									next_obj_serial_num += 1
								}
								
							//建設処理
								repeat addon_chip_x(addon_num_buf, obj_type(mx,my), obj_dire(mx,my))
									rx = cnt
									
									if direction = "right" and addon_chip_x(addon_num_buf, obj_type_buf, obj_dire_buf) > 1 {
										rx -= 1
									}
									
									repeat addon_chip_y(addon_num_buf, obj_type(mx,my), obj_dire(mx,my))
										ry = cnt
	
										if direction = "bottom" and addon_chip_y(addon_num_buf, obj_type_buf, obj_dire_buf) > 1 {
											ry -= 1
										}
										
										before_category = category(mx+rx,my+ry)
										
										map(mx+rx,my+ry) = addon_num_buf
										name(mx+rx,my+ry) = put_addon_name
										category(mx+rx,my+ry) = category_buf
	
										obj_type(mx+rx,my+ry) = obj_type(mx, my)
										obj_dire(mx+rx,my+ry) = obj_dire(mx, my)
			
										obj_serial_num(mx+rx,my+ry) = next_obj_serial_num
										obj_use_tiles_x(mx+rx,my+ry) = addon_chip_x(addon_num_buf, 0, obj_dire(mx+rx,my+ry)) * acx
										obj_use_tiles_y(mx+rx,my+ry) = addon_chip_y(addon_num_buf, 0, obj_dire(mx+rx,my+ry)) * acy
										obj_tiles_x(mx+rx,my+ry) = rx
										obj_tiles_y(mx+rx,my+ry) = ry
										
										if before_category = "residential" and done_build_2(mx+rx,my+ry) = 0 {
											Total_Population -= residents(mx+rx,my+ry)
											total_Residential_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
											residents(mx+rx,my+ry) = 0
		
											done_build_2(mx+rx,my+ry) = 1
										}
		
										if before_category = "commercial" and done_build_2(mx+rx,my+ry) = 0 {
											Total_workers_Commercial -= workers_Commercial(mx+rx,my+ry)
											total_Commercial_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
											workers_Commercial(mx+rx,my+ry) = 0
		
											done_build_2(mx+rx,my+ry) = 1
										}
										
										if before_category = "office" and done_build_2(mx+rx,my+ry) = 0 {
											Total_workers_Office -= workers_Office(mx+rx,my+ry)
											total_Office_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
											workers_Office(mx+rx,my+ry) = 0
		
											done_build_2(mx+rx,my+ry) = 1
										}
		
										if before_category = "industrial" and done_build_2(mx+rx,my+ry) = 0 {
											Total_workers_Industrial -= workers_Industrial(mx+rx,my+ry)
											total_Industrial_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
											workers_Industrial(mx+rx,my+ry) = 0
		
											done_build_2(mx+rx,my+ry) = 1
										}
		
										if before_category = "public" and done_build_2(mx+rx,my+ry) = 0 {
											Total_workers_Public -= workers_Public(mx+rx,my+ry)
											total_Public_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
											workers_Public(mx+rx,my+ry) = 0
		
											done_build_2(mx+rx,my+ry) = 1
										}
									loop
								loop
	
							//都市全体の収容可能人数或いは求人数を増やす
								if category_buf = "residential" and done_build_3(mx,my) = 0 {
									total_Residential_maximum_capacity += addon_maximum_capacity(addon_num_buf)
									Vacancies += addon_maximum_capacity(addon_num_buf)
									done_build_3(mx,my) = 1
								}
								if category_buf = "commercial" and done_build_3(mx,my) = 0 {
									total_Commercial_maximum_capacity += addon_maximum_capacity(addon_num_buf)
									Vacancies += addon_maximum_capacity(addon_num_buf)
									done_build_3(mx,my) = 1
								}
								if category_buf = "office" and done_build_3(mx,my) = 0 {
									total_Office_maximum_capacity += addon_maximum_capacity(addon_num_buf)
									Vacancies += addon_maximum_capacity(addon_num_buf)
									done_build_3(mx,my) = 1
								}
								if category_buf = "industrial" and done_build_3(mx,my) = 0 {
									total_Industrial_maximum_capacity += addon_maximum_capacity(addon_num_buf)
									Vacancies += addon_maximum_capacity(addon_num_buf)
									done_build_3(mx,my) = 1
								}
								if category_buf = "public" and done_build_3(mx,my) = 0 {
									total_Public_maximum_capacity += addon_maximum_capacity(addon_num_buf)
									Vacancies += addon_maximum_capacity(addon_num_buf)
									done_build_3(mx,my) = 1
								}
						}
					}	
					
			}
	
			return
	
*delete_obj
		//撤去
			//カーソルがマップ外にある場合はreturn
				if mx < 0 or my < 0 or mx > mapx-1 or my > mapy-1 {
					return
				}
			
			if mouse_right = 1 or (cursor_mode = "bulldozer" and mouse_left = 1) or from_build_obj = 1 {
				//オブジェクトの向きを取得
					addon_num_buf = addon_num(name(mx,my))
					tile_addon_num_buf = addon_num("tile_greenfield")
					obj_direction_buf = addon_direction(addon_num_buf, obj_type(mx,my), obj_dire(mx,my))
	
					category_buf = category(mx,my)
	
					p = 0
	
					obj_tiles_x_buf = obj_tiles_x(mx,my)
					obj_tiles_y_buf = obj_tiles_y(mx,my)
	
					obj_use_tiles_x_buf = obj_use_tiles_x(mx,my)
					obj_use_tiles_y_buf = obj_use_tiles_y(mx,my)
	
					if obj_use_tiles_x_buf = 0 {
						px = 1
					} else {
						px = 0
					}
					
					if obj_use_tiles_y_buf = 0 {
						py = 1
					} else {
						py = 0
					}
					
					repeat obj_use_tiles_x_buf + px
						rx = cnt
	
						if obj_direction_buf = "right" and obj_use_tiles_x_buf > 1 {
							rx -= 1
						}
								
						repeat obj_use_tiles_y_buf + py
							ry = cnt
	
							if obj_direction_buf = "bottom" and obj_use_tiles_y_buf > 1 {
								ry -= 1
							}
							
							map(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = tile_addon_num_buf
							name(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = "tile_greenfield"
							category(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = "tile"
							obj_type(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = tile_greenfield_null_type_buf
							obj_dire(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = tile_greenfield_null_dire_buf
								
							obj_serial_num(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							obj_use_tiles_x(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							obj_use_tiles_y(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							obj_tiles_x(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							obj_tiles_y(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
	
							if category_buf = "residential" {
								Total_Population -= residents(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry)
								total_Residential_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
								residents(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							}
			
							if category_buf = "commercial" {
								Total_workers_Commercial -= workers_Commercial(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry)
								total_Commercial_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
								Vacancies -= addon_maximum_capacity(addon_num_buf)
								workers_Commercial(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							}
				
							if category_buf = "office" {
								Total_workers_Office -= workers_Office(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry)
								total_Office_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
								Vacancies -= addon_maximum_capacity(addon_num_buf)
								workers_Office(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							}
				
							if category_buf = "industrial" {
								Total_workers_Industrial -= workers_Industrial(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry)
								total_Industrial_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
								Vacancies -= addon_maximum_capacity(addon_num_buf)
								workers_Industrial(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							}
				
							if category_buf = "public" {
								Total_workers_Public -= workers_Public(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry)
								total_Public_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
								Vacancies -= addon_maximum_capacity(addon_num_buf)
								workers_Public(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							}
	
						loop
	
					loop
			}
	
		from_build_obj = 0
		
		return
	
*open_menu_addon_menu
	color 0,162,232 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, windowx, windowy-70-titlebar_h
	
	if cursor_mode = "put_Road" {
		notesel type_number_Two_lane_road
	}
	if cursor_mode = "put_Residential" and density = "low" {
		notesel type_number_low_density_residential
	
		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, 16, windowy-70-titlebar_h
		pos 0, windowy-70-titlebar_h-2-32 : gmode 2 : gcopy 8, 0, 16, 16, 16
		pos 0, windowy-70-titlebar_h-2-16 : gmode 2 : gcopy 9, 0, 0, 16, 16 
	}
	if cursor_mode = "put_Residential" and density = "high" {
		notesel type_number_high_density_residential
	
		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, 16, windowy-70-titlebar_h
		pos 0, windowy-70-titlebar_h-2-32 : gmode 2 : gcopy 8, 0, 0, 16, 16
		pos 0, windowy-70-titlebar_h-2-16 : gmode 2 : gcopy 9, 0, 16, 16, 16
	}
	if cursor_mode = "put_Commercial" and density = "low" {
		notesel type_number_low_density_commercial
	
		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, 16, windowy-70-titlebar_h
		pos 0, windowy-70-titlebar_h-2-32 : gmode 2 : gcopy 20, 0, 16, 16, 16
		pos 0, windowy-70-titlebar_h-2-16 : gmode 2 : gcopy 21, 0, 0, 16, 16 
	}
	if cursor_mode = "put_Commercial" and density = "high" {
		notesel type_number_high_density_commercial
	
		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, 16, windowy-70-titlebar_h
		pos 0, windowy-70-titlebar_h-2-32 : gmode 2 : gcopy 20, 0, 0, 16, 16
		pos 0, windowy-70-titlebar_h-2-16 : gmode 2 : gcopy 21, 0, 16, 16, 16
	}
	if cursor_mode = "put_Low_density_Office" {
		notesel type_number_low_density_office
	}
	if cursor_mode = "put_High_density_Office" {
		notesel type_number_high_density_office
	}
	if cursor_mode = "put_Industrial" {
		notesel type_number_industrial
	}
	if cursor_mode = "put_Public" {
		notesel type_number_public
	}
	if cursor_mode = "put_Park" {
		notesel type_number_park
	}
	
	repeat notemax
		noteget get_addon_number, cnt
	
		gmode 2
		if clicked_addon_number != cnt {
			pos 30 + (cnt*35)+10, windowy-70-titlebar_h-32 : gcopy (10001000 + int(get_addon_number)), 0, 0, 32, 32
		}
		if clicked_addon_number = cnt {
			color 255,255,255 : font "", 14
			pos 20, (windowy-70-titlebar_h-32-40+5) : mes addon_jp_name(int(get_addon_number))
			
			color 255,255,255 : font "", 10
			pos 23, (windowy-70-titlebar_h-32-20) : mes addon_summary(int(get_addon_number))
			
			pos 30 + (cnt*35)+10, windowy-70-titlebar_h-32 : gcopy (10001000 + int(get_addon_number)), 0, 32, 32, 64
	
			pointer_icon = int(get_addon_number)
		}
	loop
	
	return
		
*adjustment_road
	if instr(put_addon_name, 0, "road") = -1 {
		return
	}
	
	if (category_buf = "road" and (cursor_mode = "put_Road" or cursor_mode = "bulldozer")) or from_build_obj = 1 {
	
		if from_delete_obj = 0 {
			gosub *delete_obj
		}
		
		from_delete_obj = 0
		from_build_obj = 0
		
		//縦向き
			if left_chip != "road" and top_chip = "road" and bottom_chip = "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "width")
			}
	
		//横向き
			if left_chip = "road" and top_chip != "road" and bottom_chip != "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "depth")
			}
	
		//行き止まり
			if left_chip = "road" and top_chip != "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "left")
			}
			if left_chip != "road" and top_chip = "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "top")
			}
			if left_chip != "road" and top_chip != "road" and bottom_chip = "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "bottom")
			}
			if left_chip != "road" and top_chip != "road" and bottom_chip != "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "right")
			}
	
		//曲がり角
			if left_chip = "road" and top_chip = "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "left-top")
			}
			if left_chip != "road" and top_chip = "road" and bottom_chip != "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "right-top")
			}
			if left_chip = "road" and top_chip != "road" and bottom_chip = "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "left-bottom")
			}
			if left_chip != "road" and top_chip != "road" and bottom_chip = "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "right-bottom")
			}
	
		//T字型交差点
			if left_chip = "road" and top_chip = "road" and bottom_chip = "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-top-bottom")
			}
			if left_chip = "road" and top_chip = "road" and bottom_chip != "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-right-top")
			}
			if left_chip = "road" and top_chip != "road" and bottom_chip = "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-right-bottom")
			}
			if left_chip != "road" and top_chip = "road" and bottom_chip = "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "right-top-bottom")
			}
	
		//十字型交差点
			if left_chip = "road" and top_chip = "road" and bottom_chip = "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_cross")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_cross", addon_direction, addon_total_addon_direction, "null")
			}
	
		//1マスだけ孤立した（周りに接続する道路がない）道路の場合はコンクリートタイルを表示
			if left_chip != "road" and top_chip != "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_cross")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_cross", addon_direction, addon_total_addon_direction, "null")
			}
	
	}
	
	return
	
*load_adat
	notesel buf_adat
			
	use_types_buf = get_chapter(buf_adat, "use_types", " = \"", "\"")
	
	//adat_use_typesを更にタイプごとに分ける
		split use_types_buf, ", ", use_type_buf
	
		repeat stat
			use_type(addon_number, cnt) = use_type_buf(cnt)
			await 1
		loop
				
	//タイプの数を取得
		addon_total_use_types(addon_number) = stat
				
	//各タイプごとの概要を取得
	
		//取得開始
		repeat addon_total_use_types(addon_number)
			use_type_summary = get_chapter(buf_adat, ""+use_type(addon_number, cnt)+" {", " {", ";")
	
			//使用する画像の取得（image）
				addon_image(addon_number, cnt) = get_chapter(use_type_summary, "image", " = \"", "\"")
						
			//タイプの向きを取得（direction）
				addon_direction_buf = get_chapter(use_type_summary, "direction", " = \"", "\"")
						
				split addon_direction_buf, ", ", addon_direction_buf_2
	
				load_adat_cnt = cnt
	
				addon_total_addon_direction(addon_number, cnt) = stat
	
				repeat addon_total_addon_direction(addon_number, load_adat_cnt)
					addon_direction(addon_number, load_adat_cnt, cnt) = addon_direction_buf_2(cnt)
	
					addon_direction_summary = get_chapter(use_type_summary, ""+addon_direction(addon_number, load_adat_cnt, cnt)+" {", " {", "}")
	
					//サイズを取得（size_x, size_y）
						addon_size_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "size_x", " = \"", "\"")
						addon_size_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "size_y", " = \"", "\"")
										
						addon_size_x(addon_number, load_adat_cnt, cnt) = int(addon_size_x_buf(addon_number, load_adat_cnt, cnt))
						addon_size_y(addon_number, load_adat_cnt, cnt) = int(addon_size_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップのゲーム上の座標サイズを取得（chip_x, chip_y）
						addon_chip_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "chip_x", " = \"", "\"")
						addon_chip_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "chip_y", " = \"", "\"")
										
						addon_chip_x(addon_number, load_adat_cnt, cnt) = int(addon_chip_x_buf(addon_number, load_adat_cnt, cnt))
						addon_chip_y(addon_number, load_adat_cnt, cnt) = int(addon_chip_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップの左上の座標を取得（top_left_x, top_left_y）
						addon_top_left_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "top_left_x", " = \"", "\"")
						addon_top_left_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "top_left_y", " = \"", "\"")
										
						addon_top_left_x(addon_number, load_adat_cnt, cnt) = int(addon_top_left_x_buf(addon_number, load_adat_cnt, cnt))
						addon_top_left_y(addon_number, load_adat_cnt, cnt) = int(addon_top_left_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップの右下の座標を取得（bottom_right_x, bottom_right_y）
						addon_bottom_right_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "bottom_right_x", " = \"", "\"")
						addon_bottom_right_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "bottom_right_y", " = \"", "\"")
										
						addon_bottom_right_x(addon_number, load_adat_cnt, cnt) = int(addon_bottom_right_x_buf(addon_number, load_adat_cnt, cnt))
						addon_bottom_right_y(addon_number, load_adat_cnt, cnt) = int(addon_bottom_right_y_buf(addon_number, load_adat_cnt, cnt))
									
					await 1
				loop
		
			wait 1
		loop
	
	return
	
*play_BGM
	//現在再生しているBGMの現在の再生位置と曲の長さを取得
		mci"status Cities-Box position"
		BGM_Position = stat		; 現在の再生位置
			
		mci "status Cities-Box length"
		BGM_Length = stat		; 曲の長さ
	
	//再生位置が曲の長さと同じなら次のBGMをランダムに選出
		if BGM_Position = BGM_Length {	
			chdir directory
			chdir "bgm"
	
			mci "close Cities-Box"
					
			//パス名を含めたファイル一覧を取得
				dirlist2h 1, ','
				dirlist2 buf_BGMs, "*.mp3*", 1, '\\'
					
				sdim BGM_filelist, buf_BGMs
				dirlist2r BGM_filelist
		
				notesel BGM_filelist
				total_BGMs = notemax
			
			chdir directory
			
			//ランダムに選出
				randomize
	
				repeat
					BGM_rnd = rnd(total_BGMs)
					
					//現在再生しているBGMと同じ曲でないことを確認
						notesel BGM_filelist
						noteget next_BGM_file, BGM_rnd
						
						if next_BGM_file != playing_BGM_file {
							playing_BGM_file = next_BGM_file
							break
						}
	
					await 1
				loop
				
				mci"open \""+directory+"\\bgm\\"+playing_BGM_file+"\" alias Cities-Box"	; 開く
				mci"play Cities-Box"													; 再生
	
				changed_BGM = 1
		}
	
		; ボリューム
		if Set_Play_BGM = 0 {
			mci "setaudio Cities-Box volume to 0"
		} else {
			mci "setaudio Cities-Box volume to 1000"
		}
	
		return
	
*get_windowsize
	//現在のウィンドウサイズを取得
		windowx = ginfo_sizex
		windowy = ginfo_sizey
	
	//ウィンドウ左枠の横幅とタイトルバーの高さを取得
		dim rc, 2
		rc(0) = 0
		rc(1) = 0
		ClientToScreen hwnd, varptr(rc)
		
		window_left_breadth = rc(0) - ginfo_wx1
		titlebar_h = rc(1) - ginfo_wy1
	
	return
	
*fluctuation
	//人口・労働人口・需要度などを増減
	
		//毎日午前0時に増減
			if time_Hour != 0 or time_Minutes != 0 {
				return
			}
	
		//変数初期化
			before_residents = 0
			before_workers_Commericial = 0
			before_workers_Office = 0
			before_workers_Industrial = 0
			before_workers_Public = 0
	
		//人口の増減
			if category(x,y) = "residential" {
				//住民数を増やすか・減らすかをランダムに決める（需要度によって確率が変動する）
					rndv = 10+(demand_Residential/10)
					f = rnd(rndv)+1		; fの値は住居地区の需要度が100％なら20〜0
						
				//変更前の住居地区の住民数
					before_residents = residents(x,y)
		
				//人口の増減処理
					if f < 10+(demand_Residential/10) {
						//各住居地区に何人増やすか
							if addon_maximum_capacity(map(x,y)) - before_residents > 0 {
								add_residents = rnd(addon_maximum_capacity(map(x,y)) - before_residents)
								residents(x,y) = before_residents + add_residents
							}
					}
				
					if f > 10+(demand_Residential/10) {
						//各住居地区で何人減らすか
							if before_residents > 0 {
								cut_residents = rnd(before_residents)
								residents(x,y) = before_residents - cut_residents
							}
					}
				
					if residents(x,y) < 0 {
						residents(x,y) = 0
					}
		
				//総人口数にも反映
					Total_Population = Total_Population - before_residents + residents(x,y)
			}
	
		//商業区画の労働人口の増減
			if category(x,y) = "commercial" {
				//労働人口を増やすか・減らすかをランダムに決める（需要度によって確率が変動する）
					rndv = 10+(demand_Commercial/10)
					f = rnd(rndv)+1		; fの値は商業地区の需要度が100％なら20〜0
					f2 = 0
						
				//変更前の商業区画の労働者数
					before_workers_Commercial = workers_Commercial(x,y)
		
				//増減処理
					if f < 10+(demand_Commercial/10) {
						//各商業地区に何人増やすか
							if addon_maximum_capacity(map(x,y)) - before_workers_Commercial > 0 {
								add_workers = rnd(addon_maximum_capacity(map(x,y)) - before_workers_Commercial)
								//総人口を越さないことを確認
									if Total_workers_Commercial + add_workers < Total_Population {
										workers_Commercial(x,y) = before_workers_Commercial + add_workers
									} else {
										f2 = 1
									}
							}
					}
				
					if f > 10+(demand_Commercial/10) or f2 = 1 {
						//各商業地区で何人減らすか
							if before_workers_Commercial > 0 {
								cut_workers = rnd(before_workers_Commercial)
								workers_Commercial(x,y) = before_workers_Commercial - cut_workers
							}
					}
				
					if workers_Commercial(x,y) < 0 {
						workers_Commercial(x,y) = 0
					}
		
				//総労働人口数にも反映
					Total_workers_Commercial = Total_workers_Commercial - before_workers_Commercial + workers_Commercial(x,y)
			}
	
		//オフィス区画の労働人口の増減
			if category(x,y) = "office" {
				//労働人口を増やすか・減らすかをランダムに決める（需要度によって確率が変動する）
					rndv = 10+(demand_Office/10)
					f = rnd(rndv)+1		; fの値はオフィス地区の需要度が100％なら20〜0
					f2 = 0
						
				//変更前のオフィス区画の労働者数
					before_workers_Office = workers_Office(x,y)
		
				//増減処理
					if f < 10+(demand_Office/10) {
						//各オフィス地区に何人増やすか
							if addon_maximum_capacity(map(x,y)) - before_workers_Office > 0 {
								add_workers = rnd(addon_maximum_capacity(map(x,y)) - before_workers_Office)
								//総人口を越さないことを確認
									if Total_workers_Office + add_workers < Total_Population {
										workers_Office(x,y) = before_workers_Office + add_workers
									} else {
										f2 = 1
									}
							}
					}
				
					if f > 10+(demand_Office/10) or f2 = 1 {
						//各オフィス地区で何人減らすか
							if before_workers_Office > 0 {
								cut_workers = rnd(before_workers_Office)
								workers_Office(x,y) = before_workers_Office - cut_workers
							}
					}
				
					if workers_Office(x,y) < 0 {
						workers_Office(x,y) = 0
					}
		
				//総労働人口数にも反映
					Total_workers_Office = Total_workers_Office - before_workers_Office + workers_Office(x,y)
			}
	
		//工業区画の労働人口の増減
			if category(x,y) = "industrial" {
				//労働人口を増やすか・減らすかをランダムに決める（需要度によって確率が変動する）
					rndv = 10+(demand_Industrial/10)
					f = rnd(rndv)+1		; fの値は工業地区の需要度が100％なら20〜0
					f2 = 0
						
				//変更前の工業区画の労働者数
					before_workers_Industrial = workers_Industrial(x,y)
		
				//増減処理
					if f < 10+(demand_Industrial/10) {
						//各工業地区に何人増やすか
							if addon_maximum_capacity(map(x,y)) - before_workers_Industrial > 0 {
								add_workers = rnd(addon_maximum_capacity(map(x,y)) - before_workers_Industrial)
								//総人口を越さないことを確認
									if Total_workers_Industrial + add_workers < Total_Population {
										workers_Industrial(x,y) = before_workers_Industrial + add_workers
									} else {
										f2 = 1
									}
							}
					}
				
					if f > 10+(demand_Industrial/10) or f2 = 1 {
						//各工業地区で何人減らすか
							if before_workers_Industrial > 0 {
								cut_workers = rnd(before_workers_Industrial)
								workers_Industrial(x,y) = before_workers_Industrial - cut_workers
							}
					}
				
					if workers_Industrial(x,y) < 0 {
						workers_Industrial(x,y) = 0
					}
		
				//総労働人口数にも反映
					Total_workers_Industrial = Total_workers_Industrial - before_workers_Industrial + workers_Industrial(x,y)
			}
	
		//公共施設の労働人口の増減
			if category(x,y) = "public" {
				//労働人口を増やすか・減らすかをランダムに決める（需要度によって確率が変動する）
					f = rnd(2)
					f2 = 0
						
				//変更前の公共施設の労働者数
					before_workers_Public = workers_Public(x,y)
		
				//増減処理
					if f = 0 {
						//各公共施設に何人増やすか
							if addon_maximum_capacity(map(x,y)) - before_workers_Public > 0 {
								add_workers = rnd(addon_maximum_capacity(map(x,y)) - before_workers_Public)
								//総人口を越さないことを確認
									if Total_workers_Public + add_workers < Total_Population {
										workers_Public(x,y) = before_workers_Public + add_workers
									} else {
										f2 = 1
									}
							}
					}
				
					if f = 1 {
						//各公共施設で何人減らすか
							if before_workers_Public > 0 or f2 = 1 {
								cut_workers = rnd(before_workers_Public)
								workers_Public(x,y) = before_workers_Public - cut_workers
							}
					}
				
					if workers_Public(x,y) < 0 {
						workers_Public(x,y) = 0
					}
		
				//総労働人口数にも反映
					Total_workers_Public = Total_workers_Public - before_workers_Public + workers_Public(x,y)
			}
	
		//需要度を増減
			//総求人数を取得
				before_Vacancies = Vacancies
				Vacancies = (total_Commercial_maximum_capacity-Total_workers_Commercial) + (total_Office_maximum_capacity-Total_workers_Office) + (total_Industrial_maximum_capacity-Total_workers_Industrial) + (total_Public_maximum_capacity-Total_workers_Public)
				
			//総浮浪者数を取得
				before_Vagrants = Vagrants
				Total_Vagrants = Total_Population - Total_workers_Commercial - Total_workers_Office - Total_workers_Industrial - Total_workers_Public
	
				if Total_Vagrants < 0 {
					Total_Vagrants = 0
				}
				
			//RCOI需要メーターを変動
				if Vacancies >= 0 and Total_Vagrants >= 0 {
					if Total_Population > 0 {
						demand_Residential 	= 100 - ((Total_Population / Vacancies) * 100) + Special_demand_Residential
					} else {
						demand_Residential 	= 100
					}
					if Total_Commercial_maximum_capacity > 0 {
						demand_Commercial 	-= rnd(20) - 10  + Special_demand_Commercial
						if demand_Commercial > 100 {
							demand_Commercial = 100
						} else : if demand_Commercial < 0 {
							demand_Commercial = 0
						}
					} else {
						demand_Commercial 	= 100
					}
					if Total_Office_maximum_capacity > 0 {
						demand_Office 		-= rnd(20) - 10  + Special_demand_Office
						if demand_Office > 100 {
							demand_Office = 100
						} else : if demand_Office < 0 {
							demand_Office = 0
						}
					} else {
						demand_Office 		= 100
					}
					if Total_Industrial_maximum_capacity > 0 {
						demand_Industrial 	-= rnd(20) - 10  + Special_demand_Industrial
						if demand_Industrial > 100 {
							demand_Industrial = 100
						} else : if demand_Industrial < 0 {
							demand_Industrial = 0
						}
					} else {
						demand_Industrial 	= 100
					}
				}
	
	return
	
*climate
	//天候の変動
		randomize
	
		//気温の変動
			change_temperature = rnd(5)
	
			if change_temperature = 0 {
				
				//日中は気温が上がりやすく、夜間は下がりやすくする
					temperature_increase_or_decrease = rnd(8)
			
					//日中
						if 8 <= time_Hour and 14 >= time_Hour {
							if 0 <= temperature_increase_or_decrease and 5 >= temperature_increase_or_decrease {
								temperature_increase = 1
								temperature_decrease = 0
							}
							if 6 <= temperature_increase_or_decrease and 7 >= temperature_increase_or_decrease {
								temperature_increase = 0
								temperature_decrease = 1
							}
			
					//夜間
						} else {
							if 0 <= temperature_increase_or_decrease and 1 >= temperature_increase_or_decrease {
								temperature_increase = 1
								temperature_decrease = 0
							}
							if 2 <= temperature_increase_or_decrease and 7 >= temperature_increase_or_decrease {
								temperature_increase = 0
								temperature_decrease = 1
							}
						}
				
				//12月〜2月：-10℃〜15℃の範囲で気温を変動
					if time_Month = 12 or (1 <= time_Month and 2 >= time_Month) {
						
						if temperature_increase = 1 {
							if temperature < 15 {
								temperature ++
							}
						}
						if temperature_decrease = 1 {
							if temperature > -10 {
								temperature --
							}
						}
						
					}
			
				//3月〜5月：10℃〜25℃の範囲で気温を変動
					if 3 <= time_Month and 5 >= time_Month {
						
						if temperature_increase = 1 {
							if temperature < 25 {
								temperature ++
							}
						}
						if temperature_decrease = 1 {
							if temperature > 10 {
								temperature --
							}
						}
						
					}
			
				//6月〜8月：20℃〜35℃の範囲で気温を変動
					if 6 <= time_Month and 8 >= time_Month {
						
						if temperature_increase = 1 {
							if temperature < 35 {
								temperature ++
							}
						}
						if temperature_decrease = 1 {
							if temperature > 20 {
								temperature --
							}
						}
						
					}
			
				//9月〜11月：10℃〜25℃の範囲で気温を変動
					if 9 <= time_Month and 11 >= time_Month {
						
						if temperature_increase = 1 {
							if temperature < 25 {
								temperature ++
							}
						}
						if temperature_decrease = 1 {
							if temperature > 10 {
								temperature --
							}
						}
						
					}
			}
	
		//天気の変動
			//雨・雪の表示、気温の変動
				if Set_Change_Weather = 1 {
					randomize
									
					add_rain_increase_or_decrease = rnd(2)
			
					if add_rain_increase_or_decrease = 0 {
						add_rain --
					} else : add_rain_increase_or_decrease = 1 {
						add_rain ++
					}
						
					repeat 100
						if rain_y(cnt) >= windowy or rain(cnt) = 0 {
							rain_increase_or_decrease = rnd(2)
								
							if rain_increase_or_decrease = 0 and add_rain >= 0 {
								rain(cnt) = 1
								rain_x(cnt) = rnd(windowx)
								rain_y(cnt) = -rnd(windowy)
								snow_size(cnt) = rnd(5)+1
							} else {
								rain(cnt) = 0
								rain_x(cnt) = 0
								rain_y(cnt) = 0
								snow_size(cnt) = 0
							}
						}
			
						if rain(cnt) = 1 {
							color 255, 255, 255
			
							if temperature >= 3 {	; 気温が3℃以上なら雨
								rain_y(cnt) += 5
								line rain_x(cnt), rain_y(cnt), rain_x(cnt), rain_y(cnt)+20
									
							} else {				; 気温が2℃以下なら雪
								rain_x(cnt) += (rnd(3)-1)*2
								rain_y(cnt) += 1
								circle rain_x(cnt), rain_y(cnt), rain_x(cnt)+snow_size(cnt), rain_y(cnt)+snow_size(cnt)
									
							}
						}
		
					loop
				}
		
		return
	
*setting
	if from_setting_onclick = 0 {
		screen 1, 300, 400
	}
	
	gsel 1
	
	title "Cities Box 設定"
	
	onclick *setting_onclick
	
	color 95, 95, 95 : boxf
	
	if from_setting_onclick = 0 {
		setting_SystemFont = SystemFont
	}
	
	color 255, 255, 255
	font setting_SystemFont, 16
	
	//都市名(City_Name)
		pos 10, 10 : mes "都市名"
	
		if from_setting_onclick = 0 {
			setting_City_Name = City_Name
		}
		
		objsize 210, 20
		pos 80, 10 : input setting_City_Name
	
	//市長名(Mayor_Name)
		pos 10, 40 : mes "市長名"
	
		if from_setting_onclick = 0 {
			setting_Mayor_Name = Mayor_Name
		}
		
		objsize 210, 20
		pos 80, 40 : input setting_Mayor_Name
	
	//天候の変化(Set_Change_Weather)
		if from_setting_onclick = 0 {
			setting_Set_Change_Weather = Set_Change_Weather
		}
		
		if setting_Set_Change_Weather = 0 {
			pos 10, 73 : gcopy 14, 0, 0, 16, 16
		} else {
			pos 10, 73 : gcopy 14, 0, 16, 16, 16
		}
		
		pos 35, 70 : mes "天候の変化"
	
	//BGMの再生の有無(Set_Play_BGM)
		if from_setting_onclick = 0 {
			setting_Set_Play_BGM = Set_Play_BGM
		}
		
		if setting_Set_Play_BGM = 0 {
			pos 10, 103 : gcopy 14, 0, 0, 16, 16
		} else {
			pos 10, 103 : gcopy 14, 0, 16, 16, 16
		}
		
		pos 35, 100 : mes "BGMの再生"
	
	//フォント(SystemFont)
		pos 10, 130 : mes "フォント"
	
		objsize 194, 20
		pos 80, 130 : input setting_SystemFont
	
		gmode 2
		pos 274, 130 : gcopy 16, 0, 0, 16, 16
	
	//OKボタン
		color 255, 255, 255 : boxf 100, 360, 200, 390
		color 95, 95, 95 : boxf 101, 361, 199, 389
	
		color 255, 255, 255 : font setting_SystemFont, 20
		cmes "OK", 100, 360, 200, 390
	
	from_setting_onclick = 0
		
	stop
	
*setting_onclick
	gsel 1
	
	from_setting_onclick = 1
	
	//天候の変化(Set_Change_Weather)
		//チェックボックス
			if click_range(10, 73, 10+16, 73+16) = 1 {
				if setting_Set_Change_Weather = 0 {
					setting_Set_Change_Weather = 1
				} else {
					setting_Set_Change_Weather = 0
				}
			}
	
	//BGMの再生の有無(Set_Play_BGM)
		//チェックボックス
			if click_range(10, 103, 10+16, 103+16) = 1 {
				if setting_Set_Play_BGM = 0 {
					setting_Set_Play_BGM = 1
				} else {
					setting_Set_Play_BGM = 0
				}
			}
	
	//フォント(SystemFont)
		//参照ボタン
			if click_range(274, 130, 274+16, 130+16) = 1 {
				gosub *refer_fonts
			}
	
	//OKボタン
		if click_range(100, 360, 200, 390) = 1 {
	
			// マップ作成時の設定の場合
				if from_new_map = 1 {
					City_Name = setting_City_Name
					Mayor_Name = setting_Mayor_Name
					Set_Change_Name = setting_Set_Change_Name
					SystemFont = setting_SystemFont
					
					gosub *save
	
					gsel 1, -1
					gsel 0
	
					load_mapdata_name = save_mapdata_name
	
					from_setting_onclick = 0
	
					onclick 0
					
					goto *load_map
				}
			
			gosub *save_setting
			
			gsel 1, -1
			onclick 0
			from_setting_onclick = 0
	
			gsel 0
			goto *map_drawing
		}
	
	clrobj
	
	goto *setting
	
*save_setting
	chdir directory
	
	//まずは本体設定(data/config.dat)を保存
		noteadd_SystemFont = 0
		noteadd_Set_Play_BGM = 0
		
		notesel config
	
		repeat notemax
			noteget config_buf, cnt
	
			if instr(config_buf, 0, "SystemFont") != -1 {
				SystemFont = setting_SystemFont
				noteadd "SystemFont = \""+SystemFont+"\"", cnt, 1
				noteadd_SystemFont = 1
			}
	
			if instr(config_buf, 0, "Set_Play_BGM") != -1 {
				Set_Play_BGM = setting_Set_Play_BGM
				noteadd "Set_Play_BGM = "+Set_Play_BGM+";", cnt, 1
				noteadd_Set_Play_BGM = 1
			}
		loop
	
		if noteadd_SystemFont = 0 {
			SystemFont = setting_SystemFont
			noteadd "SystemFont = \""+SystemFont+"\"", -1
		}
		if noteadd_Set_Play_BGM = 0 {
			Set_Play_BGM = setting_Set_Play_BGM
			noteadd "Set_Play_BGM = "+Set_Play_BGM+";", -1
		}
	
		notesave "data/config.dat"
	
	//次に各マップデータ(*.cbd)の設定を保存
		noteadd_City_Name = 0
		noteadd_Mayor_Name = 0
		noteadd_Set_Change_Weather = 0
		
		notesel load_mapdata
	
		repeat notemax
			noteget load_mapdata_buf, cnt
	
			if instr(load_mapdata_buf, 0, "City_Name") != -1 {
				City_Name = setting_City_Name
				noteadd "City_Name = \""+City_Name+"\";", cnt, 1
				noteadd_City_Name = 1
			}
	
			if instr(load_mapdata_buf, 0, "Mayor_Name") != -1 {
				Mayor_Name = setting_Mayor_Name
				noteadd "Mayor_Name = \""+Mayor_Name+"\";", cnt, 1
				noteadd_Mayor_Name = 1
			}
	
			if instr(load_mapdata_buf, 0, "Set_Change_Weather") != -1 {
				Set_Change_Weather = setting_Set_Change_Weather
				noteadd "Set_Change_Weather = "+Set_Change_Weather+";", cnt, 1
				noteadd_Set_Change_Weather = 1
			}
		loop
	
		if noteadd_City_Name = 0 {
			City_Name = setting_City_Name
			noteadd "City_Name = \""+City_Name+"\";", -1
		}
		if noteadd_Mayor_Name = 0 {
			Mayor_Name = setting_Mayor_Name
			noteadd "City_Name = \""+Mayor_Name+"\";", -1
		}
		if noteadd_Set_Change_Weather = 0 {
			Set_Change_Weather = setting_Set_Change_Weather
			noteadd "City_Name = \""+Set_Change_Weather+"\";", -1
		}
	
		if load_mapdata_name = "" {
			gosub *save
			load_mapdata_name = save_mapdata_name
	
			if from_new_map = 0 {
				return
			}
		}
	
		notesave load_mapdata_name
	
	return
	
*refer_fonts
	#uselib "comdlg32.dll"
	#func ChooseFont "ChooseFontA" int
	
	mref bmscr, 67
	dim chfont,16
	dim logfont,16
	sdim setting_SystemFont,32
	
	chfont.0 = 60 
	chfont.1 = bmscr.13
	chfont.3=varptr(logfont)
	chfont.5 = 0x01000141
	
	pm=varptr(chfont)
	ChooseFont pm
	
	if stat = 0 {
		return
	}
	
	style=0
	if (chfont.12 & 0x0100):style=style+1
	if (chfont.12 & 0x0200):style=style+2 
	if (logfont.5 & 0x0000FF00):style=style+4 
	if (logfont.5 & 0x00FF0000):style=style+8
	size=chfont.4/10
	memcpy setting_SystemFont,logfont,32,0,28
	
	return
	
*save
	save_mapdata = ""
	
	//マップ保存
		notesel save_mapdata
		
		//次に各マップデータ(*.cbd)の設定を保存
			noteadd "City_Name = \""+City_Name+"\";", -1
			noteadd "Mayor_Name = \""+Mayor_Name+"\";", -1
	
			noteadd "Total_Population = "+Total_Population+";", -1
	
			noteadd "Set_Change_Weather = "+Set_Change_Weather+";", -1
			noteadd "Temperature = "+temperature+";", -1
	
		//空白
			noteadd " ", -1
	
		//マップサイズ
			noteadd "mapx = "+mapx+";", -1
			noteadd "mapy = "+mapy+";", -1
	
		//空白
			noteadd " ", -1
	
		//日時
			noteadd "time_Year = "+time_Year+";", -1
			noteadd "time_Month = "+time_Month+";", -1
			noteadd "time_Date = "+time_Date+";", -1
			noteadd "time_Hour = "+time_Hour+";", -1
			noteadd "time_Minutes = "+time_Minutes+";", -1
	
		//空白
			noteadd " ", -1
	
		//需要度
			noteadd "demand_Residential = "+demand_Residential+";", -1
			noteadd "demand_Commercial = "+demand_Commercial+";", -1
			noteadd "demand_Office = "+demand_Office+";", -1
			noteadd "demand_Industrial = "+demand_Industrial+";", -1
	
		//空白
			noteadd " ", -1
	
		//name(x,y)
			noteadd "name(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
					
					if cnt = 0 {
						map_data_buf = name(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+name(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
			
		//category(x,y)
			noteadd "category(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
					
					if cnt = 0 {
						map_data_buf = category(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+category(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//obj_type(x,y)
			noteadd "obj_type(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_type(x,y))		; 3桁に揃えているのは見やすくするためなので特に意味は無いです。4桁（1000以上）も読み込み可
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_type(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//obj_dire(x,y)
			noteadd "obj_dire(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_dire(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_dire(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//obj_serial_num(x,y)
			noteadd "obj_serial_num(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_serial_num(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_serial_num(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//obj_use_tiles_x(x,y)
			noteadd "obj_use_tiles_x(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_use_tiles_x(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_use_tiles_x(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//obj_use_tiles_y(x,y)
			noteadd "obj_use_tiles_y(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_use_tiles_y(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_use_tiles_y(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//obj_tiles_x(x,y)
			noteadd "obj_tiles_x(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_tiles_x(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_tiles_x(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//obj_tiles_y(x,y)
			noteadd "obj_tiles_y(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_tiles_y(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_tiles_y(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//residents(x,y)
			noteadd "residents(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", residents(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", residents(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//workers_Commercial(x,y)
			noteadd "workers_Commercial(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", workers_Commercial(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", workers_Commercial(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//workers_Office(x,y)
			noteadd "workers_Office(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", workers_Office(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", workers_Office(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//workers_Industrial(x,y)
			noteadd "workers_Industrial(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", workers_Industrial(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", workers_Industrial(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//workers_Public(x,y)
			noteadd "workers_Public(x,y) {", -1
			
			repeat mapy
				y = cnt
			
				map_data_buf = ""
			
				repeat mapx
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", workers_Public(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", workers_Public(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
			loop
			
			noteadd "}", -1
	
		//保存先ファイルの選択
			dialog "cbx", 17, "Cities Box マップデータ"
	
			save_mapdata_name = refstr
			if instr(save_mapdata_name, 0, ".cbx") = -1 and instr(save_mapdata_name, 0, ".cbd") = -1 {
				save_mapdata_name = ""+save_mapdata_name+".cbx"
			}
	
			if stat = 0 {
				return
			}
	
		//暗号化（cbxで保存した場合のみ）
			if instr(save_mapdata_name, 0, ".cbd") = -1 {
				notesel save_mapdata
				l = notemax
				
				repeat l
					sdim save_mapdata_buf, 4096
					
					notesel save_mapdata
					noteget save_mapdata_buf, cnt
					
					save_mapdata_buf_strlen = strlen(save_mapdata_buf)
					enc save_mapdata_buf, (strlen(save_mapdata_name)/2), save_mapdata_buf_strlen
		
					notesel save_mapdata_Cipher
					noteadd save_mapdata_buf, cnt
				loop
			} else : if instr(save_mapdata_name, 0, ".cbd") != -1 {
				notesel save_mapdata
				notesave save_mapdata_name
	
				return
			}
	
		//保存
			if stat = 1 {
				notesel save_mapdata_Cipher
				notesave save_mapdata_name
			}
	
		return
			
*exit
	if ginfo_act = 0 {
		//一時ファイルを削除
			repeat total_addons
				exist "data/temp/"+addon_name(cnt)+".temp"
				
				if strsize != -1 {
					delete "data/temp/"+addon_name(cnt)+".temp"
				}
			
				wait 1
			loop
	
		gsel 0
		end
		
	} else {
		gsel ginfo_act, -1
		
		onclick 0
	
		from_setting_onclick = 0
	
		gsel 0
	
		if from_new_map = 1 {
			from_new_map = 0
			goto *menu
		}
	
		cursor_mode = "normal"
		
		goto *map_drawing
	}