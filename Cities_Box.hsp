/*--------------------------------------------------------------------------------------------------

									   Cities Box Ver 0.3.3.3
										 Main Source Code
	
										(C)YotioSoft 2017
	
--------------------------------------------------------------------------------------------------*/
onerror gosub *e
*define
/*チップサイズ（64x64）*/
#define chip_size		64

/*タイルを塗りつぶすためのマクロ*/
#define qv(%1,%2)	macro1=%1*chip_size/2-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro1(2)=%1*chip_size/2+chip_size-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro2=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4-camy+%1*chip_size/4:\
					macro2(2)=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4+chip_size/2-camy+%1*chip_size/4:\
					gmode 3,,,128 : gsquare -1,macro1,macro2
	
/*クウォータービューの位置を取得するためのマクロ（チップ表示用）*/
#define qv2(%1,%2)	macro1@=%1*chip_size/2-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro1@(2)=%1*chip_size/2+chip_size-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro2@=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4-camy+%1*chip_size/4:\
					macro2@(2)=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4+chip_size/2-camy+%1*chip_size/4:\

*uselib
	#uselib "user32.dll"
		#func FindWindow "FindWindowA" str, int
		#func GetWindowRect "GetWindowRect" int, int
		#func DrawText "DrawTextW" int,wstr,int,int,int
	
*module
#module

/*指定された範囲内にマウスがあるか確認する関数（使用例：click_range (100, 0, 300, 300) ）*/
#defcfunc click_range int mouse_x, int mouse_y, int mouse_x2, int mouse_y2
	if mouse_x <= mousex and mouse_x2 >= mousex and mouse_y <= mousey and mouse_y2 >= mousey {
		return 1
	}else{
		return 0
	}
	
/*アドオンの番号を取得する関数*/
#defcfunc addon_num str input_addon_name
	notesel temp_file
	noteload "data/temp/"+input_addon_name+".temp"
	
	return int(temp_file)
	
/*adatの各項目の読み込み（使用例：get_chapter(元の変数, "検索する項目", "始点区切りコード", "終端コード") ）*/
#defcfunc get_chapter var underlying_var, str search_chapter, str punctuate, str end_word
	value = instr(underlying_var, 0, search_chapter)
	get_chapter_buf = strmid ( underlying_var, value + strlen(""+search_chapter+""+punctuate+""), instr(underlying_var, value + strlen(""+search_chapter+""+punctuate+""), end_word) )
	
	return get_chapter_buf
	
/*指定された文字列が何番目の要素にあるかを取得（2次配列用）（使用例：element2 検索するアドオン名, 検索する文字列が含まれる変数名, その変数の要素数が格納されている変数, "検索する文字列"）*/
#defcfunc element2 str search_addon_name, array search_var, array search_var_elements, str search_word
	exist "data/temp/"+search_addon_name+".temp"
	if strsize = -1 {
		return -2
	}
	
	notesel temp_file
	noteload "data/temp/"+search_addon_name+".temp"
	
	finish = -1
	
	repeat search_var_elements( int(temp_file) )
		if search_var(int(temp_file), cnt) = search_word {
			finish = cnt
			break
		}
	loop
	
	return finish
	
/*指定された文字列が何番目の要素にあるかを取得（3次配列用）（使用例：element3 検索するアドオン名, 検索する文字列が含まれる変数名, その変数の要素数が格納されている変数, "検索する文字列", 検索する文字列が含まれる3番目の要素の変数名, その3番目の要素の変数の要素数が格納されている変数, "3番目の要素で検索する文字列"）*/
#defcfunc element3 str search_addon_name, array search_var, array search_var_elements, str search_word, array second_search_var, array second_search_var_elements, str second_search_word
	exist "data/temp/"+search_addon_name+".temp"
	if strsize = -1 {
		return -2
	}
	
	notesel temp_file
	noteload "data/temp/"+search_addon_name+".temp"
	
	finish = -1
	
	repeat search_var_elements( int(temp_file) )
		if search_var(int(temp_file), cnt) = search_word {
			icnt = cnt
			repeat second_search_var_elements( int(temp_file), icnt )
				if second_search_var(int(temp_file), icnt, cnt) = second_search_word {
					finish = cnt
					break
				}
			loop
		}
	loop
	
	return finish

/*文字を中央に表示（使用例：cmes "hogehoge", 0, 640, 0, 480, 0）*/
#deffunc cmes str ctext, int cx, int cy, int cx2, int cy2, int redraw_exist
	RECT = cx, cy, cx2, cy2
	DrawText@ hdc, ctext, -1, varptr(RECT), $01
	
	if redraw_exist = 0 : redraw 1
	return

/*画像をぼかす（hsp/sample/new/gblur.hsp | 使用例：gblur 2）*/
#deffunc gblur int p1, int p2
	gmode 3, ginfo_sx, ginfo_sy, 128
	if (p2&1)=0 {
		repeat p1
		pos 1,0:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),2,0
		loop
	}
	if (p2&2)=0 {
		repeat p1
		pos 0,1:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),0,2
		loop
	}
	return
	
/*半透明色表示命令*/
#deffunc boxfa int ax, int ay, int bx, int by
	pdx = ax, bx, bx, ax
	pdy = ay, ay, by, by
	gsquare -1,pdx, pdy
	return
	
/*アドオンの情報を取得*/
#deffunc get_about_addon int search_addon_number@, int search_type_number@, int search_direction_number@, var input_top_left_x, var input_top_left_y, var input_bottom_right_x, var input_bottom_right_y,var input_size_x, var input_size_y
	//オブジェクトの画像上の座標を取得
		input_top_left_x = addon_top_left_x@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_top_left_y = addon_top_left_y@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_bottom_right_x = addon_bottom_right_x@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_bottom_right_y = addon_bottom_right_y@( search_addon_number@, search_type_number@, search_direction_number@ )
		
		input_size_x = addon_size_x@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_size_y = addon_size_y@( search_addon_number@, search_type_number@, search_direction_number@ )
	
	return
								
#global
	
*buffering
	//ロゴ、背景画像
		celload "img/logo.png", 1									; ロゴ
		celload "img/AME963_sappro_TP_V.jpg", 2						; タイトル背景画像
	
	//メニューのアイコン
		celload "img/menu_icons/normal_cursor/cursor.png", 3				; 標準カーソル
		celload "img/menu_icons/building/road.png", 4						; メニューアイコン（道路敷設）
		celload "img/menu_icons/building/low_density_residential.png", 5	; メニューアイコン（住居地区建設）
		celload "img/menu_icons/building/office.png", 6						; メニューアイコン（オフィス建設）
		celload "img/menu_icons/building/post_office.png", 7				; メニューアイコン（郵便局建設）
	
		celload "img/menu_icons/bulldozer/bulldozer.png", 10				; メニューアイコン（取り壊し）
	
	//小サイズのアイコン
		celload "img/menu_icons/mini/low_density_residential.png", 8		; 高密度住居地区
		celload "img/menu_icons/mini/high_density_residential.png", 9		; 低密度住居地区
	
	//onexit
		onexit *exit
	
	//タスクバーの高さを取得
			dim RECT, 4
		
			FindWindow "shell_traywnd"
			GetWindowRect stat, varptr (RECT)
			
			taskbar_high = RECT.3 - RECT.1
	
	//タイトルとバージョンの読み込み
		notesel about
		noteload "data/about.txt"
		
		noteget about_title, 0
		noteget about_version, 1
	
		split about_title, " : ", not_use, about_title
		split about_version, " : ", not_use, about_version
	
		title about_title
	
	//バッファ番号1000以降はオブジェクト
		//まずAddonフォルダ内のアドオンの数を取得
			directory = dirinfo(0)
	
			#include "hspext.as"
				chdir "addons"
	
				//まずパス名を覗いたファイル一覧を取得
					dirlist2h 2, ','
					dirlist2 buf_addons, "*.adat*", 1, '\\'
		
					sdim addon_file_name, buf_addons
					dirlist2r addon_file_name
					
				//次にパス名を含めたファイル一覧を取得
					dirlist2h 1, ','
					dirlist2 buf_addons, "*.adat*", 1, '\\'
					
					sdim filelist, buf_addons
					dirlist2r filelist
		
					notesel filelist
					total_addons = notemax
	
					addon_number = 0
	
			//sdim＆dim
				sdim addon_name, total_addons
				sdim addon_jp_name, total_addons
				sdim addon_summary, total_addons
				sdim addon_icon, total_addons
				sdim addon_type, total_addons
	
				sdim use_type, total_addons, 100
				dim addon_total_use_types, total_addons
	
				dim addon_total_addon_direction, total_addons, 100
				sdim addon_direction, total_addons, 100, 100
				sdim addon_image, total_addons, 100
	
				addon_direction = ""
			
				sdim addon_size_x_buf, total_addons, 100, 100
				sdim addon_size_y_buf, total_addons, 100, 100
				dim addon_size_x, total_addons, 100, 100
				dim addon_size_y, total_addons, 100, 100
			
				sdim addon_chip_x_buf, total_addons, 100, 100
				sdim addon_chip_y_buf, total_addons, 100, 100
				dim addon_chip_x, total_addons, 100, 100
				dim addon_chip_y, total_addons, 100, 100
			
				sdim addon_top_left_x_buf, total_addons, 100, 100
				sdim addon_top_left_y_buf, total_addons, 100, 100
				dim addon_top_left_x, total_addons, 100, 100
				dim addon_top_left_y, total_addons, 100, 100
			
				sdim addon_bottom_right_x_buf, total_addons, 100, 100
				sdim addon_bottom_right_y_buf, total_addons, 100, 100
				dim addon_bottom_right_x, total_addons, 100, 100
				dim addon_bottom_right_y, total_addons, 100, 100
	
				sdim type_Two_lane_road, 128
				sdim type_number_Two_lane_road, 128
				sdim type_low_density_residential, 128
				sdim type_number_low_density_residential, 128
				sdim type_high_density_residential, 128
				sdim type_number_high_density_residential, 128
				sdim type_low_density_office, 128
				sdim type_high_density_office, 128
				sdim type_industrial, 128
				sdim type_public, 128
				
			//オブジェクトのadatファイルを読み込み
				repeat total_addons
					notesel filelist
					noteget buf_filelist, cnt
	
					notesel buf_adat
					noteload buf_filelist
	
					//現在のパス名のみ取得
						addon_path = getpath(buf_filelist, 32)
	
					//ディレクトリ変更
						chdir addon_path
	
					//各項目の読み込み
						//アドオン名
							addon_name(cnt) = get_chapter(buf_adat, "addon_name", " = \\", "\"")
	
						//日本語のアドオン名と説明
							addon_jp_name(cnt) = get_chapter(buf_adat, "addon_jp_name", " = \\", "\"")
							addon_summary(cnt) = get_chapter(buf_adat, "addon_summary", " = \\", "\"")
	
						//アドオンのアイコン
							addon_icon(cnt) = get_chapter(buf_adat, "addon_icon", " = \\", "\"")
							
						//アドオンのタイプ
							addon_type(cnt) = get_chapter(buf_adat, "addon_type", " = \"", "\"")
	
						//アドオンのadatファイルの詳細の読み込みへ
							gosub *load_adat
	
						//カテゴリ分け
							if addon_type(cnt) = "Two_lane_road" {
								notesel type_Two_lane_road
								noteadd addon_name(cnt)
	
								notesel type_number_Two_lane_road
								noteadd str(cnt)
							}
							
							if addon_type(cnt) = "low_density_residential" {
								notesel type_low_density_residential
								noteadd addon_name(cnt)
	
								notesel type_number_low_density_residential
								noteadd str(cnt)
							}
							if addon_type(cnt) = "high_density_residential" {
								notesel type_high_density_residential
								noteadd addon_name(cnt)
	
								notesel type_number_high_density_residential
								noteadd str(cnt)
							}
	
							if addon_type(cnt) = "low_density_commercial" {
								notesel type_low_density_commercial
								noteadd addon_name(cnt)
	
								notesel type_number_low_density_commercial
								noteadd str(cnt)
							}
							if addon_type(cnt) = "high_density_commercial" {
								notesel type_high_density_commercial
								noteadd addon_name(cnt)
	
								notesel type_number_high_density_commercial
								noteadd str(cnt)
							}
	
							if addon_type(cnt) = "low_density_office" {
								notesel type_low_density_office
								noteadd addon_name(cnt)
	
								notesel type_number_low_density_office
								noteadd str(cnt)
							}
							if addon_type(cnt) = "high_density_office" {
								notesel type_high_density_office
								noteadd addon_name(cnt)
	
								notesel type_number_high_density_office
								noteadd str(cnt)
							}
	
							if addon_type(cnt) = "industrial" {
								notesel type_industrial
								noteadd addon_name(cnt)
	
								notesel type_industrial
								noteadd str(cnt)
							}
							
							if addon_type(cnt) = "public" {
								notesel type_public
								noteadd addon_name(cnt)
	
								notesel type_number_public
								noteadd str(cnt)
							}
	
						//アドオンのバッファ（1000〜、複数の画像を利用する場合は1001000〜）
							if addon_total_use_types(addon_number) > 1 {
								repeat addon_total_use_types(addon_number)
									addon_buffer_number = (1000 + addon_number) * 1001 + cnt
									celload addon_image(addon_number, cnt), addon_buffer_number
									await 1
								loop
							} else {
								celload addon_image(addon_number, 0), (1000 + addon_number)
							}
	
						//アドオンのアイコンのバッファ（10001000〜）
							celload addon_icon(addon_number), (10001000 + addon_number)
	
						//ディレクトリを戻す
							chdir directory
	
						//一時ファイルを保存
							temp_file = str(addon_number)
							
							notesel temp_file
							notesave "data/temp/"+addon_name(cnt)+".temp"
	
						//ディレクトリを戻す
							chdir ""+directory+"\\addons"
	
						addon_number++
	
					await 1
				loop
	
			chdir directory
	
*menu
	pos 0, 0 : gzoom 640, 480, 2, 0, 0, 1600, 1066 : gblur 2
	
	pos 265, 50 : gmode 0 : gcopy 1, 0, 0, 110, 110
	
	color 255, 255, 255
	cmes "Ver."+about_version+"", 0, 270, 640, 300
	
	objsize 100, 20
	pos 270, 350 : button "新規マップ作成", *map_preparating
	
	stop

*map_preparating
	clrobj
	
	camx=-300:camy=-150		//カメラの位地
	mapx=100:mapy=100
	
	menu_line_y = 400		//メニューとの境界線
	cursor_mode = "normal"	//カーソルのモード
	
	windowx = 640
	windowy = 480
	
	pointer_icon = -1		//ポインタのアイコン（-1で四角形）
	
	put_addon_name = "tile_greenfield"
	
	dim buffer_number, mapx, mapy
	dim atlx, mapx, mapy
	dim atly, mapx, mapy
	dim abrx, mapx, mapy
	dim abry, mapx, mapy
	dim sizex, mapx, mapy
	dim sizey, mapx, mapy
	
	dim map, mapx, mapy			//マップの座標
	sdim category, mapx, mapy	//各マスに置かれているアドオンのカテゴリー（road, residentialなど）
	dim obj_type, mapx, mapy	//座標上にあるオブジェクトのタイプ
	dim obj_dire, mapx, mapy	//座標上にあるオブジェクトの向き
	
	ix = 0 : iy = 0
	
	addon_num_buf = addon_num("tile_greenfield")
	
	repeat mapx * mapy
		map(ix,iy) = addon_num_buf
		category(ix,iy) = "tile"
		obj_type(ix,iy) = 0
		obj_dire(ix,iy) = 0
		
		ix++
		if ix = mapx {
			ix = 0
			iy += 1
		}
	loop
	
*map_drawing
	repeat
	
		/*カメラ操作*/
			getkey key_left, 37
			if key_left = 1 {
				camx -= 10
			}
			
			getkey key_up, 38
			if key_up = 1 {
				camy -= 5
			}
			
			getkey key_right, 39
			if key_right = 1 {
				camx += 10
			}
			
			getkey key_down, 40
			if key_down = 1 {
				camy += 5
			}
	
		/*マップ描写*/
			redraw 0
			color 0, 0, 0 : boxf
			
			mousex_=mousex+camx-chip_size/2	//mx,myにマウス座標取得
			mousey_=mousey+camy
			mx=(mousey_+mousex_/2)/(chip_size/2)
			my=(-mousex_+mousey_*2)/chip_size
	
		; ------ FPS取得処理 ------
			  if gettime(7) < msecond { ; ミリ秒の桁上がりを確認する
			    ; fpsにカウントしたフレーム数を代入し、カウントを1フレーム目に戻す
			    fps = frame_count
			    frame_count = 1
			
			  } else {
			    ; 上記以外の場合フレームをカウント
			    frame_count = frame_count + 1
			
			  }
			  ; msecondへ現在のミリ秒値を代入
			  msecond = gettime(7)
			
	
		stick key,0 ; キー取得
	
*map_drawing_2
			repeat mapx
				x = cnt
				
				repeat mapy
					y = cnt
	
					x_=(windowx/2)+camx-chip_size/2	//mx,myにマウス座標取得
					y_=(windowy/2)+camy
					middle_x=(y_+x_/2)/(chip_size/2)
					middle_y=(-x_+y_*2)/chip_size
	
					if x > (middle_x-(windowx/64)) - 5 and y > (middle_y-(windowy/32)) - 5 and x < (middle_x+(windowx/64)) + 5 and y < (middle_y+(windowy/32)) + 5 {
	
						if cnt \ 10000 = 0 {
							title "マウス座標("+mx+","+my+") 画面中央の座標("+middle_x+","+middle_y+") カメラ座標("+camx+","+camy+") FPS:"+fps+""
						}
		
						//マウスがクリックされているとき
							getkey mouse_left, 1
							getkey mouse_right, 2
		
							if mouse_left = 1 or mouse_right = 1 {
								gosub *map_drawing_onclick
							}
		
						//周囲のオブジェクトの番号を取得
							left_chip = ""
							top_chip = ""
							bottom_chip = ""
							right_chip = ""
		
							if x > 0 {
								left_chip = category(x-1, y)
							}
							if y > 0 {
								top_chip = category(x, y-1)
							}
							if mapy-1 > y {
								bottom_chip = category(x, y+1)
							}
							if mapx-1 > x {
								right_chip = category(x+1, y)
							}
		
						//道路の向きを調節
							gosub *adjustment_road
						
						//マップ作成
							qv2 x, y
		
							if addon_total_use_types( map(x,y) ) > 1 {		; ひとつのアドオンで複数の画像を領する場合
								buffer_number(x,y) = (map(x,y) + 1000) * 1001 + obj_type(x,y)
								get_about_addon map(x,y), obj_type(x,y), obj_dire(x,y), atlx, atly, abrx, abry, sizex, sizey
								
							} else {										; ひとつのアドオンでひとつの画像を領する場合
								buffer_number(x,y) = map(x,y) + 1000
								get_about_addon map(x,y), obj_type(x,y), obj_dire(x,y), atlx, atly, abrx, abry, sizex, sizey
								
							}
		
							if sizey > 32 {
								macro2 -= 16
							}
							
							//オブジェクトを表示
							pos macro1, macro2 - sizey/2 + 1
							gmode 2 : gcopy buffer_number(x,y), atlx, atly, sizex, sizey
	
						}
	
					//マウスポインタの位置のチップを光らせる
						if mx=x & my=y and mousey < menu_line_y {
							if pointer_icon = -1 {
								if cursor_mode = "normal" {
									color 0, 162, 232
								}
								if cursor_mode = "bulldozer" {
									color 245, 133, 138
								}
								qv x,y
							} else {
								color 0, 162, 232
								qv x,y
								
								qv2 x,y
								color : gmode 4,,,200
								pos macro1+16,macro2-16 : gcopy (10001000+pointer_icon), 0, 0, 32, 32
							}
							continue
						}
					
				loop
					
			loop
	
*menu_buttons
			//メニュー
				color 0, 0, 0
				gmode 3,,,200 : boxfa 0, 410, 640, 480
	
				//標準カーソルボタン
					if cursor_mode = "normal" {
						gmode 2
						pos 20, windowy-70 : gcopy 3, 0, 32, 32, 32
					} else {
						gmode 2
						pos 20, windowy-70 : gcopy 3, 0, 0, 32, 32
					}
	
				//道路ボタン
					if cursor_mode = "put_Road" {
						gmode 2
						pos 60, windowy-70 : gcopy 4, 0, 32, 32, 32
					} else {
						gmode 2
						pos 60, windowy-70 : gcopy 4, 0, 0, 32, 32
					}
	
				//建物（住居地区）ボタン
					if cursor_mode = "put_Residential" {
						gmode 2
						pos 92, windowy-70 : gcopy 5, 0, 32, 32, 32
					} else {
						gmode 2
						pos 92, windowy-70 : gcopy 5, 0, 0, 32, 32
					}
	
				//建物（オフィス）ボタン
					if cursor_mode = "put_High_density_Office" {
						gmode 2
						pos 124, windowy-70 : gcopy 6, 0, 32, 32, 32
					} else {
						gmode 2
						pos 124, windowy-70 : gcopy 6, 0, 0, 32, 32
					}
	
				//建物（郵便局）ボタン
					if cursor_mode = "put_Public" {
						gmode 2
						pos 156, windowy-70 : gcopy 7, 0, 32, 32, 32
					} else {
						gmode 2
						pos 156, windowy-70 : gcopy 7, 0, 0, 32, 32
					}
	
				//取り壊しボタン
					if cursor_mode = "bulldozer" {
						gmode 2
						pos windowx-54, windowy-70 : gcopy 10, 0, 32, 32, 32
					} else {
						gmode 2
						pos windowx-54, windowy-70 : gcopy 10, 0, 0, 32, 32
					}
	
				if opening_addon_menu = 1 {
					gosub *open_menu_addon_menu
				}
					
			redraw 1
			await 30
			c+=16
	loop
	
*map_drawing_onclick
	/*------------------------------------------メニューのボタンの動作------------------------------------------------*/
	
		//標準カーソルボタン
			if click_range( 20, 410, 20+32, 410+32 ) = 1 {
				cursor_mode = "normal"
	
				opening_addon_menu = 0
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Public = 0
			}
			
		//道路ボタン
			if click_range( 60, 410, 60+32, 410+32 ) = 1 {
				
				if opening_menu_put_Road = 0 {
					cursor_mode = "put_Road"
					density = ""
					
					gosub *open_menu_addon_menu
	
					opening_addon_menu = 1
					opening_menu_put_Road = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_Two_lane_road
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_Two_lane_road
							noteget addon_num_normal_road, clicked_addon_number
							addon_num_normal_road = int(addon_num_normal_road)
				} 
				/*
				if opening_menu_put_Road = 1 {
					cursor_mode = "normal"
					opening_menu_put_Road = 0
				}
				*/
	
				opening_menu_put_Residential = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Public = 0
			}
	
		//建物（住居地区）ボタン
			if click_range( 92, 410, 92+32, 410+32 ) = 1 {
				
				if opening_menu_put_Reaidential = 0 {
					cursor_mode = "put_Residential"
					density = "low"
					
					gosub *open_menu_addon_menu
					opening_addon_menu = 1
					opening_menu_put_Residential = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_low_density_residential
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_low_density_residential
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				} 
				
				opening_menu_put_Road = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Public = 0
			}
	
		//建物（オフィス）ボタン
			if click_range( 124, 410, 124+32, 410+32 ) = 1 {
	
				if opening_menu_put_High_density_Office = 0 {
					cursor_mode = "put_High_density_Office"
					gosub *open_menu_addon_menu
	
					opening_addon_menu = 1
					opening_menu_put_High_density_Office = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_high_density_office
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_high_density_office
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				} 
	
				opening_menu_put_Road = 0
				opening_menu_put_High_density_Residential = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_Public = 0
			}
		//建物（公共施設）ボタン
			if click_range( 156, 410, 156+32, 410+32 ) = 1 {
	
				if opening_menu_put_High_density_Residential = 0 {
					cursor_mode = "put_Public"
					gosub *open_menu_addon_menu
	
					opening_addon_menu = 1
					opening_menu_put_Public = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_public
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_public
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				} 
	
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
			}
	
		//取り壊しボタン
			//標準カーソルボタン
			if click_range( windowx-54, windowy-70, windowx-54+32, windowy-70+32 ) = 1 {
				cursor_mode = "bulldozer"
	
				opening_addon_menu = 0
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Low_density_Office = 0
				opening_menu_put_High_density_Office = 0
				opening_menu_put_Public = 0
			}
	
	
		//アドオン選択ボタン（水色のメニューバー）
			
			/*-------------------------------------------道路---------------------------------------------------*/
				notesel type_Two_lane_road
				if opening_menu_put_Road = 1 and click_range( 10+35, windowy-70-32, notemax*35+10+35, windowy-70 ) = 1 {
					cursor_mode = "put_Road"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_Two_lane_road
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_Two_lane_road
						noteget addon_num_normal_road, clicked_addon_number
						addon_num_normal_road = int(addon_num_normal_road)
				}
	
			/*-----------------------------------------住居地区-------------------------------------------------*/
	
			//住居地区の低密度・高密度選択ボタン
				//低密度
					if cursor_mode = "put_Residential" and click_range( 0, windowy-70-32, 16, windowy-70-16 ) = 1 {
						density = "low"
		
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_low_density_residential
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_low_density_residential
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
								
						gosub *open_menu_addon_menu
					}
				//高密度
				if cursor_mode = "put_Residential" and click_range( 0, windowy-70-16, 16, windowy-70 ) = 1 {
					density = "high"
	
					//とりあえず一番左にあるアドオンを選択させておく
					clicked_addon_number = 0
		
					//選択されたアドオンのアドオン名を取得
						notesel type_high_density_residential
						noteget put_addon_name, clicked_addon_number
			
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_high_density_residential
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
						
					gosub *open_menu_addon_menu
				}
			
			//低密度住居地区
				notesel type_low_density_residential
				if opening_menu_put_Residential = 1 and density = "low" and click_range( 10+35, windowy-70-32, notemax*35+10+35, windowy-70 ) = 1 {
					cursor_mode = "put_Residential"
					
					clicked_addon_number = mousex/35 - 1
					
					//選択されたアドオンのアドオン名を取得
						notesel type_low_density_residential
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_low_density_residential
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
				
			//高密度住居地区
				notesel type_high_density_residential
				if opening_menu_put_Residential = 1 and density = "high" and click_range( 10+35, windowy-70-32, notemax*35+10+35, windowy-70 ) = 1 {
					cursor_mode = "put_Residential"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_high_density_residential
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_high_density_residential
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
	
			/*--------------------------------------------オフィス-----------------------------------------------*/
			
			//高密度オフィス
				notesel type_high_density_office
				if opening_menu_put_high_density_office = 1 and click_range( 10+35, windowy-70-32, notemax*35+10+35, windowy-70 ) = 1 {
					cursor_mode = "put_High_density_Office"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_high_density_office
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_high_density_office
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
	
			/*---------------------------------------------公共施設-----------------------------------------------*/
			
			//公共施設
				notesel type_public
				if opening_menu_put_public = 1 and click_range( 10+35, windowy-70-32, notemax*35+10+35, windowy-70 ) = 1 {
					cursor_mode = "put_Public"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_public
						noteget put_addon_name, clicked_addon_number
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_public
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
				}
			
	
	/*-----------------道路・建物の建設・敷設（左クリック）、削除（右クリック or 取り壊しモード）---------------------*/
	
		if opening_addon_menu = 1 {
			menu_line_y = windowy-70-32-20
		} else {
			menu_line_y = windowy-70
		}
	
		//標準カーソルモードあるいはクリックされたマウスy座標がmenu_line_y以上の場合はreturn
			if cursor_mode = "normal" or mousey >= menu_line_y or mx < 0 or my < 0 {
				pointer_icon = -1
				return
			}
	
		//取り壊しモードの場合は選択されたマスを更地にする
			if cursor_mode = "bulldozer" {
				map(mx, my) = addon_num("tile_greenfield")
				category(mx, my) = "tile"
				obj_type(mx, my) = element2( "tile_greenfield", use_type, addon_total_use_types, "null")
				obj_dire(mx, my) = element3( "tile_greenfield", use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "null")
	
				return
			}
	
		//周囲のオブジェクトのカテゴリを取得
			left_chip = ""
			top_chip = ""
			bottom_chip = ""
			right_chip = ""
	
			if mx > 0 {
				left_chip = category(mx-1, my)
			}
			if my > 0 {
				top_chip = category(mx, my-1)
			}
			if mapy-1 > my {
				bottom_chip = category(mx, my+1)
			}
			if mapx-1 > mx {
				right_chip = category(mx+1, my)
			}
	
		//建設・敷設
			if mouse_left = 1 {
				
				//道路敷設
					if cursor_mode = "put_Road" and map(mx, my) != addon_num_normal_road {
						map(mx, my) = addon_num_normal_road
						category(mx, my) = "road"
	
						//道路の向きを揃える
							gosub *adjustment_road
					}
	
				//道路敷設以外の場合、選択されたマスの周囲（上下左右）に道路があるかどうか（道路に接続できるか）
					if cursor_mode != "put_Road" {
	
						around_road_exist = -1
						
						if mx > 0 {
							if category(mx-1, my) = "road" {
								around_road_exist += 1
								
								obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "null")
								obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "left")
							}
						}
						if my > 0 {
							if category(mx, my-1) = "road" {
								around_road_exist += 1
								
								obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "null")
								obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "top")
							}
						}
						if my < mapy {
							if category(mx, my+1) = "road" {
								around_road_exist += 1
	
								obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "null")
								obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "bottom")
							}
						}
						if mx < mapx {
							if category(mx+1, my) = "road" {
								around_road_exist += 1
	
								obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "null")
								obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "right")
							}
						}
	
						if around_road_exist = -1 and (ginfo_mx>=ginfo_wx1 & ginfo_mx<=ginfo_wx2) and (ginfo_my>=ginfo_wy1+taskbar_high&ginfo_my<=ginfo_wy2) {
							dialog "道路に接続されていない場所には建設できません！"
							return
						}
	
						if around_road_exist >= 0 {
							//建物（住居地区）建設
								if cursor_mode = "put_Residential" {
									map(mx, my) = addon_num_buf
									category(mx, my) = "residential"
								}
				
							//建物（高密度オフィス）建設
								if cursor_mode = "put_High_density_Office" {
									map(mx, my) = addon_num_buf
									category(mx, my) = "office"
								}
				
							//建物（公共施設）建設
								if cursor_mode = "put_Public" {
									map(mx, my) = addon_num_buf
									category(mx, my) = "public"
								}
						/*
							//周辺にある道路の向きを揃える
								cursor_mode_buf = cursor_mode
								x_buf = x : y_buf = y
								
								repeat 4
									if cnt = 0 {
										x = mx-1
									}
									if cnt = 1 {
										y = my-1
									}
									if cnt = 2 {
										y = my+1
									}
									if cnt = 3 {
										x = mx+1
									}
									
									if category(x,y) = "road" {
										dialog"A"
										cursor_mode = "put_Road"
										put_addon_name = "normal_road(orange_line)
										gosub *adjustment_road
									}
								loop
	
								cursor_mode = cursor_mode_buf
								x = x_buf : y = y_buf
						*/
								
						}
					}	
					
			}
			
		//取り壊し
			if mouse_right = 1 {
	
				//道路削除
					if cursor_mode = "put_Road" and category(mx, my) = "road" {
						map(mx, my) = addon_num("tile_greenfield")
						category(mx, my) = "tile"
						obj_type(mx, my) = element2( "tile_greenfield", use_type, addon_total_use_types, "null")
						obj_dire(mx, my) = element3( "tile_greenfield", use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "null")
					}
	
				//住居地区削除
					if cursor_mode = "put_Residential" and category(mx, my) = "residential" {
						map(mx, my) = addon_num("tile_greenfield")
						category(mx, my) = "tile"
						obj_type(mx, my) = element2( "tile_greenfield", use_type, addon_total_use_types, "null")
						obj_dire(mx, my) = element3( "tile_greenfield", use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "null")
					}
	
				//オフィス削除
					if (cursor_mode = "put_High_density_Office" or cursor_mode = "put_Low_density_Office") and category(mx, my) = "office" {
						map(mx, my) = addon_num("tile_greenfield")
						category(mx, my) = "tile"
						obj_type(mx, my) = element2( "tile_greenfield", use_type, addon_total_use_types, "null")
						obj_dire(mx, my) = element3( "tile_greenfield", use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "null")
					}
	
				//公共事業削除
					if cursor_mode = "put_Public" and category(mx, my) = "public" {
						map(mx, my) = addon_num("tile_greenfield")
						category(mx, my) = "tile"
						obj_type(mx, my) = element2( "tile_greenfield", use_type, addon_total_use_types, "null")
						obj_dire(mx, my) = element3( "tile_greenfield", use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "null")
					}
	
			}
		
		return
	
*open_menu_addon_menu
	color 0,162,232 : gmode 3,,,200 : boxfa 0, windowy-70-32-40, windowx, windowy-70
	
	if cursor_mode = "put_Road" {
		notesel type_number_Two_lane_road
	}
	if cursor_mode = "put_Residential" and density = "low" {
		notesel type_number_low_density_residential
	
		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-32-40, 16, windowy-70
		pos 0, windowy-72-32 : gmode 2 : gcopy 8, 0, 16, 16, 16
		pos 0, windowy-72-16 : gmode 2 : gcopy 9, 0, 0, 16, 16 
	}
	if cursor_mode = "put_Residential" and density = "high" {
		notesel type_number_high_density_residential
	
		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-32-40, 16, windowy-70
		pos 0, windowy-72-32 : gmode 2 : gcopy 8, 0, 0, 16, 16
		pos 0, windowy-72-16 : gmode 2 : gcopy 9, 0, 16, 16, 16
	}
	if cursor_mode = "put_Low_density_Office" {
		notesel type_number_low_density_office
	}
	if cursor_mode = "put_High_density_Office" {
		notesel type_number_high_density_office
	}
	if cursor_mode = "put_Public" {
		notesel type_number_public
	}
	
	repeat notemax
		noteget get_addon_number, cnt
	
		gmode 2
		if clicked_addon_number != cnt {
			pos 30 + (cnt*35)+10, windowy-70-32 : gcopy (10001000 + int(get_addon_number)), 0, 0, 32, 32
		}
		if clicked_addon_number = cnt {
			color 255,255,255 : font "", 14
			pos 20, (windowy-70-32-40+5) : mes addon_jp_name(int(get_addon_number))
			
			color 255,255,255 : font "", 10
			pos 23, (windowy-70-32-20) : mes addon_summary(int(get_addon_number))
			
			pos 30 + (cnt*35)+10, windowy-70-32 : gcopy (10001000 + int(get_addon_number)), 0, 32, 32, 64
	
			pointer_icon = int(get_addon_number)
		}
	
		await 1
	loop
	
	return
		
*adjustment_road
	if instr(put_addon_name, 0, "road") = -1 {
		return
	}
	if category(x, y) = "road" and (cursor_mode = "put_Road" or cursor_mode = "bulldozer") {
		
		//縦向き
			if left_chip != "road" and top_chip = "road" and bottom_chip = "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "width")
			}
	
		//横向き
			if left_chip = "road" and top_chip != "road" and bottom_chip != "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "depth")
			}
	
		//行き止まり
			if left_chip = "road" and top_chip != "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "left")
			}
			if left_chip != "road" and top_chip = "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "top")
			}
			if left_chip != "road" and top_chip != "road" and bottom_chip = "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "bottom")
			}
			if left_chip != "road" and top_chip != "road" and bottom_chip != "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "right")
			}
	
		//曲がり角
			if left_chip = "road" and top_chip = "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "left-top")
			}
			if left_chip != "road" and top_chip = "road" and bottom_chip != "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "right-top")
			}
			if left_chip = "road" and top_chip != "road" and bottom_chip = "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "left-bottom")
			}
			if left_chip != "road" and top_chip != "road" and bottom_chip = "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "right-bottom")
			}
	
		//T字型交差点
			if left_chip = "road" and top_chip = "road" and bottom_chip = "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-top-bottom")
			}
			if left_chip = "road" and top_chip = "road" and bottom_chip != "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-right-top")
			}
			if left_chip = "road" and top_chip != "road" and bottom_chip = "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-right-bottom")
			}
			if left_chip != "road" and top_chip = "road" and bottom_chip = "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "right-top-bottom")
			}
	
		//十字型交差点
			if left_chip = "road" and top_chip = "road" and bottom_chip = "road" and right_chip = "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_cross")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_cross", addon_direction, addon_total_addon_direction, "null")
			}
	
		//1マスだけ孤立した（周りに接続する道路がない）道路の場合はコンクリートタイルを表示
			if left_chip != "road" and top_chip != "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_cross")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_cross", addon_direction, addon_total_addon_direction, "null")
			}
	
		}
	
	return
	
*load_adat
	notesel buf_adat
			
	use_types_buf = get_chapter(buf_adat, "use_types", " = \"", "\"")
	
	//adat_use_typesを更にタイプごとに分ける
		split use_types_buf, ", ", use_type_buf
	
		repeat stat
			use_type(addon_number, cnt) = use_type_buf(cnt)
			await 1
		loop
				
	//タイプの数を取得
		addon_total_use_types(addon_number) = stat
				
	//各タイプごとの概要を取得
	
		//取得開始
		repeat addon_total_use_types(addon_number)
			use_type_summary = get_chapter(buf_adat, ""+use_type(addon_number, cnt)+" {", " {", ";")
	
			//使用する画像の取得（image）
				addon_image(addon_number, cnt) = get_chapter(use_type_summary, "image", " = \"", "\"")
						
			//タイプの向きを取得（direction）
				addon_direction_buf = get_chapter(use_type_summary, "direction", " = \"", "\"")
						
				split addon_direction_buf, ", ", addon_direction_buf_2
	
				load_adat_cnt = cnt
	
				addon_total_addon_direction(addon_number, cnt) = stat
	
				repeat addon_total_addon_direction(addon_number, load_adat_cnt)
					addon_direction(addon_number, load_adat_cnt, cnt) = addon_direction_buf_2(cnt)
	
					addon_direction_summary = get_chapter(use_type_summary, ""+addon_direction(addon_number, load_adat_cnt, cnt)+" {", " {", "}")
	
					//サイズを取得（size_x, size_y）
						addon_size_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "size_x", " = \"", "\"")
						addon_size_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "size_y", " = \"", "\"")
										
						addon_size_x(addon_number, load_adat_cnt, cnt) = int(addon_size_x_buf(addon_number, load_adat_cnt, cnt))
						addon_size_y(addon_number, load_adat_cnt, cnt) = int(addon_size_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップのゲーム上の座標サイズを取得（chip_x, chip_y）
						addon_chip_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "chip_x", " = \"", "\"")
						addon_chip_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "chip_y", " = \"", "\"")
										
						addon_chip_x(addon_number, load_adat_cnt, cnt) = int(addon_chip_x_buf(addon_number, load_adat_cnt, cnt))
						addon_chip_y(addon_number, load_adat_cnt, cnt) = int(addon_chip_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップの左上の座標を取得（top_left_x, top_left_y）
						addon_top_left_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "top_left_x", " = \"", "\"")
						addon_top_left_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "top_left_y", " = \"", "\"")
										
						addon_top_left_x(addon_number, load_adat_cnt, cnt) = int(addon_top_left_x_buf(addon_number, load_adat_cnt, cnt))
						addon_top_left_y(addon_number, load_adat_cnt, cnt) = int(addon_top_left_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップの右下の座標を取得（bottom_right_x, bottom_right_y）
						addon_bottom_right_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "bottom_right_x", " = \"", "\"")
						addon_bottom_right_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "bottom_right_y", " = \"", "\"")
										
						addon_bottom_right_x(addon_number, load_adat_cnt, cnt) = int(addon_bottom_right_x_buf(addon_number, load_adat_cnt, cnt))
						addon_bottom_right_y(addon_number, load_adat_cnt, cnt) = int(addon_bottom_right_y_buf(addon_number, load_adat_cnt, cnt))
									
					await 1
				loop
		
			wait 1
		loop
	
	return
	
*exit
	//一時ファイルを削除
		repeat total_addons
			exist "data/temp/"+addon_name(cnt)+".temp"
			
			if strsize != -1 {
				delete "data/temp/"+addon_name(cnt)+".temp"
			}
		
			wait 1
		loop
	
	end
	
*e
	dialog""+search_addon_number+"\n"+search_type_number+"\n"+search_direction_number+"\n\nx:"+x+"\ny:"+y+""
	
	return